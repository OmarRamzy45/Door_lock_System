
Final_Project_MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  000032dc  00003370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080012e  0080012e  0000343e  2**0
                  ALLOC
  3 .stab         00002f4c  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001351  00000000  00000000  0000638c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000076dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000781d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000798d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000095d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b270  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_4>
      14:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_9>
      28:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_10>
      2c:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e1       	ldi	r26, 0x16	; 22
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e1       	ldi	r24, 0x16	; 22
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 input_pass[PASS_SIZE];
uint8 pass_cmp_result = 0;
uint8 numberOfWrongPass = 0;
uint8 g_seconds = 0;

int main(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	c6 55       	subi	r28, 0x56	; 86
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0, j = 0;
     b5c:	1b ae       	std	Y+59, r1	; 0x3b
     b5e:	1a ae       	std	Y+58, r1	; 0x3a

	SREG |= (1 << SREG_I); /*enable global interrupts */
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24

	/*
	 * initialization of UART frame struct configuration to communicate with the other MC
	 * NO-Parity , one stop bit , 1-byte ( 8 bits ) word length and 9600 Baud rate
	 * */
	UART_ConfigType uart_config = { PARITY_DISABLED, OneStopBit, DataBits_8,9600 };
     b6e:	9e 01       	movw	r18, r28
     b70:	24 5c       	subi	r18, 0xC4	; 196
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	2f 96       	adiw	r28, 0x0f	; 15
     b76:	3f af       	std	Y+63, r19	; 0x3f
     b78:	2e af       	std	Y+62, r18	; 0x3e
     b7a:	2f 97       	sbiw	r28, 0x0f	; 15
     b7c:	86 e2       	ldi	r24, 0x26	; 38
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	61 96       	adiw	r28, 0x11	; 17
     b82:	9f af       	std	Y+63, r25	; 0x3f
     b84:	8e af       	std	Y+62, r24	; 0x3e
     b86:	61 97       	sbiw	r28, 0x11	; 17
     b88:	97 e0       	ldi	r25, 0x07	; 7
     b8a:	62 96       	adiw	r28, 0x12	; 18
     b8c:	9f af       	std	Y+63, r25	; 0x3f
     b8e:	62 97       	sbiw	r28, 0x12	; 18
     b90:	61 96       	adiw	r28, 0x11	; 17
     b92:	ee ad       	ldd	r30, Y+62	; 0x3e
     b94:	ff ad       	ldd	r31, Y+63	; 0x3f
     b96:	61 97       	sbiw	r28, 0x11	; 17
     b98:	00 80       	ld	r0, Z
     b9a:	61 96       	adiw	r28, 0x11	; 17
     b9c:	2e ad       	ldd	r18, Y+62	; 0x3e
     b9e:	3f ad       	ldd	r19, Y+63	; 0x3f
     ba0:	61 97       	sbiw	r28, 0x11	; 17
     ba2:	2f 5f       	subi	r18, 0xFF	; 255
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	61 96       	adiw	r28, 0x11	; 17
     ba8:	3f af       	std	Y+63, r19	; 0x3f
     baa:	2e af       	std	Y+62, r18	; 0x3e
     bac:	61 97       	sbiw	r28, 0x11	; 17
     bae:	2f 96       	adiw	r28, 0x0f	; 15
     bb0:	ee ad       	ldd	r30, Y+62	; 0x3e
     bb2:	ff ad       	ldd	r31, Y+63	; 0x3f
     bb4:	2f 97       	sbiw	r28, 0x0f	; 15
     bb6:	00 82       	st	Z, r0
     bb8:	2f 96       	adiw	r28, 0x0f	; 15
     bba:	2e ad       	ldd	r18, Y+62	; 0x3e
     bbc:	3f ad       	ldd	r19, Y+63	; 0x3f
     bbe:	2f 97       	sbiw	r28, 0x0f	; 15
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	2f 96       	adiw	r28, 0x0f	; 15
     bc6:	3f af       	std	Y+63, r19	; 0x3f
     bc8:	2e af       	std	Y+62, r18	; 0x3e
     bca:	2f 97       	sbiw	r28, 0x0f	; 15
     bcc:	62 96       	adiw	r28, 0x12	; 18
     bce:	3f ad       	ldd	r19, Y+63	; 0x3f
     bd0:	62 97       	sbiw	r28, 0x12	; 18
     bd2:	31 50       	subi	r19, 0x01	; 1
     bd4:	62 96       	adiw	r28, 0x12	; 18
     bd6:	3f af       	std	Y+63, r19	; 0x3f
     bd8:	62 97       	sbiw	r28, 0x12	; 18
     bda:	62 96       	adiw	r28, 0x12	; 18
     bdc:	8f ad       	ldd	r24, Y+63	; 0x3f
     bde:	62 97       	sbiw	r28, 0x12	; 18
     be0:	88 23       	and	r24, r24
     be2:	b1 f6       	brne	.-84     	; 0xb90 <main+0x4a>
	UART_init(&uart_config);
     be4:	ce 01       	movw	r24, r28
     be6:	cc 96       	adiw	r24, 0x3c	; 60
     be8:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <UART_init>
	 * use the prescaler as 1024 , initialize the value of prescaler2 to DONT Care as we don't use it
	 * set the initial value of the timer to 0 and compare value to 977 as we need the timer to raise flag
	 * each 1 sec , Timer freq = 1MHz/1024, one clock-cycle time = 1.024 mSecond
	 * so to force the timer to produce an interrupt every 1 second
	 we set the compare value to be 1/(1.024m) = 977 */
	Timer_ConfigType timer_config = { Timer1, 0, 977, COMPARE_MODE, DONT_CARE,PRESCALER_1024 };
     bec:	ce 01       	movw	r24, r28
     bee:	8d 5b       	subi	r24, 0xBD	; 189
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	64 96       	adiw	r28, 0x14	; 20
     bf4:	9f af       	std	Y+63, r25	; 0x3f
     bf6:	8e af       	std	Y+62, r24	; 0x3e
     bf8:	64 97       	sbiw	r28, 0x14	; 20
     bfa:	ee e1       	ldi	r30, 0x1E	; 30
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	66 96       	adiw	r28, 0x16	; 22
     c00:	ff af       	std	Y+63, r31	; 0x3f
     c02:	ee af       	std	Y+62, r30	; 0x3e
     c04:	66 97       	sbiw	r28, 0x16	; 22
     c06:	f8 e0       	ldi	r31, 0x08	; 8
     c08:	67 96       	adiw	r28, 0x17	; 23
     c0a:	ff af       	std	Y+63, r31	; 0x3f
     c0c:	67 97       	sbiw	r28, 0x17	; 23
     c0e:	66 96       	adiw	r28, 0x16	; 22
     c10:	ee ad       	ldd	r30, Y+62	; 0x3e
     c12:	ff ad       	ldd	r31, Y+63	; 0x3f
     c14:	66 97       	sbiw	r28, 0x16	; 22
     c16:	00 80       	ld	r0, Z
     c18:	66 96       	adiw	r28, 0x16	; 22
     c1a:	2e ad       	ldd	r18, Y+62	; 0x3e
     c1c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c1e:	66 97       	sbiw	r28, 0x16	; 22
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	66 96       	adiw	r28, 0x16	; 22
     c26:	3f af       	std	Y+63, r19	; 0x3f
     c28:	2e af       	std	Y+62, r18	; 0x3e
     c2a:	66 97       	sbiw	r28, 0x16	; 22
     c2c:	64 96       	adiw	r28, 0x14	; 20
     c2e:	ee ad       	ldd	r30, Y+62	; 0x3e
     c30:	ff ad       	ldd	r31, Y+63	; 0x3f
     c32:	64 97       	sbiw	r28, 0x14	; 20
     c34:	00 82       	st	Z, r0
     c36:	64 96       	adiw	r28, 0x14	; 20
     c38:	2e ad       	ldd	r18, Y+62	; 0x3e
     c3a:	3f ad       	ldd	r19, Y+63	; 0x3f
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	64 96       	adiw	r28, 0x14	; 20
     c44:	3f af       	std	Y+63, r19	; 0x3f
     c46:	2e af       	std	Y+62, r18	; 0x3e
     c48:	64 97       	sbiw	r28, 0x14	; 20
     c4a:	67 96       	adiw	r28, 0x17	; 23
     c4c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c4e:	67 97       	sbiw	r28, 0x17	; 23
     c50:	31 50       	subi	r19, 0x01	; 1
     c52:	67 96       	adiw	r28, 0x17	; 23
     c54:	3f af       	std	Y+63, r19	; 0x3f
     c56:	67 97       	sbiw	r28, 0x17	; 23
     c58:	67 96       	adiw	r28, 0x17	; 23
     c5a:	8f ad       	ldd	r24, Y+63	; 0x3f
     c5c:	67 97       	sbiw	r28, 0x17	; 23
     c5e:	88 23       	and	r24, r24
     c60:	b1 f6       	brne	.-84     	; 0xc0e <main+0xc8>
	Timer_init(&timer_config);
     c62:	ce 01       	movw	r24, r28
     c64:	8d 5b       	subi	r24, 0xBD	; 189
     c66:	9f 4f       	sbci	r25, 0xFF	; 255
     c68:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Timer_init>
	Timer_setCallBack(timer1HandlerCallBack, Timer1);/*set the timer function call back and choose Timer1*/
     c6c:	83 e6       	ldi	r24, 0x63	; 99
     c6e:	9b e0       	ldi	r25, 0x0B	; 11
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <Timer_setCallBack>

	LCD_init(); /*initialize the lcd */
     c76:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_init>
	setPassFirstTime(); /* call the fucntion the set the password for the first time once the program starts*/
     c7a:	0e 94 c0 08 	call	0x1180	; 0x1180 <setPassFirstTime>
	mainOptions(); /* function to display options for the system on the lcd */
     c7e:	0e 94 a9 08 	call	0x1152	; 0x1152 <mainOptions>
	uint8 recived_info = 0; /* variable to get the value from the other MC using UART */
     c82:	19 ae       	std	Y+57, r1	; 0x39
	key = 0; /* variable to get the value of keypad button pressed */
     c84:	1b ae       	std	Y+59, r1	; 0x3b

	while (1) {

		key = KEYPAD_getPressedKey(); /* get the value of the pressed button from keypad */
     c86:	0e 94 88 11 	call	0x2310	; 0x2310 <KEYPAD_getPressedKey>
     c8a:	8b af       	std	Y+59, r24	; 0x3b
		/*
		 * switch case to check on the pressed key from the keypad if it is '+' which calls the open door mechanism
		 * or '-' which calls the change password mechanism
		 * */
		switch (key) {
     c8c:	8b ad       	ldd	r24, Y+59	; 0x3b
     c8e:	e8 2f       	mov	r30, r24
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	2d 96       	adiw	r28, 0x0d	; 13
     c94:	ff af       	std	Y+63, r31	; 0x3f
     c96:	ee af       	std	Y+62, r30	; 0x3e
     c98:	2d 97       	sbiw	r28, 0x0d	; 13
     c9a:	2d 96       	adiw	r28, 0x0d	; 13
     c9c:	2e ad       	ldd	r18, Y+62	; 0x3e
     c9e:	3f ad       	ldd	r19, Y+63	; 0x3f
     ca0:	2d 97       	sbiw	r28, 0x0d	; 13
     ca2:	2b 32       	cpi	r18, 0x2B	; 43
     ca4:	31 05       	cpc	r19, r1
     ca6:	49 f0       	breq	.+18     	; 0xcba <main+0x174>
     ca8:	2d 96       	adiw	r28, 0x0d	; 13
     caa:	8e ad       	ldd	r24, Y+62	; 0x3e
     cac:	9f ad       	ldd	r25, Y+63	; 0x3f
     cae:	2d 97       	sbiw	r28, 0x0d	; 13
     cb0:	8d 32       	cpi	r24, 0x2D	; 45
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <main+0x172>
     cb6:	2f c1       	rjmp	.+606    	; 0xf16 <main+0x3d0>
     cb8:	e6 cf       	rjmp	.-52     	; 0xc86 <main+0x140>
		case '+':
			LCD_clearScreen();
     cba:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
			LCD_displayString("Enter Pass");
     cbe:	80 e6       	ldi	r24, 0x60	; 96
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
			/*call the function of getting password from the user and then send it to the other MC by UART
			 * to check the password match then depending on the recieved value from the other MC by the UART
			 * if the two passwords match then call the open door function
			 * if the two passwords don't match then display a "wrong password" on lcd and diplay the main options again  */
			getPass(input_pass);
     cc6:	87 e3       	ldi	r24, 0x37	; 55
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 8b 0a 	call	0x1516	; 0x1516 <getPass>
			UART_sendByte(READY_TO_SEND);
     cce:	80 e1       	ldi	r24, 0x10	; 16
     cd0:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
			for (j = 0; j < PASS_SIZE; j++) {
     cd4:	1a ae       	std	Y+58, r1	; 0x3a
     cd6:	7e c0       	rjmp	.+252    	; 0xdd4 <main+0x28e>
				UART_sendByte(input_pass[j]);
     cd8:	8a ad       	ldd	r24, Y+58	; 0x3a
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	e9 5c       	subi	r30, 0xC9	; 201
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	80 81       	ld	r24, Z
     ce6:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a8 ec       	ldi	r26, 0xC8	; 200
     cf0:	b2 e4       	ldi	r27, 0x42	; 66
     cf2:	8d ab       	std	Y+53, r24	; 0x35
     cf4:	9e ab       	std	Y+54, r25	; 0x36
     cf6:	af ab       	std	Y+55, r26	; 0x37
     cf8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfa:	6d a9       	ldd	r22, Y+53	; 0x35
     cfc:	7e a9       	ldd	r23, Y+54	; 0x36
     cfe:	8f a9       	ldd	r24, Y+55	; 0x37
     d00:	98 ad       	ldd	r25, Y+56	; 0x38
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a e7       	ldi	r20, 0x7A	; 122
     d08:	53 e4       	ldi	r21, 0x43	; 67
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	89 ab       	std	Y+49, r24	; 0x31
     d14:	9a ab       	std	Y+50, r25	; 0x32
     d16:	ab ab       	std	Y+51, r26	; 0x33
     d18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d1a:	69 a9       	ldd	r22, Y+49	; 0x31
     d1c:	7a a9       	ldd	r23, Y+50	; 0x32
     d1e:	8b a9       	ldd	r24, Y+51	; 0x33
     d20:	9c a9       	ldd	r25, Y+52	; 0x34
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d2e:	88 23       	and	r24, r24
     d30:	2c f4       	brge	.+10     	; 0xd3c <main+0x1f6>
		__ticks = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	98 ab       	std	Y+48, r25	; 0x30
     d38:	8f a7       	std	Y+47, r24	; 0x2f
     d3a:	3f c0       	rjmp	.+126    	; 0xdba <main+0x274>
	else if (__tmp > 65535)
     d3c:	69 a9       	ldd	r22, Y+49	; 0x31
     d3e:	7a a9       	ldd	r23, Y+50	; 0x32
     d40:	8b a9       	ldd	r24, Y+51	; 0x33
     d42:	9c a9       	ldd	r25, Y+52	; 0x34
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d50:	18 16       	cp	r1, r24
     d52:	4c f5       	brge	.+82     	; 0xda6 <main+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	6d a9       	ldd	r22, Y+53	; 0x35
     d56:	7e a9       	ldd	r23, Y+54	; 0x36
     d58:	8f a9       	ldd	r24, Y+55	; 0x37
     d5a:	98 ad       	ldd	r25, Y+56	; 0x38
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e2       	ldi	r20, 0x20	; 32
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	98 ab       	std	Y+48, r25	; 0x30
     d7a:	8f a7       	std	Y+47, r24	; 0x2f
     d7c:	0f c0       	rjmp	.+30     	; 0xd9c <main+0x256>
     d7e:	89 e1       	ldi	r24, 0x19	; 25
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9e a7       	std	Y+46, r25	; 0x2e
     d84:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d86:	8d a5       	ldd	r24, Y+45	; 0x2d
     d88:	9e a5       	ldd	r25, Y+46	; 0x2e
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0x244>
     d8e:	9e a7       	std	Y+46, r25	; 0x2e
     d90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d92:	8f a5       	ldd	r24, Y+47	; 0x2f
     d94:	98 a9       	ldd	r25, Y+48	; 0x30
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	98 ab       	std	Y+48, r25	; 0x30
     d9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d9e:	98 a9       	ldd	r25, Y+48	; 0x30
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	69 f7       	brne	.-38     	; 0xd7e <main+0x238>
     da4:	14 c0       	rjmp	.+40     	; 0xdce <main+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da6:	69 a9       	ldd	r22, Y+49	; 0x31
     da8:	7a a9       	ldd	r23, Y+50	; 0x32
     daa:	8b a9       	ldd	r24, Y+51	; 0x33
     dac:	9c a9       	ldd	r25, Y+52	; 0x34
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	98 ab       	std	Y+48, r25	; 0x30
     db8:	8f a7       	std	Y+47, r24	; 0x2f
     dba:	8f a5       	ldd	r24, Y+47	; 0x2f
     dbc:	98 a9       	ldd	r25, Y+48	; 0x30
     dbe:	9c a7       	std	Y+44, r25	; 0x2c
     dc0:	8b a7       	std	Y+43, r24	; 0x2b
     dc2:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc4:	9c a5       	ldd	r25, Y+44	; 0x2c
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0x280>
     dca:	9c a7       	std	Y+44, r25	; 0x2c
     dcc:	8b a7       	std	Y+43, r24	; 0x2b
			 * to check the password match then depending on the recieved value from the other MC by the UART
			 * if the two passwords match then call the open door function
			 * if the two passwords don't match then display a "wrong password" on lcd and diplay the main options again  */
			getPass(input_pass);
			UART_sendByte(READY_TO_SEND);
			for (j = 0; j < PASS_SIZE; j++) {
     dce:	8a ad       	ldd	r24, Y+58	; 0x3a
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	8a af       	std	Y+58, r24	; 0x3a
     dd4:	8a ad       	ldd	r24, Y+58	; 0x3a
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	08 f4       	brcc	.+2      	; 0xddc <main+0x296>
     dda:	7e cf       	rjmp	.-260    	; 0xcd8 <main+0x192>
				UART_sendByte(input_pass[j]);
				_delay_ms(100);
			}
			UART_sendByte('+'); /* to inform the other MC of the chosen option */
     ddc:	8b e2       	ldi	r24, 0x2B	; 43
     dde:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
			recived_info = UART_recieveByte(); /* get the value from the other MC after comparing the two passwords */
     de2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
     de6:	89 af       	std	Y+57, r24	; 0x39
			if (recived_info == DOOR_UNLOCK) {
     de8:	89 ad       	ldd	r24, Y+57	; 0x39
     dea:	85 32       	cpi	r24, 0x25	; 37
     dec:	19 f4       	brne	.+6      	; 0xdf4 <main+0x2ae>
				openDoorOperation();
     dee:	0e 94 38 0b 	call	0x1670	; 0x1670 <openDoorOperation>
     df2:	8e c0       	rjmp	.+284    	; 0xf10 <main+0x3ca>
			}
			else if (recived_info == WRONG_PASS) {
     df4:	89 ad       	ldd	r24, Y+57	; 0x39
     df6:	80 33       	cpi	r24, 0x30	; 48
     df8:	09 f0       	breq	.+2      	; 0xdfc <main+0x2b6>
     dfa:	79 c0       	rjmp	.+242    	; 0xeee <main+0x3a8>
				LCD_clearScreen();
     dfc:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
				LCD_displayString("Pass is Wrong !");
     e00:	8b e6       	ldi	r24, 0x6B	; 107
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	aa ef       	ldi	r26, 0xFA	; 250
     e0e:	b3 e4       	ldi	r27, 0x43	; 67
     e10:	8f a3       	std	Y+39, r24	; 0x27
     e12:	98 a7       	std	Y+40, r25	; 0x28
     e14:	a9 a7       	std	Y+41, r26	; 0x29
     e16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e18:	6f a1       	ldd	r22, Y+39	; 0x27
     e1a:	78 a5       	ldd	r23, Y+40	; 0x28
     e1c:	89 a5       	ldd	r24, Y+41	; 0x29
     e1e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	4a e7       	ldi	r20, 0x7A	; 122
     e26:	53 e4       	ldi	r21, 0x43	; 67
     e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	8b a3       	std	Y+35, r24	; 0x23
     e32:	9c a3       	std	Y+36, r25	; 0x24
     e34:	ad a3       	std	Y+37, r26	; 0x25
     e36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e38:	6b a1       	ldd	r22, Y+35	; 0x23
     e3a:	7c a1       	ldd	r23, Y+36	; 0x24
     e3c:	8d a1       	ldd	r24, Y+37	; 0x25
     e3e:	9e a1       	ldd	r25, Y+38	; 0x26
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e8       	ldi	r20, 0x80	; 128
     e46:	5f e3       	ldi	r21, 0x3F	; 63
     e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	2c f4       	brge	.+10     	; 0xe5a <main+0x314>
		__ticks = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9a a3       	std	Y+34, r25	; 0x22
     e56:	89 a3       	std	Y+33, r24	; 0x21
     e58:	3f c0       	rjmp	.+126    	; 0xed8 <main+0x392>
	else if (__tmp > 65535)
     e5a:	6b a1       	ldd	r22, Y+35	; 0x23
     e5c:	7c a1       	ldd	r23, Y+36	; 0x24
     e5e:	8d a1       	ldd	r24, Y+37	; 0x25
     e60:	9e a1       	ldd	r25, Y+38	; 0x26
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	4c f5       	brge	.+82     	; 0xec4 <main+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	6f a1       	ldd	r22, Y+39	; 0x27
     e74:	78 a5       	ldd	r23, Y+40	; 0x28
     e76:	89 a5       	ldd	r24, Y+41	; 0x29
     e78:	9a a5       	ldd	r25, Y+42	; 0x2a
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e2       	ldi	r20, 0x20	; 32
     e80:	51 e4       	ldi	r21, 0x41	; 65
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9a a3       	std	Y+34, r25	; 0x22
     e98:	89 a3       	std	Y+33, r24	; 0x21
     e9a:	0f c0       	rjmp	.+30     	; 0xeba <main+0x374>
     e9c:	89 e1       	ldi	r24, 0x19	; 25
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	98 a3       	std	Y+32, r25	; 0x20
     ea2:	8f 8f       	std	Y+31, r24	; 0x1f
     ea4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea6:	98 a1       	ldd	r25, Y+32	; 0x20
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <main+0x362>
     eac:	98 a3       	std	Y+32, r25	; 0x20
     eae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb0:	89 a1       	ldd	r24, Y+33	; 0x21
     eb2:	9a a1       	ldd	r25, Y+34	; 0x22
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	9a a3       	std	Y+34, r25	; 0x22
     eb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eba:	89 a1       	ldd	r24, Y+33	; 0x21
     ebc:	9a a1       	ldd	r25, Y+34	; 0x22
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	69 f7       	brne	.-38     	; 0xe9c <main+0x356>
     ec2:	26 c0       	rjmp	.+76     	; 0xf10 <main+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec4:	6b a1       	ldd	r22, Y+35	; 0x23
     ec6:	7c a1       	ldd	r23, Y+36	; 0x24
     ec8:	8d a1       	ldd	r24, Y+37	; 0x25
     eca:	9e a1       	ldd	r25, Y+38	; 0x26
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9a a3       	std	Y+34, r25	; 0x22
     ed6:	89 a3       	std	Y+33, r24	; 0x21
     ed8:	89 a1       	ldd	r24, Y+33	; 0x21
     eda:	9a a1       	ldd	r25, Y+34	; 0x22
     edc:	9e 8f       	std	Y+30, r25	; 0x1e
     ede:	8d 8f       	std	Y+29, r24	; 0x1d
     ee0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <main+0x39e>
     ee8:	9e 8f       	std	Y+30, r25	; 0x1e
     eea:	8d 8f       	std	Y+29, r24	; 0x1d
     eec:	11 c0       	rjmp	.+34     	; 0xf10 <main+0x3ca>
				_delay_ms(500);
			}
			else if (recived_info == ALERT) {
     eee:	89 ad       	ldd	r24, Y+57	; 0x39
     ef0:	83 31       	cpi	r24, 0x13	; 19
     ef2:	71 f4       	brne	.+28     	; 0xf10 <main+0x3ca>
				LCD_clearScreen();
     ef4:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
				LCD_displayString("ALERT");
     ef8:	8b e7       	ldi	r24, 0x7B	; 123
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
				g_seconds = 0;
     f00:	10 92 30 01 	sts	0x0130, r1
				while (g_seconds < ALERT_TIME) {}
     f04:	80 91 30 01 	lds	r24, 0x0130
     f08:	8c 33       	cpi	r24, 0x3C	; 60
     f0a:	e0 f3       	brcs	.-8      	; 0xf04 <main+0x3be>
				g_seconds = 0;
     f0c:	10 92 30 01 	sts	0x0130, r1
			}
			mainOptions();
     f10:	0e 94 a9 08 	call	0x1152	; 0x1152 <mainOptions>
     f14:	b8 ce       	rjmp	.-656    	; 0xc86 <main+0x140>
			break;
		case '-':
			LCD_clearScreen();
     f16:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
			LCD_displayString("Plz Enter old pass :");
     f1a:	81 e8       	ldi	r24, 0x81	; 129
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
			getPass(input_pass);
     f22:	87 e3       	ldi	r24, 0x37	; 55
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	0e 94 8b 0a 	call	0x1516	; 0x1516 <getPass>
			UART_sendByte(READY_TO_SEND);
     f2a:	80 e1       	ldi	r24, 0x10	; 16
     f2c:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
			for (j = 0; j < PASS_SIZE; j++) {
     f30:	1a ae       	std	Y+58, r1	; 0x3a
     f32:	7e c0       	rjmp	.+252    	; 0x1030 <main+0x4ea>
				UART_sendByte(input_pass[j]);
     f34:	8a ad       	ldd	r24, Y+58	; 0x3a
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	fc 01       	movw	r30, r24
     f3c:	e9 5c       	subi	r30, 0xC9	; 201
     f3e:	fe 4f       	sbci	r31, 0xFE	; 254
     f40:	80 81       	ld	r24, Z
     f42:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	a8 ec       	ldi	r26, 0xC8	; 200
     f4c:	b2 e4       	ldi	r27, 0x42	; 66
     f4e:	89 8f       	std	Y+25, r24	; 0x19
     f50:	9a 8f       	std	Y+26, r25	; 0x1a
     f52:	ab 8f       	std	Y+27, r26	; 0x1b
     f54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f56:	69 8d       	ldd	r22, Y+25	; 0x19
     f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4a e7       	ldi	r20, 0x7A	; 122
     f64:	53 e4       	ldi	r21, 0x43	; 67
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	8d 8b       	std	Y+21, r24	; 0x15
     f70:	9e 8b       	std	Y+22, r25	; 0x16
     f72:	af 8b       	std	Y+23, r26	; 0x17
     f74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f76:	6d 89       	ldd	r22, Y+21	; 0x15
     f78:	7e 89       	ldd	r23, Y+22	; 0x16
     f7a:	8f 89       	ldd	r24, Y+23	; 0x17
     f7c:	98 8d       	ldd	r25, Y+24	; 0x18
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f8a:	88 23       	and	r24, r24
     f8c:	2c f4       	brge	.+10     	; 0xf98 <main+0x452>
		__ticks = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9c 8b       	std	Y+20, r25	; 0x14
     f94:	8b 8b       	std	Y+19, r24	; 0x13
     f96:	3f c0       	rjmp	.+126    	; 0x1016 <main+0x4d0>
	else if (__tmp > 65535)
     f98:	6d 89       	ldd	r22, Y+21	; 0x15
     f9a:	7e 89       	ldd	r23, Y+22	; 0x16
     f9c:	8f 89       	ldd	r24, Y+23	; 0x17
     f9e:	98 8d       	ldd	r25, Y+24	; 0x18
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fac:	18 16       	cp	r1, r24
     fae:	4c f5       	brge	.+82     	; 0x1002 <main+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb0:	69 8d       	ldd	r22, Y+25	; 0x19
     fb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	0f c0       	rjmp	.+30     	; 0xff8 <main+0x4b2>
     fda:	89 e1       	ldi	r24, 0x19	; 25
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9a 8b       	std	Y+18, r25	; 0x12
     fe0:	89 8b       	std	Y+17, r24	; 0x11
     fe2:	89 89       	ldd	r24, Y+17	; 0x11
     fe4:	9a 89       	ldd	r25, Y+18	; 0x12
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <main+0x4a0>
     fea:	9a 8b       	std	Y+18, r25	; 0x12
     fec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fee:	8b 89       	ldd	r24, Y+19	; 0x13
     ff0:	9c 89       	ldd	r25, Y+20	; 0x14
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	9c 8b       	std	Y+20, r25	; 0x14
     ff6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff8:	8b 89       	ldd	r24, Y+19	; 0x13
     ffa:	9c 89       	ldd	r25, Y+20	; 0x14
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	69 f7       	brne	.-38     	; 0xfda <main+0x494>
    1000:	14 c0       	rjmp	.+40     	; 0x102a <main+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1002:	6d 89       	ldd	r22, Y+21	; 0x15
    1004:	7e 89       	ldd	r23, Y+22	; 0x16
    1006:	8f 89       	ldd	r24, Y+23	; 0x17
    1008:	98 8d       	ldd	r25, Y+24	; 0x18
    100a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	9c 8b       	std	Y+20, r25	; 0x14
    1014:	8b 8b       	std	Y+19, r24	; 0x13
    1016:	8b 89       	ldd	r24, Y+19	; 0x13
    1018:	9c 89       	ldd	r25, Y+20	; 0x14
    101a:	98 8b       	std	Y+16, r25	; 0x10
    101c:	8f 87       	std	Y+15, r24	; 0x0f
    101e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1020:	98 89       	ldd	r25, Y+16	; 0x10
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <main+0x4dc>
    1026:	98 8b       	std	Y+16, r25	; 0x10
    1028:	8f 87       	std	Y+15, r24	; 0x0f
		case '-':
			LCD_clearScreen();
			LCD_displayString("Plz Enter old pass :");
			getPass(input_pass);
			UART_sendByte(READY_TO_SEND);
			for (j = 0; j < PASS_SIZE; j++) {
    102a:	8a ad       	ldd	r24, Y+58	; 0x3a
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	8a af       	std	Y+58, r24	; 0x3a
    1030:	8a ad       	ldd	r24, Y+58	; 0x3a
    1032:	85 30       	cpi	r24, 0x05	; 5
    1034:	08 f4       	brcc	.+2      	; 0x1038 <main+0x4f2>
    1036:	7e cf       	rjmp	.-260    	; 0xf34 <main+0x3ee>
				UART_sendByte(input_pass[j]);
				_delay_ms(100);
			}
			UART_sendByte('-'); /* to inform the other MC of the chosen option */
    1038:	8d e2       	ldi	r24, 0x2D	; 45
    103a:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
			recived_info = UART_recieveByte(); /* get the value from the other MC after comparing the two passwords */
    103e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
    1042:	89 af       	std	Y+57, r24	; 0x39
			if (recived_info == CHANGE_PASS) {
    1044:	89 ad       	ldd	r24, Y+57	; 0x39
    1046:	81 33       	cpi	r24, 0x31	; 49
    1048:	29 f4       	brne	.+10     	; 0x1054 <main+0x50e>
				setPassFirstTime(); /* set the new password */
    104a:	0e 94 c0 08 	call	0x1180	; 0x1180 <setPassFirstTime>
				LCD_clearScreen();
    104e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
    1052:	7c c0       	rjmp	.+248    	; 0x114c <main+0x606>
			}
			else if (recived_info == WRONG_PASS) {
    1054:	89 ad       	ldd	r24, Y+57	; 0x39
    1056:	80 33       	cpi	r24, 0x30	; 48
    1058:	09 f0       	breq	.+2      	; 0x105c <main+0x516>
    105a:	78 c0       	rjmp	.+240    	; 0x114c <main+0x606>
				LCD_clearScreen();
    105c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
				LCD_displayString("Pass is Wrong !");
    1060:	8b e6       	ldi	r24, 0x6B	; 107
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	aa ef       	ldi	r26, 0xFA	; 250
    106e:	b3 e4       	ldi	r27, 0x43	; 67
    1070:	8b 87       	std	Y+11, r24	; 0x0b
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	ad 87       	std	Y+13, r26	; 0x0d
    1076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a e7       	ldi	r20, 0x7A	; 122
    1086:	53 e4       	ldi	r21, 0x43	; 67
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8f 83       	std	Y+7, r24	; 0x07
    1092:	98 87       	std	Y+8, r25	; 0x08
    1094:	a9 87       	std	Y+9, r26	; 0x09
    1096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <main+0x574>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <main+0x5f2>
	else if (__tmp > 65535)
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <main+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <main+0x5d4>
    10fc:	89 e1       	ldi	r24, 0x19	; 25
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <main+0x5c2>
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <main+0x5b6>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <main+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <main+0x5fe>
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
			}
			mainOptions();
    114c:	0e 94 a9 08 	call	0x1152	; 0x1152 <mainOptions>
    1150:	9a cd       	rjmp	.-1228   	; 0xc86 <main+0x140>

00001152 <mainOptions>:
}

/*
 * function to display the main system options for the user to choose
 * */
void mainOptions(void) {
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    115a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door ");
    115e:	26 e9       	ldi	r18, 0x96	; 150
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass ");
    116c:	25 ea       	ldi	r18, 0xA5	; 165
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_displayStringRowColumn>
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <setPassFirstTime>:

/*
 * function to set the password for the first time
 * */
void setPassFirstTime(void) {
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	ab 97       	sbiw	r28, 0x2b	; 43
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
	uint8 j = 0;
    1194:	1b a6       	std	Y+43, r1	; 0x2b
    1196:	af c1       	rjmp	.+862    	; 0x14f6 <setPassFirstTime+0x376>
	while (pass_cmp_result == PASSWORDS_ARE_DIFF) {
		LCD_clearScreen();
    1198:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass :");
    119c:	86 eb       	ldi	r24, 0xB6	; 182
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
		getPass(input_pass);
    11a4:	87 e3       	ldi	r24, 0x37	; 55
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <getPass>
		UART_sendByte(READY_TO_SEND);
    11ac:	80 e1       	ldi	r24, 0x10	; 16
    11ae:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
		while (UART_recieveByte() != READY_TO_RECIEVE) {}
    11b2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
    11b6:	81 31       	cpi	r24, 0x11	; 17
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <setPassFirstTime+0x32>
		for (j = 0; j < PASS_SIZE; j++) {
    11ba:	1b a6       	std	Y+43, r1	; 0x2b
    11bc:	7e c0       	rjmp	.+252    	; 0x12ba <setPassFirstTime+0x13a>
			UART_sendByte(input_pass[j]);
    11be:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	fc 01       	movw	r30, r24
    11c6:	e9 5c       	subi	r30, 0xC9	; 201
    11c8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ca:	80 81       	ld	r24, Z
    11cc:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a8 ec       	ldi	r26, 0xC8	; 200
    11d6:	b2 e4       	ldi	r27, 0x42	; 66
    11d8:	8f a3       	std	Y+39, r24	; 0x27
    11da:	98 a7       	std	Y+40, r25	; 0x28
    11dc:	a9 a7       	std	Y+41, r26	; 0x29
    11de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e0:	6f a1       	ldd	r22, Y+39	; 0x27
    11e2:	78 a5       	ldd	r23, Y+40	; 0x28
    11e4:	89 a5       	ldd	r24, Y+41	; 0x29
    11e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	53 e4       	ldi	r21, 0x43	; 67
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	8b a3       	std	Y+35, r24	; 0x23
    11fa:	9c a3       	std	Y+36, r25	; 0x24
    11fc:	ad a3       	std	Y+37, r26	; 0x25
    11fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1200:	6b a1       	ldd	r22, Y+35	; 0x23
    1202:	7c a1       	ldd	r23, Y+36	; 0x24
    1204:	8d a1       	ldd	r24, Y+37	; 0x25
    1206:	9e a1       	ldd	r25, Y+38	; 0x26
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <setPassFirstTime+0xa2>
		__ticks = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9a a3       	std	Y+34, r25	; 0x22
    121e:	89 a3       	std	Y+33, r24	; 0x21
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <setPassFirstTime+0x120>
	else if (__tmp > 65535)
    1222:	6b a1       	ldd	r22, Y+35	; 0x23
    1224:	7c a1       	ldd	r23, Y+36	; 0x24
    1226:	8d a1       	ldd	r24, Y+37	; 0x25
    1228:	9e a1       	ldd	r25, Y+38	; 0x26
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e7       	ldi	r20, 0x7F	; 127
    1230:	57 e4       	ldi	r21, 0x47	; 71
    1232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	4c f5       	brge	.+82     	; 0x128c <setPassFirstTime+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123a:	6f a1       	ldd	r22, Y+39	; 0x27
    123c:	78 a5       	ldd	r23, Y+40	; 0x28
    123e:	89 a5       	ldd	r24, Y+41	; 0x29
    1240:	9a a5       	ldd	r25, Y+42	; 0x2a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9a a3       	std	Y+34, r25	; 0x22
    1260:	89 a3       	std	Y+33, r24	; 0x21
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <setPassFirstTime+0x102>
    1264:	89 e1       	ldi	r24, 0x19	; 25
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	98 a3       	std	Y+32, r25	; 0x20
    126a:	8f 8f       	std	Y+31, r24	; 0x1f
    126c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    126e:	98 a1       	ldd	r25, Y+32	; 0x20
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <setPassFirstTime+0xf0>
    1274:	98 a3       	std	Y+32, r25	; 0x20
    1276:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	89 a1       	ldd	r24, Y+33	; 0x21
    127a:	9a a1       	ldd	r25, Y+34	; 0x22
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	9a a3       	std	Y+34, r25	; 0x22
    1280:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1282:	89 a1       	ldd	r24, Y+33	; 0x21
    1284:	9a a1       	ldd	r25, Y+34	; 0x22
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	69 f7       	brne	.-38     	; 0x1264 <setPassFirstTime+0xe4>
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <setPassFirstTime+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128c:	6b a1       	ldd	r22, Y+35	; 0x23
    128e:	7c a1       	ldd	r23, Y+36	; 0x24
    1290:	8d a1       	ldd	r24, Y+37	; 0x25
    1292:	9e a1       	ldd	r25, Y+38	; 0x26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9a a3       	std	Y+34, r25	; 0x22
    129e:	89 a3       	std	Y+33, r24	; 0x21
    12a0:	89 a1       	ldd	r24, Y+33	; 0x21
    12a2:	9a a1       	ldd	r25, Y+34	; 0x22
    12a4:	9e 8f       	std	Y+30, r25	; 0x1e
    12a6:	8d 8f       	std	Y+29, r24	; 0x1d
    12a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <setPassFirstTime+0x12c>
    12b0:	9e 8f       	std	Y+30, r25	; 0x1e
    12b2:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_clearScreen();
		LCD_displayString("Plz Enter Pass :");
		getPass(input_pass);
		UART_sendByte(READY_TO_SEND);
		while (UART_recieveByte() != READY_TO_RECIEVE) {}
		for (j = 0; j < PASS_SIZE; j++) {
    12b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	8b a7       	std	Y+43, r24	; 0x2b
    12ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    12bc:	85 30       	cpi	r24, 0x05	; 5
    12be:	08 f4       	brcc	.+2      	; 0x12c2 <setPassFirstTime+0x142>
    12c0:	7e cf       	rjmp	.-260    	; 0x11be <setPassFirstTime+0x3e>
			UART_sendByte(input_pass[j]);
			_delay_ms(100);
		}

		LCD_clearScreen();
    12c2:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
		LCD_displayString("RE-Enter pass :");
    12c6:	87 ec       	ldi	r24, 0xC7	; 199
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
		getPass(input_pass);
    12ce:	87 e3       	ldi	r24, 0x37	; 55
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <getPass>
		UART_sendByte(READY_TO_SEND);
    12d6:	80 e1       	ldi	r24, 0x10	; 16
    12d8:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
		while (UART_recieveByte() != READY_TO_RECIEVE) {}
    12dc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
    12e0:	81 31       	cpi	r24, 0x11	; 17
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <setPassFirstTime+0x15c>
		for (j = 0; j < PASS_SIZE; j++) {
    12e4:	1b a6       	std	Y+43, r1	; 0x2b
    12e6:	7e c0       	rjmp	.+252    	; 0x13e4 <setPassFirstTime+0x264>
			UART_sendByte(input_pass[j]);
    12e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	fc 01       	movw	r30, r24
    12f0:	e9 5c       	subi	r30, 0xC9	; 201
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	80 81       	ld	r24, Z
    12f6:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a8 ec       	ldi	r26, 0xC8	; 200
    1300:	b2 e4       	ldi	r27, 0x42	; 66
    1302:	89 8f       	std	Y+25, r24	; 0x19
    1304:	9a 8f       	std	Y+26, r25	; 0x1a
    1306:	ab 8f       	std	Y+27, r26	; 0x1b
    1308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130a:	69 8d       	ldd	r22, Y+25	; 0x19
    130c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	4a e7       	ldi	r20, 0x7A	; 122
    1318:	53 e4       	ldi	r21, 0x43	; 67
    131a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	8d 8b       	std	Y+21, r24	; 0x15
    1324:	9e 8b       	std	Y+22, r25	; 0x16
    1326:	af 8b       	std	Y+23, r26	; 0x17
    1328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    132a:	6d 89       	ldd	r22, Y+21	; 0x15
    132c:	7e 89       	ldd	r23, Y+22	; 0x16
    132e:	8f 89       	ldd	r24, Y+23	; 0x17
    1330:	98 8d       	ldd	r25, Y+24	; 0x18
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e8       	ldi	r20, 0x80	; 128
    1338:	5f e3       	ldi	r21, 0x3F	; 63
    133a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133e:	88 23       	and	r24, r24
    1340:	2c f4       	brge	.+10     	; 0x134c <setPassFirstTime+0x1cc>
		__ticks = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	8b 8b       	std	Y+19, r24	; 0x13
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <setPassFirstTime+0x24a>
	else if (__tmp > 65535)
    134c:	6d 89       	ldd	r22, Y+21	; 0x15
    134e:	7e 89       	ldd	r23, Y+22	; 0x16
    1350:	8f 89       	ldd	r24, Y+23	; 0x17
    1352:	98 8d       	ldd	r25, Y+24	; 0x18
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	57 e4       	ldi	r21, 0x47	; 71
    135c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1360:	18 16       	cp	r1, r24
    1362:	4c f5       	brge	.+82     	; 0x13b6 <setPassFirstTime+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1364:	69 8d       	ldd	r22, Y+25	; 0x19
    1366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e2       	ldi	r20, 0x20	; 32
    1372:	51 e4       	ldi	r21, 0x41	; 65
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <setPassFirstTime+0x22c>
    138e:	89 e1       	ldi	r24, 0x19	; 25
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9a 8b       	std	Y+18, r25	; 0x12
    1394:	89 8b       	std	Y+17, r24	; 0x11
    1396:	89 89       	ldd	r24, Y+17	; 0x11
    1398:	9a 89       	ldd	r25, Y+18	; 0x12
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <setPassFirstTime+0x21a>
    139e:	9a 8b       	std	Y+18, r25	; 0x12
    13a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9c 8b       	std	Y+20, r25	; 0x14
    13aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	9c 89       	ldd	r25, Y+20	; 0x14
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	69 f7       	brne	.-38     	; 0x138e <setPassFirstTime+0x20e>
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <setPassFirstTime+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b6:	6d 89       	ldd	r22, Y+21	; 0x15
    13b8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ba:	8f 89       	ldd	r24, Y+23	; 0x17
    13bc:	98 8d       	ldd	r25, Y+24	; 0x18
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	8b 89       	ldd	r24, Y+19	; 0x13
    13cc:	9c 89       	ldd	r25, Y+20	; 0x14
    13ce:	98 8b       	std	Y+16, r25	; 0x10
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
    13d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d4:	98 89       	ldd	r25, Y+16	; 0x10
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <setPassFirstTime+0x256>
    13da:	98 8b       	std	Y+16, r25	; 0x10
    13dc:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
		LCD_displayString("RE-Enter pass :");
		getPass(input_pass);
		UART_sendByte(READY_TO_SEND);
		while (UART_recieveByte() != READY_TO_RECIEVE) {}
		for (j = 0; j < PASS_SIZE; j++) {
    13de:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	8b a7       	std	Y+43, r24	; 0x2b
    13e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e6:	85 30       	cpi	r24, 0x05	; 5
    13e8:	08 f4       	brcc	.+2      	; 0x13ec <setPassFirstTime+0x26c>
    13ea:	7e cf       	rjmp	.-260    	; 0x12e8 <setPassFirstTime+0x168>
			UART_sendByte(input_pass[j]);
			_delay_ms(100);
		}

		while (UART_recieveByte() != READY_TO_SEND) {}
    13ec:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
    13f0:	80 31       	cpi	r24, 0x10	; 16
    13f2:	e1 f7       	brne	.-8      	; 0x13ec <setPassFirstTime+0x26c>
		pass_cmp_result = UART_recieveByte();
    13f4:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
    13f8:	80 93 2e 01 	sts	0x012E, r24

		if (pass_cmp_result == PASSWORDS_ARE_DIFF) {
    13fc:	80 91 2e 01 	lds	r24, 0x012E
    1400:	88 23       	and	r24, r24
    1402:	09 f0       	breq	.+2      	; 0x1406 <setPassFirstTime+0x286>
    1404:	78 c0       	rjmp	.+240    	; 0x14f6 <setPassFirstTime+0x376>
			LCD_clearScreen();
    1406:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
			LCD_displayString("passwords are diff ");
    140a:	87 ed       	ldi	r24, 0xD7	; 215
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	aa ef       	ldi	r26, 0xFA	; 250
    1418:	b3 e4       	ldi	r27, 0x43	; 67
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	53 e4       	ldi	r21, 0x43	; 67
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <setPassFirstTime+0x2e4>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <setPassFirstTime+0x362>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <setPassFirstTime+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <setPassFirstTime+0x344>
    14a6:	89 e1       	ldi	r24, 0x19	; 25
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <setPassFirstTime+0x332>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <setPassFirstTime+0x326>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <setPassFirstTime+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <setPassFirstTime+0x36e>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
/*
 * function to set the password for the first time
 * */
void setPassFirstTime(void) {
	uint8 j = 0;
	while (pass_cmp_result == PASSWORDS_ARE_DIFF) {
    14f6:	80 91 2e 01 	lds	r24, 0x012E
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <setPassFirstTime+0x380>
    14fe:	4c ce       	rjmp	.-872    	; 0x1198 <setPassFirstTime+0x18>
			LCD_clearScreen();
			LCD_displayString("passwords are diff ");
			_delay_ms(500);
		}
	}
	pass_cmp_result = PASSWORDS_ARE_DIFF; /* to use this function again when chose change password operation*/
    1500:	10 92 2e 01 	sts	0x012E, r1
}
    1504:	ab 96       	adiw	r28, 0x2b	; 43
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <getPass>:

/*
 * function to get the password entered by the user using keypad and store it in an array
 * */
void getPass(uint8 *pass) {
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	62 97       	sbiw	r28, 0x12	; 18
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	9a 8b       	std	Y+18, r25	; 0x12
    152c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 key = 0, i = 0;
    152e:	18 8a       	std	Y+16, r1	; 0x10
    1530:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_moveCursor(1, 0);
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <LCD_moveCursor>
    153a:	88 c0       	rjmp	.+272    	; 0x164c <getPass+0x136>
	while (i != 5) {
		key = KEYPAD_getPressedKey();
    153c:	0e 94 88 11 	call	0x2310	; 0x2310 <KEYPAD_getPressedKey>
    1540:	88 8b       	std	Y+16, r24	; 0x10

		if ((key >= 0) && (key <= 9)) {
    1542:	88 89       	ldd	r24, Y+16	; 0x10
    1544:	8a 30       	cpi	r24, 0x0A	; 10
    1546:	80 f4       	brcc	.+32     	; 0x1568 <getPass+0x52>
			*(pass + i) = key;
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	89 89       	ldd	r24, Y+17	; 0x11
    1550:	9a 89       	ldd	r25, Y+18	; 0x12
    1552:	fc 01       	movw	r30, r24
    1554:	e2 0f       	add	r30, r18
    1556:	f3 1f       	adc	r31, r19
    1558:	88 89       	ldd	r24, Y+16	; 0x10
    155a:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    155c:	8a e2       	ldi	r24, 0x2A	; 42
    155e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <LCD_displayCharacter>
			i++;
    1562:	8f 85       	ldd	r24, Y+15	; 0x0f
    1564:	8f 5f       	subi	r24, 0xFF	; 255
    1566:	8f 87       	std	Y+15, r24	; 0x0f
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	aa ef       	ldi	r26, 0xFA	; 250
    156e:	b3 e4       	ldi	r27, 0x43	; 67
    1570:	8b 87       	std	Y+11, r24	; 0x0b
    1572:	9c 87       	std	Y+12, r25	; 0x0c
    1574:	ad 87       	std	Y+13, r26	; 0x0d
    1576:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1578:	6b 85       	ldd	r22, Y+11	; 0x0b
    157a:	7c 85       	ldd	r23, Y+12	; 0x0c
    157c:	8d 85       	ldd	r24, Y+13	; 0x0d
    157e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	4a e7       	ldi	r20, 0x7A	; 122
    1586:	53 e4       	ldi	r21, 0x43	; 67
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	8f 83       	std	Y+7, r24	; 0x07
    1592:	98 87       	std	Y+8, r25	; 0x08
    1594:	a9 87       	std	Y+9, r26	; 0x09
    1596:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1598:	6f 81       	ldd	r22, Y+7	; 0x07
    159a:	78 85       	ldd	r23, Y+8	; 0x08
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	2c f4       	brge	.+10     	; 0x15ba <getPass+0xa4>
		__ticks = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	3f c0       	rjmp	.+126    	; 0x1638 <getPass+0x122>
	else if (__tmp > 65535)
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	3f ef       	ldi	r19, 0xFF	; 255
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	57 e4       	ldi	r21, 0x47	; 71
    15ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	4c f5       	brge	.+82     	; 0x1624 <getPass+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e2       	ldi	r20, 0x20	; 32
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <getPass+0x104>
    15fc:	89 e1       	ldi	r24, 0x19	; 25
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9c 83       	std	Y+4, r25	; 0x04
    1602:	8b 83       	std	Y+3, r24	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <getPass+0xf2>
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	69 f7       	brne	.-38     	; 0x15fc <getPass+0xe6>
    1622:	14 c0       	rjmp	.+40     	; 0x164c <getPass+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1624:	6f 81       	ldd	r22, Y+7	; 0x07
    1626:	78 85       	ldd	r23, Y+8	; 0x08
    1628:	89 85       	ldd	r24, Y+9	; 0x09
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <getPass+0x12e>
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01
 * function to get the password entered by the user using keypad and store it in an array
 * */
void getPass(uint8 *pass) {
	uint8 key = 0, i = 0;
	LCD_moveCursor(1, 0);
	while (i != 5) {
    164c:	8f 85       	ldd	r24, Y+15	; 0x0f
    164e:	85 30       	cpi	r24, 0x05	; 5
    1650:	09 f0       	breq	.+2      	; 0x1654 <getPass+0x13e>
    1652:	74 cf       	rjmp	.-280    	; 0x153c <getPass+0x26>
			LCD_displayCharacter('*');
			i++;
		}
		_delay_ms(500);
	}
	key = 0;
    1654:	18 8a       	std	Y+16, r1	; 0x10
	while (KEYPAD_getPressedKey() != ENTER_BUTTON) {}
    1656:	0e 94 88 11 	call	0x2310	; 0x2310 <KEYPAD_getPressedKey>
    165a:	8d 30       	cpi	r24, 0x0D	; 13
    165c:	e1 f7       	brne	.-8      	; 0x1656 <getPass+0x140>

}
    165e:	62 96       	adiw	r28, 0x12	; 18
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <openDoorOperation>:

/*
 * function that handles the opening door operation
 * */
void openDoorOperation(void) {
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    1678:	10 92 30 01 	sts	0x0130, r1
	LCD_clearScreen();
    167c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
	LCD_displayString("unlocking door");
    1680:	8b ee       	ldi	r24, 0xEB	; 235
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
	while (g_seconds < OPEN_TIME) {}
    1688:	80 91 30 01 	lds	r24, 0x0130
    168c:	8f 30       	cpi	r24, 0x0F	; 15
    168e:	e0 f3       	brcs	.-8      	; 0x1688 <openDoorOperation+0x18>
	g_seconds = 0;
    1690:	10 92 30 01 	sts	0x0130, r1
	LCD_clearScreen();
    1694:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
	LCD_displayString("door is open ");
    1698:	8a ef       	ldi	r24, 0xFA	; 250
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
	while (g_seconds < HOLD_TIME) {}
    16a0:	80 91 30 01 	lds	r24, 0x0130
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	e0 f3       	brcs	.-8      	; 0x16a0 <openDoorOperation+0x30>
	g_seconds = 0;
    16a8:	10 92 30 01 	sts	0x0130, r1
	LCD_clearScreen();
    16ac:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_clearScreen>
	LCD_displayString("locking door ");
    16b0:	88 e0       	ldi	r24, 0x08	; 8
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
	while (g_seconds < CLOSE_TIME) {}
    16b8:	80 91 30 01 	lds	r24, 0x0130
    16bc:	8f 30       	cpi	r24, 0x0F	; 15
    16be:	e0 f3       	brcs	.-8      	; 0x16b8 <openDoorOperation+0x48>
}
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <timer1HandlerCallBack>:

/*
 * the call back function of timer1
 * */
void timer1HandlerCallBack(void) {
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    16ce:	80 91 30 01 	lds	r24, 0x0130
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 30 01 	sts	0x0130, r24
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <__vector_11>:

/*******************************************************************************
 *                      Functions ISR                                           *
 *******************************************************************************/

ISR( TIMER0_OVF_vect) {
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR) {
    1708:	80 91 31 01 	lds	r24, 0x0131
    170c:	90 91 32 01 	lds	r25, 0x0132
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	29 f0       	breq	.+10     	; 0x171e <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer0 overflow mode */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr0(); */
    1714:	e0 91 31 01 	lds	r30, 0x0131
    1718:	f0 91 32 01 	lds	r31, 0x0132
    171c:	09 95       	icall
	}
}
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 90       	pop	r0
    1740:	1f 90       	pop	r1
    1742:	18 95       	reti

00001744 <__vector_10>:

ISR( TIMER0_COMP_vect) {
    1744:	1f 92       	push	r1
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	2f 93       	push	r18
    1750:	3f 93       	push	r19
    1752:	4f 93       	push	r20
    1754:	5f 93       	push	r21
    1756:	6f 93       	push	r22
    1758:	7f 93       	push	r23
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	af 93       	push	r26
    1760:	bf 93       	push	r27
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR) {
    176e:	80 91 31 01 	lds	r24, 0x0131
    1772:	90 91 32 01 	lds	r25, 0x0132
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	29 f0       	breq	.+10     	; 0x1784 <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer0 compare mode*/
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr0(); */
    177a:	e0 91 31 01 	lds	r30, 0x0131
    177e:	f0 91 32 01 	lds	r31, 0x0132
    1782:	09 95       	icall
	}
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	0f 90       	pop	r0
    17a6:	1f 90       	pop	r1
    17a8:	18 95       	reti

000017aa <__vector_9>:

ISR( TIMER1_OVF_vect) {
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR) {
    17d4:	80 91 33 01 	lds	r24, 0x0133
    17d8:	90 91 34 01 	lds	r25, 0x0134
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	29 f0       	breq	.+10     	; 0x17ea <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer1 overflow mode*/
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr1(); */
    17e0:	e0 91 33 01 	lds	r30, 0x0133
    17e4:	f0 91 34 01 	lds	r31, 0x0134
    17e8:	09 95       	icall
	}
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_7>:

ISR( TIMER1_COMPA_vect) {
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	5f 93       	push	r21
    1822:	6f 93       	push	r22
    1824:	7f 93       	push	r23
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	ef 93       	push	r30
    1830:	ff 93       	push	r31
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR) {
    183a:	80 91 33 01 	lds	r24, 0x0133
    183e:	90 91 34 01 	lds	r25, 0x0134
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	29 f0       	breq	.+10     	; 0x1850 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer1 compare mode */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr1(); */
    1846:	e0 91 33 01 	lds	r30, 0x0133
    184a:	f0 91 34 01 	lds	r31, 0x0134
    184e:	09 95       	icall
	}
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_5>:

ISR( TIMER2_OVF_vect) {
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR) {
    18a0:	80 91 35 01 	lds	r24, 0x0135
    18a4:	90 91 36 01 	lds	r25, 0x0136
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer2 overflow mode*/
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr2(); */
    18ac:	e0 91 35 01 	lds	r30, 0x0135
    18b0:	f0 91 36 01 	lds	r31, 0x0136
    18b4:	09 95       	icall
	}
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	ff 91       	pop	r31
    18bc:	ef 91       	pop	r30
    18be:	bf 91       	pop	r27
    18c0:	af 91       	pop	r26
    18c2:	9f 91       	pop	r25
    18c4:	8f 91       	pop	r24
    18c6:	7f 91       	pop	r23
    18c8:	6f 91       	pop	r22
    18ca:	5f 91       	pop	r21
    18cc:	4f 91       	pop	r20
    18ce:	3f 91       	pop	r19
    18d0:	2f 91       	pop	r18
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_4>:

ISR( TIMER2_COMP_vect) {
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR) {
    1906:	80 91 35 01 	lds	r24, 0x0135
    190a:	90 91 36 01 	lds	r25, 0x0136
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer2 compare mode  */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr2(); */
    1912:	e0 91 35 01 	lds	r30, 0x0135
    1916:	f0 91 36 01 	lds	r31, 0x0136
    191a:	09 95       	icall
	}
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <Timer_init>:
 *******************************************************************************/

/*
 * Function to initialize the timer using dynamic configuration
 * */
void Timer_init(const Timer_ConfigType *Config_Ptr) {
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <Timer_init+0x6>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01

	/* This function first checks the value of prescaler2 and if it is Dont care it means
	 * that timer2 is not used then checks the TimerID which could be timer0 or timer 1
	 * then initialize the corresponding registers with the values in that configuration
	 * */
	if ((Config_Ptr->prescaler2) == DONT_CARE) {
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	86 81       	ldd	r24, Z+6	; 0x06
    1956:	8f 3f       	cpi	r24, 0xFF	; 255
    1958:	09 f0       	breq	.+2      	; 0x195c <Timer_init+0x1a>
    195a:	b4 c0       	rjmp	.+360    	; 0x1ac4 <Timer_init+0x182>

		if ((Config_Ptr->timer_id) == Timer0) {
    195c:	e9 81       	ldd	r30, Y+1	; 0x01
    195e:	fa 81       	ldd	r31, Y+2	; 0x02
    1960:	80 81       	ld	r24, Z
    1962:	88 23       	and	r24, r24
    1964:	09 f0       	breq	.+2      	; 0x1968 <Timer_init+0x26>
    1966:	50 c0       	rjmp	.+160    	; 0x1a08 <Timer_init+0xc6>

			/* first choose the prescaler then choose the initial value to start count from
			 * which are same steps in any mode in the timer0
			 * */
			TCCR0 = (Config_Ptr->prescaler);
    1968:	a3 e5       	ldi	r26, 0x53	; 83
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	87 81       	ldd	r24, Z+7	; 0x07
    1972:	8c 93       	st	X, r24
			TCNT0 = Config_Ptr->initial_value;
    1974:	a2 e5       	ldi	r26, 0x52	; 82
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e9 81       	ldd	r30, Y+1	; 0x01
    197a:	fa 81       	ldd	r31, Y+2	; 0x02
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	92 81       	ldd	r25, Z+2	; 0x02
    1980:	8c 93       	st	X, r24

			/* second checks the mode chosen between Normal / compare / fast PWM
			 * to initialize the other registers and the compare value in the timer0 and enable each mode
			 * */
			if (((Config_Ptr->mode) == NORMAL_MODE)) {
    1982:	e9 81       	ldd	r30, Y+1	; 0x01
    1984:	fa 81       	ldd	r31, Y+2	; 0x02
    1986:	85 81       	ldd	r24, Z+5	; 0x05
    1988:	88 23       	and	r24, r24
    198a:	61 f4       	brne	.+24     	; 0x19a4 <Timer_init+0x62>
				TCCR0 |= (1 << FOC0);
    198c:	a3 e5       	ldi	r26, 0x53	; 83
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e3 e5       	ldi	r30, 0x53	; 83
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	80 68       	ori	r24, 0x80	; 128
    1998:	8c 93       	st	X, r24
				TIMSK = (1 << TOIE0);
    199a:	e9 e5       	ldi	r30, 0x59	; 89
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 83       	st	Z, r24
    19a2:	ea c0       	rjmp	.+468    	; 0x1b78 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == COMPARE_MODE) {
    19a4:	e9 81       	ldd	r30, Y+1	; 0x01
    19a6:	fa 81       	ldd	r31, Y+2	; 0x02
    19a8:	85 81       	ldd	r24, Z+5	; 0x05
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	99 f4       	brne	.+38     	; 0x19d4 <Timer_init+0x92>
				OCR0 = Config_Ptr->compare_value;
    19ae:	ac e5       	ldi	r26, 0x5C	; 92
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	83 81       	ldd	r24, Z+3	; 0x03
    19b8:	94 81       	ldd	r25, Z+4	; 0x04
    19ba:	8c 93       	st	X, r24
				TCCR0 |= (1 << FOC0) | (1 << WGM01) | (1 << COM01);
    19bc:	a3 e5       	ldi	r26, 0x53	; 83
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e3 e5       	ldi	r30, 0x53	; 83
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	88 6a       	ori	r24, 0xA8	; 168
    19c8:	8c 93       	st	X, r24
				TIMSK = (1 << OCIE0);
    19ca:	e9 e5       	ldi	r30, 0x59	; 89
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	80 83       	st	Z, r24
    19d2:	d2 c0       	rjmp	.+420    	; 0x1b78 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
    19d4:	e9 81       	ldd	r30, Y+1	; 0x01
    19d6:	fa 81       	ldd	r31, Y+2	; 0x02
    19d8:	85 81       	ldd	r24, Z+5	; 0x05
    19da:	83 30       	cpi	r24, 0x03	; 3
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <Timer_init+0x9e>
    19de:	cc c0       	rjmp	.+408    	; 0x1b78 <Timer_init+0x236>
				OCR0 = Config_Ptr->compare_value;
    19e0:	ac e5       	ldi	r26, 0x5C	; 92
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e9 81       	ldd	r30, Y+1	; 0x01
    19e6:	fa 81       	ldd	r31, Y+2	; 0x02
    19e8:	83 81       	ldd	r24, Z+3	; 0x03
    19ea:	94 81       	ldd	r25, Z+4	; 0x04
    19ec:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);/* configure pwm pin as output pin*/
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	63 e0       	ldi	r22, 0x03	; 3
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_setupPinDirection>
				TCCR0 |= (1 << WGM01) | (1 << WGM00) | (1 << COM01);
    19f8:	a3 e5       	ldi	r26, 0x53	; 83
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e3 e5       	ldi	r30, 0x53	; 83
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	88 66       	ori	r24, 0x68	; 104
    1a04:	8c 93       	st	X, r24
    1a06:	b8 c0       	rjmp	.+368    	; 0x1b78 <Timer_init+0x236>
		}

		/* first choose the prescaler then choose the initial value to start count from
		 * which are same steps in any mode in the timer1
		 * */
		else if ((Config_Ptr->timer_id) == Timer1) {
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	80 81       	ld	r24, Z
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <Timer_init+0xd2>
    1a12:	b2 c0       	rjmp	.+356    	; 0x1b78 <Timer_init+0x236>

			TCNT1 = Config_Ptr->initial_value;
    1a14:	ac e4       	ldi	r26, 0x4C	; 76
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1c:	81 81       	ldd	r24, Z+1	; 0x01
    1a1e:	92 81       	ldd	r25, Z+2	; 0x02
    1a20:	11 96       	adiw	r26, 0x01	; 1
    1a22:	9c 93       	st	X, r25
    1a24:	8e 93       	st	-X, r24
			/*depends on the mode chosen the register TCCR1B is initialized with the selected prescaler */
			TCCR1B = ((Config_Ptr->mode) << WGM12) | ((Config_Ptr->prescaler));
    1a26:	ae e4       	ldi	r26, 0x4E	; 78
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2e:	85 81       	ldd	r24, Z+5	; 0x05
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	98 2f       	mov	r25, r24
    1a42:	e9 81       	ldd	r30, Y+1	; 0x01
    1a44:	fa 81       	ldd	r31, Y+2	; 0x02
    1a46:	87 81       	ldd	r24, Z+7	; 0x07
    1a48:	89 2b       	or	r24, r25
    1a4a:	8c 93       	st	X, r24

			/* second checks the mode chosen between Normal / compare / fast PWM
			 * to initialize the other registers and the compare value in the timer1 and enable each mode
			 * */
			if ((Config_Ptr->mode) == NORMAL_MODE) {
    1a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a50:	85 81       	ldd	r24, Z+5	; 0x05
    1a52:	88 23       	and	r24, r24
    1a54:	49 f4       	brne	.+18     	; 0x1a68 <Timer_init+0x126>
				TCCR1A = (1 << FOC1A);
    1a56:	ef e4       	ldi	r30, 0x4F	; 79
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	88 e0       	ldi	r24, 0x08	; 8
    1a5c:	80 83       	st	Z, r24
				TIMSK = (1 << TOIE1);
    1a5e:	e9 e5       	ldi	r30, 0x59	; 89
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	84 e0       	ldi	r24, 0x04	; 4
    1a64:	80 83       	st	Z, r24
    1a66:	88 c0       	rjmp	.+272    	; 0x1b78 <Timer_init+0x236>
			}
			else if ((Config_Ptr->mode) == COMPARE_MODE) {
    1a68:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6c:	85 81       	ldd	r24, Z+5	; 0x05
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 f4       	brne	.+36     	; 0x1a96 <Timer_init+0x154>
				OCR1A = Config_Ptr->compare_value;
    1a72:	aa e4       	ldi	r26, 0x4A	; 74
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	83 81       	ldd	r24, Z+3	; 0x03
    1a7c:	94 81       	ldd	r25, Z+4	; 0x04
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
				TCCR1A = (1 << FOC1A) | (1 << COM1A1);
    1a84:	ef e4       	ldi	r30, 0x4F	; 79
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	88 e8       	ldi	r24, 0x88	; 136
    1a8a:	80 83       	st	Z, r24
				TIMSK = (1 << OCIE1A);
    1a8c:	e9 e5       	ldi	r30, 0x59	; 89
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 e1       	ldi	r24, 0x10	; 16
    1a92:	80 83       	st	Z, r24
    1a94:	71 c0       	rjmp	.+226    	; 0x1b78 <Timer_init+0x236>
			}
			else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
    1a96:	e9 81       	ldd	r30, Y+1	; 0x01
    1a98:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9a:	85 81       	ldd	r24, Z+5	; 0x05
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <Timer_init+0x160>
    1aa0:	6b c0       	rjmp	.+214    	; 0x1b78 <Timer_init+0x236>
				OCR0 = Config_Ptr->compare_value;
    1aa2:	ac e5       	ldi	r26, 0x5C	; 92
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aaa:	83 81       	ldd	r24, Z+3	; 0x03
    1aac:	94 81       	ldd	r25, Z+4	; 0x04
    1aae:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT); /* configure pwm pin as output pin*/
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	65 e0       	ldi	r22, 0x05	; 5
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_setupPinDirection>
				TCCR1A = (1 << WGM10) | (1 << WGM11) | (1 << COM1A1);
    1aba:	ef e4       	ldi	r30, 0x4F	; 79
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	83 e8       	ldi	r24, 0x83	; 131
    1ac0:	80 83       	st	Z, r24
    1ac2:	5a c0       	rjmp	.+180    	; 0x1b78 <Timer_init+0x236>
	/* Then it checks the value of prescaler and if it is Dont care it means
	 * that timer2 is used in this case and not timer0 or timer1
	 * and also checks on the timerID to make sure it's timer2 chosen
	 * then initialize the corresponding registers with the values in that configuration
	 * */
	else if ((Config_Ptr->prescaler) == DONT_CARE) {
    1ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac8:	87 81       	ldd	r24, Z+7	; 0x07
    1aca:	8f 3f       	cpi	r24, 0xFF	; 255
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <Timer_init+0x18e>
    1ace:	54 c0       	rjmp	.+168    	; 0x1b78 <Timer_init+0x236>

		if ((Config_Ptr->timer_id) == Timer2) {
    1ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad4:	80 81       	ld	r24, Z
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <Timer_init+0x19a>
    1ada:	4e c0       	rjmp	.+156    	; 0x1b78 <Timer_init+0x236>

			/* first choose the prescaler2 then choose the initial value to start count from
			 * which are same steps in any mode in the timer2
			 * */
			TCCR2 = (Config_Ptr->prescaler2);
    1adc:	a5 e4       	ldi	r26, 0x45	; 69
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae4:	86 81       	ldd	r24, Z+6	; 0x06
    1ae6:	8c 93       	st	X, r24
			TCNT2 = Config_Ptr->initial_value;
    1ae8:	a4 e4       	ldi	r26, 0x44	; 68
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	81 81       	ldd	r24, Z+1	; 0x01
    1af2:	92 81       	ldd	r25, Z+2	; 0x02
    1af4:	8c 93       	st	X, r24

			/* second checks the mode chosen between Normal / compare / fast PWM
			 * to initialize the other registers and the compare value in the timer2 and enable each mode
			 * */
			if (((Config_Ptr->mode) == NORMAL_MODE)) {
    1af6:	e9 81       	ldd	r30, Y+1	; 0x01
    1af8:	fa 81       	ldd	r31, Y+2	; 0x02
    1afa:	85 81       	ldd	r24, Z+5	; 0x05
    1afc:	88 23       	and	r24, r24
    1afe:	61 f4       	brne	.+24     	; 0x1b18 <Timer_init+0x1d6>
				TCCR2 |= (1 << FOC2);
    1b00:	a5 e4       	ldi	r26, 0x45	; 69
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e4       	ldi	r30, 0x45	; 69
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 68       	ori	r24, 0x80	; 128
    1b0c:	8c 93       	st	X, r24
				TIMSK = (1 << TOIE2);
    1b0e:	e9 e5       	ldi	r30, 0x59	; 89
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 e4       	ldi	r24, 0x40	; 64
    1b14:	80 83       	st	Z, r24
    1b16:	30 c0       	rjmp	.+96     	; 0x1b78 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == COMPARE_MODE) {
    1b18:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1c:	85 81       	ldd	r24, Z+5	; 0x05
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	99 f4       	brne	.+38     	; 0x1b48 <Timer_init+0x206>
				OCR2 = Config_Ptr->compare_value;
    1b22:	a3 e4       	ldi	r26, 0x43	; 67
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e9 81       	ldd	r30, Y+1	; 0x01
    1b28:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2a:	83 81       	ldd	r24, Z+3	; 0x03
    1b2c:	94 81       	ldd	r25, Z+4	; 0x04
    1b2e:	8c 93       	st	X, r24
				TCCR2 |= (1 << FOC2) | (1 << WGM21) | (1 << COM21);
    1b30:	a5 e4       	ldi	r26, 0x45	; 69
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e5 e4       	ldi	r30, 0x45	; 69
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 6a       	ori	r24, 0xA8	; 168
    1b3c:	8c 93       	st	X, r24
				TIMSK = (1 << OCIE2);
    1b3e:	e9 e5       	ldi	r30, 0x59	; 89
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 e8       	ldi	r24, 0x80	; 128
    1b44:	80 83       	st	Z, r24
    1b46:	18 c0       	rjmp	.+48     	; 0x1b78 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
    1b48:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4c:	85 81       	ldd	r24, Z+5	; 0x05
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	99 f4       	brne	.+38     	; 0x1b78 <Timer_init+0x236>
				OCR2 = Config_Ptr->compare_value;
    1b52:	a3 e4       	ldi	r26, 0x43	; 67
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e9 81       	ldd	r30, Y+1	; 0x01
    1b58:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5a:	83 81       	ldd	r24, Z+3	; 0x03
    1b5c:	94 81       	ldd	r25, Z+4	; 0x04
    1b5e:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT); /* configure pwm pin as output pin*/
    1b60:	83 e0       	ldi	r24, 0x03	; 3
    1b62:	67 e0       	ldi	r22, 0x07	; 7
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_setupPinDirection>
				TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21);
    1b6a:	a5 e4       	ldi	r26, 0x45	; 69
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e5 e4       	ldi	r30, 0x45	; 69
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	88 66       	ori	r24, 0x68	; 104
    1b76:	8c 93       	st	X, r24
			}
		}

	}

}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <Timer_deInit>:

/*
 * Function to disable a chosen timer by checking the TimerID
 * */

void Timer_deInit(Timer_ID ID) {
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	0f 92       	push	r0
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	/*depends on each timer chosen, the corresponding registers are de initialized and disabled
	 *and also make the global pointer value as NULL again to not be used accidentally
	 * */
	if (ID == Timer0) {
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	88 23       	and	r24, r24
    1b92:	e1 f4       	brne	.+56     	; 0x1bcc <Timer_deInit+0x4a>
		TCCR0 = 0;
    1b94:	e3 e5       	ldi	r30, 0x53	; 83
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	10 82       	st	Z, r1
		TCNT0 = 0;
    1b9a:	e2 e5       	ldi	r30, 0x52	; 82
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	10 82       	st	Z, r1
		OCR0 = 0;
    1ba0:	ec e5       	ldi	r30, 0x5C	; 92
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE0);
    1ba6:	a9 e5       	ldi	r26, 0x59	; 89
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e9 e5       	ldi	r30, 0x59	; 89
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8d 7f       	andi	r24, 0xFD	; 253
    1bb2:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE0);
    1bb4:	a9 e5       	ldi	r26, 0x59	; 89
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e9 e5       	ldi	r30, 0x59	; 89
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8e 7f       	andi	r24, 0xFE	; 254
    1bc0:	8c 93       	st	X, r24
		g_callBackPtr0 = NULL_PTR;
    1bc2:	10 92 32 01 	sts	0x0132, r1
    1bc6:	10 92 31 01 	sts	0x0131, r1
    1bca:	34 c0       	rjmp	.+104    	; 0x1c34 <Timer_deInit+0xb2>
	} else if (ID == Timer1) {
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	99 f4       	brne	.+38     	; 0x1bf8 <Timer_deInit+0x76>
		TCNT1 = 0;
    1bd2:	ec e4       	ldi	r30, 0x4C	; 76
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	11 82       	std	Z+1, r1	; 0x01
    1bd8:	10 82       	st	Z, r1
		OCR1A = 0;
    1bda:	ea e4       	ldi	r30, 0x4A	; 74
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	11 82       	std	Z+1, r1	; 0x01
    1be0:	10 82       	st	Z, r1
		TCCR1A = 0;
    1be2:	ef e4       	ldi	r30, 0x4F	; 79
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	10 82       	st	Z, r1
		TCCR1B = 0;
    1be8:	ee e4       	ldi	r30, 0x4E	; 78
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	10 82       	st	Z, r1
		g_callBackPtr1 = NULL_PTR;
    1bee:	10 92 34 01 	sts	0x0134, r1
    1bf2:	10 92 33 01 	sts	0x0133, r1
    1bf6:	1e c0       	rjmp	.+60     	; 0x1c34 <Timer_deInit+0xb2>
	} else if (ID == Timer2) {
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	d9 f4       	brne	.+54     	; 0x1c34 <Timer_deInit+0xb2>
		TCCR2 = 0;
    1bfe:	e5 e4       	ldi	r30, 0x45	; 69
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	10 82       	st	Z, r1
		TCNT2 = 0;
    1c04:	e4 e4       	ldi	r30, 0x44	; 68
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	10 82       	st	Z, r1
		OCR2 = 0;
    1c0a:	e3 e4       	ldi	r30, 0x43	; 67
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2);
    1c10:	a9 e5       	ldi	r26, 0x59	; 89
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e9 e5       	ldi	r30, 0x59	; 89
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8f 77       	andi	r24, 0x7F	; 127
    1c1c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2);
    1c1e:	a9 e5       	ldi	r26, 0x59	; 89
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e9 e5       	ldi	r30, 0x59	; 89
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8f 7b       	andi	r24, 0xBF	; 191
    1c2a:	8c 93       	st	X, r24
		g_callBackPtr2 = NULL_PTR;
    1c2c:	10 92 36 01 	sts	0x0136, r1
    1c30:	10 92 35 01 	sts	0x0135, r1
	} else {
		return;
	}

}
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <Timer_setCallBack>:

/*
 * Function to set the call back function of the chosen timerID
 * */
void Timer_setCallBack(void (*a_ptr)(void), Timer_ID ID) {
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <Timer_setCallBack+0x6>
    1c42:	0f 92       	push	r0
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	6b 83       	std	Y+3, r22	; 0x03

	if (ID == Timer0) {
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 23       	and	r24, r24
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <Timer_setCallBack+0x26>
		g_callBackPtr0 = a_ptr;
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	90 93 32 01 	sts	0x0132, r25
    1c5c:	80 93 31 01 	sts	0x0131, r24
    1c60:	13 c0       	rjmp	.+38     	; 0x1c88 <Timer_setCallBack+0x4c>
	} else if (ID == Timer1) {
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	39 f4       	brne	.+14     	; 0x1c76 <Timer_setCallBack+0x3a>
		g_callBackPtr1 = a_ptr;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	90 93 34 01 	sts	0x0134, r25
    1c70:	80 93 33 01 	sts	0x0133, r24
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <Timer_setCallBack+0x4c>
	} else if (ID == Timer2) {
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	31 f4       	brne	.+12     	; 0x1c88 <Timer_setCallBack+0x4c>
		g_callBackPtr2 = a_ptr;
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	90 93 36 01 	sts	0x0136, r25
    1c84:	80 93 35 01 	sts	0x0135, r24
	} else {
		return;
	}

}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <GPIO_setupPinDirection+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <GPIO_setupPinDirection+0x8>
    1c9c:	0f 92       	push	r0
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	6a 83       	std	Y+2, r22	; 0x02
    1ca6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <GPIO_setupPinDirection+0x1c>
    1cae:	d5 c0       	rjmp	.+426    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	84 30       	cpi	r24, 0x04	; 4
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <GPIO_setupPinDirection+0x24>
    1cb6:	d1 c0       	rjmp	.+418    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3d 83       	std	Y+5, r19	; 0x05
    1cc0:	2c 83       	std	Y+4, r18	; 0x04
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <GPIO_setupPinDirection+0x3a>
    1ccc:	43 c0       	rjmp	.+134    	; 0x1d54 <GPIO_setupPinDirection+0xc0>
    1cce:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <GPIO_setupPinDirection+0x4e>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	71 f0       	breq	.+28     	; 0x1cfc <GPIO_setupPinDirection+0x68>
    1ce0:	bc c0       	rjmp	.+376    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
    1ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <GPIO_setupPinDirection+0x5a>
    1cec:	5f c0       	rjmp	.+190    	; 0x1dac <GPIO_setupPinDirection+0x118>
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <GPIO_setupPinDirection+0x66>
    1cf8:	85 c0       	rjmp	.+266    	; 0x1e04 <GPIO_setupPinDirection+0x170>
    1cfa:	af c0       	rjmp	.+350    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	a1 f4       	brne	.+40     	; 0x1d2a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d02:	aa e3       	ldi	r26, 0x3A	; 58
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	ea e3       	ldi	r30, 0x3A	; 58
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_setupPinDirection+0x8c>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_setupPinDirection+0x88>
    1d24:	84 2b       	or	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	98 c0       	rjmp	.+304    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d2a:	aa e3       	ldi	r26, 0x3A	; 58
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ea e3       	ldi	r30, 0x3A	; 58
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <GPIO_setupPinDirection+0xb4>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <GPIO_setupPinDirection+0xb0>
    1d4c:	80 95       	com	r24
    1d4e:	84 23       	and	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	83 c0       	rjmp	.+262    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	a1 f4       	brne	.+40     	; 0x1d82 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d5a:	a7 e3       	ldi	r26, 0x37	; 55
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e7 e3       	ldi	r30, 0x37	; 55
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_setupPinDirection+0xe4>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_setupPinDirection+0xe0>
    1d7c:	84 2b       	or	r24, r20
    1d7e:	8c 93       	st	X, r24
    1d80:	6c c0       	rjmp	.+216    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d82:	a7 e3       	ldi	r26, 0x37	; 55
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e7 e3       	ldi	r30, 0x37	; 55
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <GPIO_setupPinDirection+0x10c>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <GPIO_setupPinDirection+0x108>
    1da4:	80 95       	com	r24
    1da6:	84 23       	and	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	57 c0       	rjmp	.+174    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	a1 f4       	brne	.+40     	; 0x1dda <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1db2:	a4 e3       	ldi	r26, 0x34	; 52
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e4 e3       	ldi	r30, 0x34	; 52
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <GPIO_setupPinDirection+0x13c>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <GPIO_setupPinDirection+0x138>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	40 c0       	rjmp	.+128    	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1dda:	a4 e3       	ldi	r26, 0x34	; 52
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e4 e3       	ldi	r30, 0x34	; 52
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <GPIO_setupPinDirection+0x164>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <GPIO_setupPinDirection+0x160>
    1dfc:	80 95       	com	r24
    1dfe:	84 23       	and	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	2b c0       	rjmp	.+86     	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	a1 f4       	brne	.+40     	; 0x1e32 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e0a:	a1 e3       	ldi	r26, 0x31	; 49
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e1 e3       	ldi	r30, 0x31	; 49
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <GPIO_setupPinDirection+0x194>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <GPIO_setupPinDirection+0x190>
    1e2c:	84 2b       	or	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e32:	a1 e3       	ldi	r26, 0x31	; 49
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e1 e3       	ldi	r30, 0x31	; 49
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <GPIO_setupPinDirection+0x1bc>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <GPIO_setupPinDirection+0x1b8>
    1e54:	80 95       	com	r24
    1e56:	84 23       	and	r24, r20
    1e58:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <GPIO_writePin+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <GPIO_writePin+0x8>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	6a 83       	std	Y+2, r22	; 0x02
    1e7c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	88 30       	cpi	r24, 0x08	; 8
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <GPIO_writePin+0x1c>
    1e84:	d5 c0       	rjmp	.+426    	; 0x2030 <GPIO_writePin+0x1c6>
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	84 30       	cpi	r24, 0x04	; 4
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <GPIO_writePin+0x24>
    1e8c:	d1 c0       	rjmp	.+418    	; 0x2030 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3d 83       	std	Y+5, r19	; 0x05
    1e96:	2c 83       	std	Y+4, r18	; 0x04
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <GPIO_writePin+0x3a>
    1ea2:	43 c0       	rjmp	.+134    	; 0x1f2a <GPIO_writePin+0xc0>
    1ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea8:	22 30       	cpi	r18, 0x02	; 2
    1eaa:	31 05       	cpc	r19, r1
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <GPIO_writePin+0x4e>
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	71 f0       	breq	.+28     	; 0x1ed2 <GPIO_writePin+0x68>
    1eb6:	bc c0       	rjmp	.+376    	; 0x2030 <GPIO_writePin+0x1c6>
    1eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eba:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebc:	22 30       	cpi	r18, 0x02	; 2
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <GPIO_writePin+0x5a>
    1ec2:	5f c0       	rjmp	.+190    	; 0x1f82 <GPIO_writePin+0x118>
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <GPIO_writePin+0x66>
    1ece:	85 c0       	rjmp	.+266    	; 0x1fda <GPIO_writePin+0x170>
    1ed0:	af c0       	rjmp	.+350    	; 0x2030 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	a1 f4       	brne	.+40     	; 0x1f00 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ed8:	ab e3       	ldi	r26, 0x3B	; 59
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	eb e3       	ldi	r30, 0x3B	; 59
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <GPIO_writePin+0x8c>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <GPIO_writePin+0x88>
    1efa:	84 2b       	or	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	98 c0       	rjmp	.+304    	; 0x2030 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f00:	ab e3       	ldi	r26, 0x3B	; 59
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	eb e3       	ldi	r30, 0x3B	; 59
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <GPIO_writePin+0xb4>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <GPIO_writePin+0xb0>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	83 c0       	rjmp	.+262    	; 0x2030 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	a1 f4       	brne	.+40     	; 0x1f58 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f30:	a8 e3       	ldi	r26, 0x38	; 56
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <GPIO_writePin+0xe4>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <GPIO_writePin+0xe0>
    1f52:	84 2b       	or	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	6c c0       	rjmp	.+216    	; 0x2030 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f58:	a8 e3       	ldi	r26, 0x38	; 56
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e8 e3       	ldi	r30, 0x38	; 56
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <GPIO_writePin+0x10c>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <GPIO_writePin+0x108>
    1f7a:	80 95       	com	r24
    1f7c:	84 23       	and	r24, r20
    1f7e:	8c 93       	st	X, r24
    1f80:	57 c0       	rjmp	.+174    	; 0x2030 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	a1 f4       	brne	.+40     	; 0x1fb0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f88:	a5 e3       	ldi	r26, 0x35	; 53
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e5 e3       	ldi	r30, 0x35	; 53
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 2e       	mov	r0, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <GPIO_writePin+0x13c>
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	0a 94       	dec	r0
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <GPIO_writePin+0x138>
    1faa:	84 2b       	or	r24, r20
    1fac:	8c 93       	st	X, r24
    1fae:	40 c0       	rjmp	.+128    	; 0x2030 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1fb0:	a5 e3       	ldi	r26, 0x35	; 53
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e5 e3       	ldi	r30, 0x35	; 53
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <GPIO_writePin+0x164>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <GPIO_writePin+0x160>
    1fd2:	80 95       	com	r24
    1fd4:	84 23       	and	r24, r20
    1fd6:	8c 93       	st	X, r24
    1fd8:	2b c0       	rjmp	.+86     	; 0x2030 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	a1 f4       	brne	.+40     	; 0x2008 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1fe0:	a2 e3       	ldi	r26, 0x32	; 50
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e2 e3       	ldi	r30, 0x32	; 50
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	48 2f       	mov	r20, r24
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	02 2e       	mov	r0, r18
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <GPIO_writePin+0x194>
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	0a 94       	dec	r0
    2000:	e2 f7       	brpl	.-8      	; 0x1ffa <GPIO_writePin+0x190>
    2002:	84 2b       	or	r24, r20
    2004:	8c 93       	st	X, r24
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2008:	a2 e3       	ldi	r26, 0x32	; 50
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e2 e3       	ldi	r30, 0x32	; 50
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	48 2f       	mov	r20, r24
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	02 2e       	mov	r0, r18
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <GPIO_writePin+0x1bc>
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	0a 94       	dec	r0
    2028:	e2 f7       	brpl	.-8      	; 0x2022 <GPIO_writePin+0x1b8>
    202a:	80 95       	com	r24
    202c:	84 23       	and	r24, r20
    202e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <GPIO_readPin+0x6>
    2046:	00 d0       	rcall	.+0      	; 0x2048 <GPIO_readPin+0x8>
    2048:	0f 92       	push	r0
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	8a 83       	std	Y+2, r24	; 0x02
    2050:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2052:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	08 f0       	brcs	.+2      	; 0x205c <GPIO_readPin+0x1c>
    205a:	84 c0       	rjmp	.+264    	; 0x2164 <GPIO_readPin+0x124>
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	84 30       	cpi	r24, 0x04	; 4
    2060:	08 f0       	brcs	.+2      	; 0x2064 <GPIO_readPin+0x24>
    2062:	80 c0       	rjmp	.+256    	; 0x2164 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	3d 83       	std	Y+5, r19	; 0x05
    206c:	2c 83       	std	Y+4, r18	; 0x04
    206e:	4c 81       	ldd	r20, Y+4	; 0x04
    2070:	5d 81       	ldd	r21, Y+5	; 0x05
    2072:	41 30       	cpi	r20, 0x01	; 1
    2074:	51 05       	cpc	r21, r1
    2076:	79 f1       	breq	.+94     	; 0x20d6 <GPIO_readPin+0x96>
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	82 30       	cpi	r24, 0x02	; 2
    207e:	91 05       	cpc	r25, r1
    2080:	34 f4       	brge	.+12     	; 0x208e <GPIO_readPin+0x4e>
    2082:	2c 81       	ldd	r18, Y+4	; 0x04
    2084:	3d 81       	ldd	r19, Y+5	; 0x05
    2086:	21 15       	cp	r18, r1
    2088:	31 05       	cpc	r19, r1
    208a:	69 f0       	breq	.+26     	; 0x20a6 <GPIO_readPin+0x66>
    208c:	6b c0       	rjmp	.+214    	; 0x2164 <GPIO_readPin+0x124>
    208e:	4c 81       	ldd	r20, Y+4	; 0x04
    2090:	5d 81       	ldd	r21, Y+5	; 0x05
    2092:	42 30       	cpi	r20, 0x02	; 2
    2094:	51 05       	cpc	r21, r1
    2096:	b9 f1       	breq	.+110    	; 0x2106 <GPIO_readPin+0xc6>
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	83 30       	cpi	r24, 0x03	; 3
    209e:	91 05       	cpc	r25, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <GPIO_readPin+0x64>
    20a2:	49 c0       	rjmp	.+146    	; 0x2136 <GPIO_readPin+0xf6>
    20a4:	5f c0       	rjmp	.+190    	; 0x2164 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20a6:	e9 e3       	ldi	r30, 0x39	; 57
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a9 01       	movw	r20, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <GPIO_readPin+0x7e>
    20ba:	55 95       	asr	r21
    20bc:	47 95       	ror	r20
    20be:	8a 95       	dec	r24
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <GPIO_readPin+0x7a>
    20c2:	ca 01       	movw	r24, r20
    20c4:	81 70       	andi	r24, 0x01	; 1
    20c6:	90 70       	andi	r25, 0x00	; 0
    20c8:	88 23       	and	r24, r24
    20ca:	19 f0       	breq	.+6      	; 0x20d2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	49 c0       	rjmp	.+146    	; 0x2164 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20d2:	19 82       	std	Y+1, r1	; 0x01
    20d4:	47 c0       	rjmp	.+142    	; 0x2164 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    20d6:	e6 e3       	ldi	r30, 0x36	; 54
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	88 2f       	mov	r24, r24
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a9 01       	movw	r20, r18
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <GPIO_readPin+0xae>
    20ea:	55 95       	asr	r21
    20ec:	47 95       	ror	r20
    20ee:	8a 95       	dec	r24
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <GPIO_readPin+0xaa>
    20f2:	ca 01       	movw	r24, r20
    20f4:	81 70       	andi	r24, 0x01	; 1
    20f6:	90 70       	andi	r25, 0x00	; 0
    20f8:	88 23       	and	r24, r24
    20fa:	19 f0       	breq	.+6      	; 0x2102 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	31 c0       	rjmp	.+98     	; 0x2164 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2102:	19 82       	std	Y+1, r1	; 0x01
    2104:	2f c0       	rjmp	.+94     	; 0x2164 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2106:	e3 e3       	ldi	r30, 0x33	; 51
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a9 01       	movw	r20, r18
    2118:	02 c0       	rjmp	.+4      	; 0x211e <GPIO_readPin+0xde>
    211a:	55 95       	asr	r21
    211c:	47 95       	ror	r20
    211e:	8a 95       	dec	r24
    2120:	e2 f7       	brpl	.-8      	; 0x211a <GPIO_readPin+0xda>
    2122:	ca 01       	movw	r24, r20
    2124:	81 70       	andi	r24, 0x01	; 1
    2126:	90 70       	andi	r25, 0x00	; 0
    2128:	88 23       	and	r24, r24
    212a:	19 f0       	breq	.+6      	; 0x2132 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	19 c0       	rjmp	.+50     	; 0x2164 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2132:	19 82       	std	Y+1, r1	; 0x01
    2134:	17 c0       	rjmp	.+46     	; 0x2164 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2136:	e0 e3       	ldi	r30, 0x30	; 48
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a9 01       	movw	r20, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <GPIO_readPin+0x10e>
    214a:	55 95       	asr	r21
    214c:	47 95       	ror	r20
    214e:	8a 95       	dec	r24
    2150:	e2 f7       	brpl	.-8      	; 0x214a <GPIO_readPin+0x10a>
    2152:	ca 01       	movw	r24, r20
    2154:	81 70       	andi	r24, 0x01	; 1
    2156:	90 70       	andi	r25, 0x00	; 0
    2158:	88 23       	and	r24, r24
    215a:	19 f0       	breq	.+6      	; 0x2162 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2162:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <GPIO_setupPortDirection+0x6>
    217c:	00 d0       	rcall	.+0      	; 0x217e <GPIO_setupPortDirection+0x8>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	90 f5       	brcc	.+100    	; 0x21f0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	3c 83       	std	Y+4, r19	; 0x04
    2194:	2b 83       	std	Y+3, r18	; 0x03
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	91 05       	cpc	r25, r1
    219e:	d1 f0       	breq	.+52     	; 0x21d4 <GPIO_setupPortDirection+0x5e>
    21a0:	2b 81       	ldd	r18, Y+3	; 0x03
    21a2:	3c 81       	ldd	r19, Y+4	; 0x04
    21a4:	22 30       	cpi	r18, 0x02	; 2
    21a6:	31 05       	cpc	r19, r1
    21a8:	2c f4       	brge	.+10     	; 0x21b4 <GPIO_setupPortDirection+0x3e>
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	61 f0       	breq	.+24     	; 0x21ca <GPIO_setupPortDirection+0x54>
    21b2:	1e c0       	rjmp	.+60     	; 0x21f0 <GPIO_setupPortDirection+0x7a>
    21b4:	2b 81       	ldd	r18, Y+3	; 0x03
    21b6:	3c 81       	ldd	r19, Y+4	; 0x04
    21b8:	22 30       	cpi	r18, 0x02	; 2
    21ba:	31 05       	cpc	r19, r1
    21bc:	81 f0       	breq	.+32     	; 0x21de <GPIO_setupPortDirection+0x68>
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	83 30       	cpi	r24, 0x03	; 3
    21c4:	91 05       	cpc	r25, r1
    21c6:	81 f0       	breq	.+32     	; 0x21e8 <GPIO_setupPortDirection+0x72>
    21c8:	13 c0       	rjmp	.+38     	; 0x21f0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    21ca:	ea e3       	ldi	r30, 0x3A	; 58
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	80 83       	st	Z, r24
    21d2:	0e c0       	rjmp	.+28     	; 0x21f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    21d4:	e7 e3       	ldi	r30, 0x37	; 55
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	80 83       	st	Z, r24
    21dc:	09 c0       	rjmp	.+18     	; 0x21f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21de:	e4 e3       	ldi	r30, 0x34	; 52
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	80 83       	st	Z, r24
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21e8:	e1 e3       	ldi	r30, 0x31	; 49
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <GPIO_writePort+0x6>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <GPIO_writePort+0x8>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	84 30       	cpi	r24, 0x04	; 4
    2212:	90 f5       	brcc	.+100    	; 0x2278 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	3c 83       	std	Y+4, r19	; 0x04
    221c:	2b 83       	std	Y+3, r18	; 0x03
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	91 05       	cpc	r25, r1
    2226:	d1 f0       	breq	.+52     	; 0x225c <GPIO_writePort+0x5e>
    2228:	2b 81       	ldd	r18, Y+3	; 0x03
    222a:	3c 81       	ldd	r19, Y+4	; 0x04
    222c:	22 30       	cpi	r18, 0x02	; 2
    222e:	31 05       	cpc	r19, r1
    2230:	2c f4       	brge	.+10     	; 0x223c <GPIO_writePort+0x3e>
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	61 f0       	breq	.+24     	; 0x2252 <GPIO_writePort+0x54>
    223a:	1e c0       	rjmp	.+60     	; 0x2278 <GPIO_writePort+0x7a>
    223c:	2b 81       	ldd	r18, Y+3	; 0x03
    223e:	3c 81       	ldd	r19, Y+4	; 0x04
    2240:	22 30       	cpi	r18, 0x02	; 2
    2242:	31 05       	cpc	r19, r1
    2244:	81 f0       	breq	.+32     	; 0x2266 <GPIO_writePort+0x68>
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	83 30       	cpi	r24, 0x03	; 3
    224c:	91 05       	cpc	r25, r1
    224e:	81 f0       	breq	.+32     	; 0x2270 <GPIO_writePort+0x72>
    2250:	13 c0       	rjmp	.+38     	; 0x2278 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2252:	eb e3       	ldi	r30, 0x3B	; 59
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	80 83       	st	Z, r24
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    225c:	e8 e3       	ldi	r30, 0x38	; 56
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	80 83       	st	Z, r24
    2264:	09 c0       	rjmp	.+18     	; 0x2278 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2266:	e5 e3       	ldi	r30, 0x35	; 53
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	80 83       	st	Z, r24
    226e:	04 c0       	rjmp	.+8      	; 0x2278 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2270:	e2 e3       	ldi	r30, 0x32	; 50
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	80 83       	st	Z, r24
			break;
		}
	}
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	00 d0       	rcall	.+0      	; 0x228c <GPIO_readPort+0x6>
    228c:	00 d0       	rcall	.+0      	; 0x228e <GPIO_readPort+0x8>
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2294:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	84 30       	cpi	r24, 0x04	; 4
    229a:	90 f5       	brcc	.+100    	; 0x2300 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	3c 83       	std	Y+4, r19	; 0x04
    22a4:	2b 83       	std	Y+3, r18	; 0x03
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	91 05       	cpc	r25, r1
    22ae:	d1 f0       	breq	.+52     	; 0x22e4 <GPIO_readPort+0x5e>
    22b0:	2b 81       	ldd	r18, Y+3	; 0x03
    22b2:	3c 81       	ldd	r19, Y+4	; 0x04
    22b4:	22 30       	cpi	r18, 0x02	; 2
    22b6:	31 05       	cpc	r19, r1
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <GPIO_readPort+0x3e>
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	61 f0       	breq	.+24     	; 0x22da <GPIO_readPort+0x54>
    22c2:	1e c0       	rjmp	.+60     	; 0x2300 <GPIO_readPort+0x7a>
    22c4:	2b 81       	ldd	r18, Y+3	; 0x03
    22c6:	3c 81       	ldd	r19, Y+4	; 0x04
    22c8:	22 30       	cpi	r18, 0x02	; 2
    22ca:	31 05       	cpc	r19, r1
    22cc:	81 f0       	breq	.+32     	; 0x22ee <GPIO_readPort+0x68>
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	83 30       	cpi	r24, 0x03	; 3
    22d4:	91 05       	cpc	r25, r1
    22d6:	81 f0       	breq	.+32     	; 0x22f8 <GPIO_readPort+0x72>
    22d8:	13 c0       	rjmp	.+38     	; 0x2300 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    22da:	e9 e3       	ldi	r30, 0x39	; 57
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	0e c0       	rjmp	.+28     	; 0x2300 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22e4:	e6 e3       	ldi	r30, 0x36	; 54
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	09 c0       	rjmp	.+18     	; 0x2300 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    22ee:	e3 e3       	ldi	r30, 0x33	; 51
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	04 c0       	rjmp	.+8      	; 0x2300 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22f8:	e0 e3       	ldi	r30, 0x30	; 48
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <KEYPAD_getPressedKey+0x6>
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    231c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    231e:	1b 82       	std	Y+3, r1	; 0x03
    2320:	43 c0       	rjmp	.+134    	; 0x23a8 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	0e 94 bb 10 	call	0x2176	; 0x2176 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,PIN_OUTPUT);
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	98 2f       	mov	r25, r24
    232e:	9c 5f       	subi	r25, 0xFC	; 252
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	69 2f       	mov	r22, r25
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9c 01       	movw	r18, r24
    2342:	2c 5f       	subi	r18, 0xFC	; 252
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <KEYPAD_getPressedKey+0x40>
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	2a 95       	dec	r18
    2352:	e2 f7       	brpl	.-8      	; 0x234c <KEYPAD_getPressedKey+0x3c>
    2354:	80 95       	com	r24
    2356:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	69 81       	ldd	r22, Y+1	; 0x01
    235c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2360:	1a 82       	std	Y+2, r1	; 0x02
    2362:	1c c0       	rjmp	.+56     	; 0x239c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	6a 81       	ldd	r22, Y+2	; 0x02
    2368:	0e 94 20 10 	call	0x2040	; 0x2040 <GPIO_readPin>
    236c:	88 23       	and	r24, r24
    236e:	99 f4       	brne	.+38     	; 0x2396 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	98 2f       	mov	r25, r24
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	89 0f       	add	r24, r25
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	8f 5f       	subi	r24, 0xFF	; 255
    239a:	8a 83       	std	Y+2, r24	; 0x02
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	84 30       	cpi	r24, 0x04	; 4
    23a0:	08 f3       	brcs	.-62     	; 0x2364 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	8f 5f       	subi	r24, 0xFF	; 255
    23a6:	8b 83       	std	Y+3, r24	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <KEYPAD_getPressedKey+0xa0>
    23ae:	b9 cf       	rjmp	.-142    	; 0x2322 <KEYPAD_getPressedKey+0x12>
    23b0:	b6 cf       	rjmp	.-148    	; 0x231e <KEYPAD_getPressedKey+0xe>

000023b2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <KEYPAD_4x4_adjustKeyNumber+0x8>
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    23c0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	3c 83       	std	Y+4, r19	; 0x04
    23ca:	2b 83       	std	Y+3, r18	; 0x03
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	88 30       	cpi	r24, 0x08	; 8
    23d2:	91 05       	cpc	r25, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    23d6:	70 c0       	rjmp	.+224    	; 0x24b8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    23d8:	2b 81       	ldd	r18, Y+3	; 0x03
    23da:	3c 81       	ldd	r19, Y+4	; 0x04
    23dc:	29 30       	cpi	r18, 0x09	; 9
    23de:	31 05       	cpc	r19, r1
    23e0:	5c f5       	brge	.+86     	; 0x2438 <KEYPAD_4x4_adjustKeyNumber+0x86>
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	84 30       	cpi	r24, 0x04	; 4
    23e8:	91 05       	cpc	r25, r1
    23ea:	09 f4       	brne	.+2      	; 0x23ee <KEYPAD_4x4_adjustKeyNumber+0x3c>
    23ec:	59 c0       	rjmp	.+178    	; 0x24a0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    23ee:	2b 81       	ldd	r18, Y+3	; 0x03
    23f0:	3c 81       	ldd	r19, Y+4	; 0x04
    23f2:	25 30       	cpi	r18, 0x05	; 5
    23f4:	31 05       	cpc	r19, r1
    23f6:	9c f4       	brge	.+38     	; 0x241e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	82 30       	cpi	r24, 0x02	; 2
    23fe:	91 05       	cpc	r25, r1
    2400:	09 f4       	brne	.+2      	; 0x2404 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2402:	48 c0       	rjmp	.+144    	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2404:	2b 81       	ldd	r18, Y+3	; 0x03
    2406:	3c 81       	ldd	r19, Y+4	; 0x04
    2408:	23 30       	cpi	r18, 0x03	; 3
    240a:	31 05       	cpc	r19, r1
    240c:	0c f0       	brlt	.+2      	; 0x2410 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    240e:	45 c0       	rjmp	.+138    	; 0x249a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	91 05       	cpc	r25, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    241a:	39 c0       	rjmp	.+114    	; 0x248e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    241c:	67 c0       	rjmp	.+206    	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13a>
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	26 30       	cpi	r18, 0x06	; 6
    2424:	31 05       	cpc	r19, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2428:	41 c0       	rjmp	.+130    	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0xfa>
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	87 30       	cpi	r24, 0x07	; 7
    2430:	91 05       	cpc	r25, r1
    2432:	0c f0       	brlt	.+2      	; 0x2436 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2434:	3e c0       	rjmp	.+124    	; 0x24b2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2436:	37 c0       	rjmp	.+110    	; 0x24a6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2438:	2b 81       	ldd	r18, Y+3	; 0x03
    243a:	3c 81       	ldd	r19, Y+4	; 0x04
    243c:	2c 30       	cpi	r18, 0x0C	; 12
    243e:	31 05       	cpc	r19, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2442:	46 c0       	rjmp	.+140    	; 0x24d0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	8d 30       	cpi	r24, 0x0D	; 13
    244a:	91 05       	cpc	r25, r1
    244c:	5c f4       	brge	.+22     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    244e:	2b 81       	ldd	r18, Y+3	; 0x03
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	2a 30       	cpi	r18, 0x0A	; 10
    2454:	31 05       	cpc	r19, r1
    2456:	b1 f1       	breq	.+108    	; 0x24c4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	8b 30       	cpi	r24, 0x0B	; 11
    245e:	91 05       	cpc	r25, r1
    2460:	a4 f5       	brge	.+104    	; 0x24ca <KEYPAD_4x4_adjustKeyNumber+0x118>
    2462:	2d c0       	rjmp	.+90     	; 0x24be <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	2e 30       	cpi	r18, 0x0E	; 14
    246a:	31 05       	cpc	r19, r1
    246c:	b9 f1       	breq	.+110    	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	8e 30       	cpi	r24, 0x0E	; 14
    2474:	91 05       	cpc	r25, r1
    2476:	7c f1       	brlt	.+94     	; 0x24d6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2478:	2b 81       	ldd	r18, Y+3	; 0x03
    247a:	3c 81       	ldd	r19, Y+4	; 0x04
    247c:	2f 30       	cpi	r18, 0x0F	; 15
    247e:	31 05       	cpc	r19, r1
    2480:	79 f1       	breq	.+94     	; 0x24e0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	80 31       	cpi	r24, 0x10	; 16
    2488:	91 05       	cpc	r25, r1
    248a:	69 f1       	breq	.+90     	; 0x24e6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    248c:	2f c0       	rjmp	.+94     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    248e:	87 e0       	ldi	r24, 0x07	; 7
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	2e c0       	rjmp	.+92     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2494:	88 e0       	ldi	r24, 0x08	; 8
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	2b c0       	rjmp	.+86     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    249a:	89 e0       	ldi	r24, 0x09	; 9
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	28 c0       	rjmp	.+80     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    24a0:	85 e2       	ldi	r24, 0x25	; 37
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	25 c0       	rjmp	.+74     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    24a6:	84 e0       	ldi	r24, 0x04	; 4
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	22 c0       	rjmp	.+68     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    24ac:	85 e0       	ldi	r24, 0x05	; 5
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	1f c0       	rjmp	.+62     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    24b2:	86 e0       	ldi	r24, 0x06	; 6
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	1c c0       	rjmp	.+56     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    24b8:	8a e2       	ldi	r24, 0x2A	; 42
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	19 c0       	rjmp	.+50     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	16 c0       	rjmp	.+44     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	13 c0       	rjmp	.+38     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	10 c0       	rjmp	.+32     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    24d0:	8d e2       	ldi	r24, 0x2D	; 45
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	0d c0       	rjmp	.+26     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    24d6:	8d e0       	ldi	r24, 0x0D	; 13
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	0a c0       	rjmp	.+20     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    24dc:	19 82       	std	Y+1, r1	; 0x01
    24de:	08 c0       	rjmp	.+16     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    24e0:	8d e3       	ldi	r24, 0x3D	; 61
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    24e6:	8b e2       	ldi	r24, 0x2B	; 43
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	2e 97       	sbiw	r28, 0x0e	; 14
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	62 e0       	ldi	r22, 0x02	; 2
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <GPIO_writePin>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 ea       	ldi	r26, 0xA0	; 160
    2542:	b1 e4       	ldi	r27, 0x41	; 65
    2544:	8b 87       	std	Y+11, r24	; 0x0b
    2546:	9c 87       	std	Y+12, r25	; 0x0c
    2548:	ad 87       	std	Y+13, r26	; 0x0d
    254a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	6b 85       	ldd	r22, Y+11	; 0x0b
    254e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2550:	8d 85       	ldd	r24, Y+13	; 0x0d
    2552:	9e 85       	ldd	r25, Y+14	; 0x0e
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a e7       	ldi	r20, 0x7A	; 122
    255a:	53 e4       	ldi	r21, 0x43	; 67
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8f 83       	std	Y+7, r24	; 0x07
    2566:	98 87       	std	Y+8, r25	; 0x08
    2568:	a9 87       	std	Y+9, r26	; 0x09
    256a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <LCD_init+0x8e>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	3f c0       	rjmp	.+126    	; 0x260c <LCD_init+0x10c>
	else if (__tmp > 65535)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <LCD_init+0xee>
    25d0:	89 e1       	ldi	r24, 0x19	; 25
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_init+0xdc>
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <LCD_init+0xd0>
    25f6:	14 c0       	rjmp	.+40     	; 0x2620 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_init+0x118>
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	6f ef       	ldi	r22, 0xFF	; 255
    2624:	0e 94 bb 10 	call	0x2176	; 0x2176 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2628:	88 e3       	ldi	r24, 0x38	; 56
    262a:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    262e:	8c e0       	ldi	r24, 0x0C	; 12
    2630:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_sendCommand>
}
    263a:	2e 96       	adiw	r28, 0x0e	; 14
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	e9 97       	sbiw	r28, 0x39	; 57
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	61 e0       	ldi	r22, 0x01	; 1
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <GPIO_writePin>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e8       	ldi	r26, 0x80	; 128
    2672:	bf e3       	ldi	r27, 0x3F	; 63
    2674:	8d ab       	std	Y+53, r24	; 0x35
    2676:	9e ab       	std	Y+54, r25	; 0x36
    2678:	af ab       	std	Y+55, r26	; 0x37
    267a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	6d a9       	ldd	r22, Y+53	; 0x35
    267e:	7e a9       	ldd	r23, Y+54	; 0x36
    2680:	8f a9       	ldd	r24, Y+55	; 0x37
    2682:	98 ad       	ldd	r25, Y+56	; 0x38
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a e7       	ldi	r20, 0x7A	; 122
    268a:	53 e4       	ldi	r21, 0x43	; 67
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	89 ab       	std	Y+49, r24	; 0x31
    2696:	9a ab       	std	Y+50, r25	; 0x32
    2698:	ab ab       	std	Y+51, r26	; 0x33
    269a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    269c:	69 a9       	ldd	r22, Y+49	; 0x31
    269e:	7a a9       	ldd	r23, Y+50	; 0x32
    26a0:	8b a9       	ldd	r24, Y+51	; 0x33
    26a2:	9c a9       	ldd	r25, Y+52	; 0x34
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <LCD_sendCommand+0x72>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	98 ab       	std	Y+48, r25	; 0x30
    26ba:	8f a7       	std	Y+47, r24	; 0x2f
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    26be:	69 a9       	ldd	r22, Y+49	; 0x31
    26c0:	7a a9       	ldd	r23, Y+50	; 0x32
    26c2:	8b a9       	ldd	r24, Y+51	; 0x33
    26c4:	9c a9       	ldd	r25, Y+52	; 0x34
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	6d a9       	ldd	r22, Y+53	; 0x35
    26d8:	7e a9       	ldd	r23, Y+54	; 0x36
    26da:	8f a9       	ldd	r24, Y+55	; 0x37
    26dc:	98 ad       	ldd	r25, Y+56	; 0x38
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	98 ab       	std	Y+48, r25	; 0x30
    26fc:	8f a7       	std	Y+47, r24	; 0x2f
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <LCD_sendCommand+0xd2>
    2700:	89 e1       	ldi	r24, 0x19	; 25
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9e a7       	std	Y+46, r25	; 0x2e
    2706:	8d a7       	std	Y+45, r24	; 0x2d
    2708:	8d a5       	ldd	r24, Y+45	; 0x2d
    270a:	9e a5       	ldd	r25, Y+46	; 0x2e
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <LCD_sendCommand+0xc0>
    2710:	9e a7       	std	Y+46, r25	; 0x2e
    2712:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8f a5       	ldd	r24, Y+47	; 0x2f
    2716:	98 a9       	ldd	r25, Y+48	; 0x30
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	98 ab       	std	Y+48, r25	; 0x30
    271c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2720:	98 a9       	ldd	r25, Y+48	; 0x30
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <LCD_sendCommand+0xb4>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	69 a9       	ldd	r22, Y+49	; 0x31
    272a:	7a a9       	ldd	r23, Y+50	; 0x32
    272c:	8b a9       	ldd	r24, Y+51	; 0x33
    272e:	9c a9       	ldd	r25, Y+52	; 0x34
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	98 ab       	std	Y+48, r25	; 0x30
    273a:	8f a7       	std	Y+47, r24	; 0x2f
    273c:	8f a5       	ldd	r24, Y+47	; 0x2f
    273e:	98 a9       	ldd	r25, Y+48	; 0x30
    2740:	9c a7       	std	Y+44, r25	; 0x2c
    2742:	8b a7       	std	Y+43, r24	; 0x2b
    2744:	8b a5       	ldd	r24, Y+43	; 0x2b
    2746:	9c a5       	ldd	r25, Y+44	; 0x2c
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_sendCommand+0xfc>
    274c:	9c a7       	std	Y+44, r25	; 0x2c
    274e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	62 e0       	ldi	r22, 0x02	; 2
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <GPIO_writePin>
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	a0 e8       	ldi	r26, 0x80	; 128
    2760:	bf e3       	ldi	r27, 0x3F	; 63
    2762:	8f a3       	std	Y+39, r24	; 0x27
    2764:	98 a7       	std	Y+40, r25	; 0x28
    2766:	a9 a7       	std	Y+41, r26	; 0x29
    2768:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276a:	6f a1       	ldd	r22, Y+39	; 0x27
    276c:	78 a5       	ldd	r23, Y+40	; 0x28
    276e:	89 a5       	ldd	r24, Y+41	; 0x29
    2770:	9a a5       	ldd	r25, Y+42	; 0x2a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	53 e4       	ldi	r21, 0x43	; 67
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8b a3       	std	Y+35, r24	; 0x23
    2784:	9c a3       	std	Y+36, r25	; 0x24
    2786:	ad a3       	std	Y+37, r26	; 0x25
    2788:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    278a:	6b a1       	ldd	r22, Y+35	; 0x23
    278c:	7c a1       	ldd	r23, Y+36	; 0x24
    278e:	8d a1       	ldd	r24, Y+37	; 0x25
    2790:	9e a1       	ldd	r25, Y+38	; 0x26
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e8       	ldi	r20, 0x80	; 128
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279e:	88 23       	and	r24, r24
    27a0:	2c f4       	brge	.+10     	; 0x27ac <LCD_sendCommand+0x160>
		__ticks = 1;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9a a3       	std	Y+34, r25	; 0x22
    27a8:	89 a3       	std	Y+33, r24	; 0x21
    27aa:	3f c0       	rjmp	.+126    	; 0x282a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    27ac:	6b a1       	ldd	r22, Y+35	; 0x23
    27ae:	7c a1       	ldd	r23, Y+36	; 0x24
    27b0:	8d a1       	ldd	r24, Y+37	; 0x25
    27b2:	9e a1       	ldd	r25, Y+38	; 0x26
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	4f e7       	ldi	r20, 0x7F	; 127
    27ba:	57 e4       	ldi	r21, 0x47	; 71
    27bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c0:	18 16       	cp	r1, r24
    27c2:	4c f5       	brge	.+82     	; 0x2816 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c4:	6f a1       	ldd	r22, Y+39	; 0x27
    27c6:	78 a5       	ldd	r23, Y+40	; 0x28
    27c8:	89 a5       	ldd	r24, Y+41	; 0x29
    27ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9a a3       	std	Y+34, r25	; 0x22
    27ea:	89 a3       	std	Y+33, r24	; 0x21
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <LCD_sendCommand+0x1c0>
    27ee:	89 e1       	ldi	r24, 0x19	; 25
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	98 a3       	std	Y+32, r25	; 0x20
    27f4:	8f 8f       	std	Y+31, r24	; 0x1f
    27f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f8:	98 a1       	ldd	r25, Y+32	; 0x20
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <LCD_sendCommand+0x1ae>
    27fe:	98 a3       	std	Y+32, r25	; 0x20
    2800:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2802:	89 a1       	ldd	r24, Y+33	; 0x21
    2804:	9a a1       	ldd	r25, Y+34	; 0x22
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	9a a3       	std	Y+34, r25	; 0x22
    280a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280c:	89 a1       	ldd	r24, Y+33	; 0x21
    280e:	9a a1       	ldd	r25, Y+34	; 0x22
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	69 f7       	brne	.-38     	; 0x27ee <LCD_sendCommand+0x1a2>
    2814:	14 c0       	rjmp	.+40     	; 0x283e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2816:	6b a1       	ldd	r22, Y+35	; 0x23
    2818:	7c a1       	ldd	r23, Y+36	; 0x24
    281a:	8d a1       	ldd	r24, Y+37	; 0x25
    281c:	9e a1       	ldd	r25, Y+38	; 0x26
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9a a3       	std	Y+34, r25	; 0x22
    2828:	89 a3       	std	Y+33, r24	; 0x21
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	9a a1       	ldd	r25, Y+34	; 0x22
    282e:	9e 8f       	std	Y+30, r25	; 0x1e
    2830:	8d 8f       	std	Y+29, r24	; 0x1d
    2832:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2834:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <LCD_sendCommand+0x1ea>
    283a:	9e 8f       	std	Y+30, r25	; 0x1e
    283c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	69 ad       	ldd	r22, Y+57	; 0x39
    2842:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GPIO_writePort>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e8       	ldi	r26, 0x80	; 128
    284c:	bf e3       	ldi	r27, 0x3F	; 63
    284e:	89 8f       	std	Y+25, r24	; 0x19
    2850:	9a 8f       	std	Y+26, r25	; 0x1a
    2852:	ab 8f       	std	Y+27, r26	; 0x1b
    2854:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	69 8d       	ldd	r22, Y+25	; 0x19
    2858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a e7       	ldi	r20, 0x7A	; 122
    2864:	53 e4       	ldi	r21, 0x43	; 67
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	8d 8b       	std	Y+21, r24	; 0x15
    2870:	9e 8b       	std	Y+22, r25	; 0x16
    2872:	af 8b       	std	Y+23, r26	; 0x17
    2874:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2876:	6d 89       	ldd	r22, Y+21	; 0x15
    2878:	7e 89       	ldd	r23, Y+22	; 0x16
    287a:	8f 89       	ldd	r24, Y+23	; 0x17
    287c:	98 8d       	ldd	r25, Y+24	; 0x18
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	2c f4       	brge	.+10     	; 0x2898 <LCD_sendCommand+0x24c>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9c 8b       	std	Y+20, r25	; 0x14
    2894:	8b 8b       	std	Y+19, r24	; 0x13
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2898:	6d 89       	ldd	r22, Y+21	; 0x15
    289a:	7e 89       	ldd	r23, Y+22	; 0x16
    289c:	8f 89       	ldd	r24, Y+23	; 0x17
    289e:	98 8d       	ldd	r25, Y+24	; 0x18
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	4c f5       	brge	.+82     	; 0x2902 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	69 8d       	ldd	r22, Y+25	; 0x19
    28b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9c 8b       	std	Y+20, r25	; 0x14
    28d6:	8b 8b       	std	Y+19, r24	; 0x13
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <LCD_sendCommand+0x2ac>
    28da:	89 e1       	ldi	r24, 0x19	; 25
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	89 8b       	std	Y+17, r24	; 0x11
    28e2:	89 89       	ldd	r24, Y+17	; 0x11
    28e4:	9a 89       	ldd	r25, Y+18	; 0x12
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_sendCommand+0x29a>
    28ea:	9a 8b       	std	Y+18, r25	; 0x12
    28ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	8b 89       	ldd	r24, Y+19	; 0x13
    28f0:	9c 89       	ldd	r25, Y+20	; 0x14
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	8b 89       	ldd	r24, Y+19	; 0x13
    28fa:	9c 89       	ldd	r25, Y+20	; 0x14
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f7       	brne	.-38     	; 0x28da <LCD_sendCommand+0x28e>
    2900:	14 c0       	rjmp	.+40     	; 0x292a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	6d 89       	ldd	r22, Y+21	; 0x15
    2904:	7e 89       	ldd	r23, Y+22	; 0x16
    2906:	8f 89       	ldd	r24, Y+23	; 0x17
    2908:	98 8d       	ldd	r25, Y+24	; 0x18
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9c 8b       	std	Y+20, r25	; 0x14
    2914:	8b 8b       	std	Y+19, r24	; 0x13
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f
    291e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2920:	98 89       	ldd	r25, Y+16	; 0x10
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_sendCommand+0x2d6>
    2926:	98 8b       	std	Y+16, r25	; 0x10
    2928:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	62 e0       	ldi	r22, 0x02	; 2
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <GPIO_writePin>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 e8       	ldi	r26, 0x80	; 128
    293a:	bf e3       	ldi	r27, 0x3F	; 63
    293c:	8b 87       	std	Y+11, r24	; 0x0b
    293e:	9c 87       	std	Y+12, r25	; 0x0c
    2940:	ad 87       	std	Y+13, r26	; 0x0d
    2942:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4a e7       	ldi	r20, 0x7A	; 122
    2952:	53 e4       	ldi	r21, 0x43	; 67
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8f 83       	std	Y+7, r24	; 0x07
    295e:	98 87       	std	Y+8, r25	; 0x08
    2960:	a9 87       	std	Y+9, r26	; 0x09
    2962:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <LCD_sendCommand+0x33a>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	3f c0       	rjmp	.+126    	; 0x2a04 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	78 85       	ldd	r23, Y+8	; 0x08
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	4c f5       	brge	.+82     	; 0x29f0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <LCD_sendCommand+0x39a>
    29c8:	89 e1       	ldi	r24, 0x19	; 25
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_sendCommand+0x388>
    29d8:	9c 83       	std	Y+4, r25	; 0x04
    29da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <LCD_sendCommand+0x37c>
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_sendCommand+0x3c4>
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a18:	e9 96       	adiw	r28, 0x39	; 57
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	e9 97       	sbiw	r28, 0x39	; 57
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	61 e0       	ldi	r22, 0x01	; 1
    2a44:	41 e0       	ldi	r20, 0x01	; 1
    2a46:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <GPIO_writePin>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e8       	ldi	r26, 0x80	; 128
    2a50:	bf e3       	ldi	r27, 0x3F	; 63
    2a52:	8d ab       	std	Y+53, r24	; 0x35
    2a54:	9e ab       	std	Y+54, r25	; 0x36
    2a56:	af ab       	std	Y+55, r26	; 0x37
    2a58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a60:	98 ad       	ldd	r25, Y+56	; 0x38
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a e7       	ldi	r20, 0x7A	; 122
    2a68:	53 e4       	ldi	r21, 0x43	; 67
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	89 ab       	std	Y+49, r24	; 0x31
    2a74:	9a ab       	std	Y+50, r25	; 0x32
    2a76:	ab ab       	std	Y+51, r26	; 0x33
    2a78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a80:	9c a9       	ldd	r25, Y+52	; 0x34
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	98 ab       	std	Y+48, r25	; 0x30
    2a98:	8f a7       	std	Y+47, r24	; 0x2f
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab8:	8f a9       	ldd	r24, Y+55	; 0x37
    2aba:	98 ad       	ldd	r25, Y+56	; 0x38
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_displayCharacter+0xd2>
    2ade:	89 e1       	ldi	r24, 0x19	; 25
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9e a7       	std	Y+46, r25	; 0x2e
    2ae4:	8d a7       	std	Y+45, r24	; 0x2d
    2ae6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_displayCharacter+0xc0>
    2aee:	9e a7       	std	Y+46, r25	; 0x2e
    2af0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	98 ab       	std	Y+48, r25	; 0x30
    2afa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afe:	98 a9       	ldd	r25, Y+48	; 0x30
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_displayCharacter+0xb4>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	69 a9       	ldd	r22, Y+49	; 0x31
    2b08:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	98 ab       	std	Y+48, r25	; 0x30
    2b18:	8f a7       	std	Y+47, r24	; 0x2f
    2b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1e:	9c a7       	std	Y+44, r25	; 0x2c
    2b20:	8b a7       	std	Y+43, r24	; 0x2b
    2b22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_displayCharacter+0xfc>
    2b2a:	9c a7       	std	Y+44, r25	; 0x2c
    2b2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	62 e0       	ldi	r22, 0x02	; 2
    2b32:	41 e0       	ldi	r20, 0x01	; 1
    2b34:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <GPIO_writePin>
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e8       	ldi	r26, 0x80	; 128
    2b3e:	bf e3       	ldi	r27, 0x3F	; 63
    2b40:	8f a3       	std	Y+39, r24	; 0x27
    2b42:	98 a7       	std	Y+40, r25	; 0x28
    2b44:	a9 a7       	std	Y+41, r26	; 0x29
    2b46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b48:	6f a1       	ldd	r22, Y+39	; 0x27
    2b4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	4a e7       	ldi	r20, 0x7A	; 122
    2b56:	53 e4       	ldi	r21, 0x43	; 67
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	8b a3       	std	Y+35, r24	; 0x23
    2b62:	9c a3       	std	Y+36, r25	; 0x24
    2b64:	ad a3       	std	Y+37, r26	; 0x25
    2b66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b68:	6b a1       	ldd	r22, Y+35	; 0x23
    2b6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e8       	ldi	r20, 0x80	; 128
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7c:	88 23       	and	r24, r24
    2b7e:	2c f4       	brge	.+10     	; 0x2b8a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9a a3       	std	Y+34, r25	; 0x22
    2b86:	89 a3       	std	Y+33, r24	; 0x21
    2b88:	3f c0       	rjmp	.+126    	; 0x2c08 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2b8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b90:	9e a1       	ldd	r25, Y+38	; 0x26
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	3f ef       	ldi	r19, 0xFF	; 255
    2b96:	4f e7       	ldi	r20, 0x7F	; 127
    2b98:	57 e4       	ldi	r21, 0x47	; 71
    2b9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9e:	18 16       	cp	r1, r24
    2ba0:	4c f5       	brge	.+82     	; 0x2bf4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e2       	ldi	r20, 0x20	; 32
    2bb0:	51 e4       	ldi	r21, 0x41	; 65
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9a a3       	std	Y+34, r25	; 0x22
    2bc8:	89 a3       	std	Y+33, r24	; 0x21
    2bca:	0f c0       	rjmp	.+30     	; 0x2bea <LCD_displayCharacter+0x1c0>
    2bcc:	89 e1       	ldi	r24, 0x19	; 25
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	98 a3       	std	Y+32, r25	; 0x20
    2bd2:	8f 8f       	std	Y+31, r24	; 0x1f
    2bd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd6:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <LCD_displayCharacter+0x1ae>
    2bdc:	98 a3       	std	Y+32, r25	; 0x20
    2bde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be0:	89 a1       	ldd	r24, Y+33	; 0x21
    2be2:	9a a1       	ldd	r25, Y+34	; 0x22
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	9a a3       	std	Y+34, r25	; 0x22
    2be8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bea:	89 a1       	ldd	r24, Y+33	; 0x21
    2bec:	9a a1       	ldd	r25, Y+34	; 0x22
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	69 f7       	brne	.-38     	; 0x2bcc <LCD_displayCharacter+0x1a2>
    2bf2:	14 c0       	rjmp	.+40     	; 0x2c1c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bfa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9a a3       	std	Y+34, r25	; 0x22
    2c06:	89 a3       	std	Y+33, r24	; 0x21
    2c08:	89 a1       	ldd	r24, Y+33	; 0x21
    2c0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_displayCharacter+0x1ea>
    2c18:	9e 8f       	std	Y+30, r25	; 0x1e
    2c1a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	69 ad       	ldd	r22, Y+57	; 0x39
    2c20:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GPIO_writePort>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a0 e8       	ldi	r26, 0x80	; 128
    2c2a:	bf e3       	ldi	r27, 0x3F	; 63
    2c2c:	89 8f       	std	Y+25, r24	; 0x19
    2c2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c30:	ab 8f       	std	Y+27, r26	; 0x1b
    2c32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	69 8d       	ldd	r22, Y+25	; 0x19
    2c36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a e7       	ldi	r20, 0x7A	; 122
    2c42:	53 e4       	ldi	r21, 0x43	; 67
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	8d 8b       	std	Y+21, r24	; 0x15
    2c4e:	9e 8b       	std	Y+22, r25	; 0x16
    2c50:	af 8b       	std	Y+23, r26	; 0x17
    2c52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c54:	6d 89       	ldd	r22, Y+21	; 0x15
    2c56:	7e 89       	ldd	r23, Y+22	; 0x16
    2c58:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9c 8b       	std	Y+20, r25	; 0x14
    2c72:	8b 8b       	std	Y+19, r24	; 0x13
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2c76:	6d 89       	ldd	r22, Y+21	; 0x15
    2c78:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	9c 8b       	std	Y+20, r25	; 0x14
    2cb4:	8b 8b       	std	Y+19, r24	; 0x13
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <LCD_displayCharacter+0x2ac>
    2cb8:	89 e1       	ldi	r24, 0x19	; 25
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9a 8b       	std	Y+18, r25	; 0x12
    2cbe:	89 8b       	std	Y+17, r24	; 0x11
    2cc0:	89 89       	ldd	r24, Y+17	; 0x11
    2cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <LCD_displayCharacter+0x29a>
    2cc8:	9a 8b       	std	Y+18, r25	; 0x12
    2cca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9c 8b       	std	Y+20, r25	; 0x14
    2cd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <LCD_displayCharacter+0x28e>
    2cde:	14 c0       	rjmp	.+40     	; 0x2d08 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9c 8b       	std	Y+20, r25	; 0x14
    2cf2:	8b 8b       	std	Y+19, r24	; 0x13
    2cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf8:	98 8b       	std	Y+16, r25	; 0x10
    2cfa:	8f 87       	std	Y+15, r24	; 0x0f
    2cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfe:	98 89       	ldd	r25, Y+16	; 0x10
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_displayCharacter+0x2d6>
    2d04:	98 8b       	std	Y+16, r25	; 0x10
    2d06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	62 e0       	ldi	r22, 0x02	; 2
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <GPIO_writePin>
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 e8       	ldi	r26, 0x80	; 128
    2d18:	bf e3       	ldi	r27, 0x3F	; 63
    2d1a:	8b 87       	std	Y+11, r24	; 0x0b
    2d1c:	9c 87       	std	Y+12, r25	; 0x0c
    2d1e:	ad 87       	std	Y+13, r26	; 0x0d
    2d20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	4a e7       	ldi	r20, 0x7A	; 122
    2d30:	53 e4       	ldi	r21, 0x43	; 67
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	8f 83       	std	Y+7, r24	; 0x07
    2d3c:	98 87       	std	Y+8, r25	; 0x08
    2d3e:	a9 87       	std	Y+9, r26	; 0x09
    2d40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d42:	6f 81       	ldd	r22, Y+7	; 0x07
    2d44:	78 85       	ldd	r23, Y+8	; 0x08
    2d46:	89 85       	ldd	r24, Y+9	; 0x09
    2d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e8       	ldi	r20, 0x80	; 128
    2d50:	5f e3       	ldi	r21, 0x3F	; 63
    2d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d56:	88 23       	and	r24, r24
    2d58:	2c f4       	brge	.+10     	; 0x2d64 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	3f c0       	rjmp	.+126    	; 0x2de2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2d64:	6f 81       	ldd	r22, Y+7	; 0x07
    2d66:	78 85       	ldd	r23, Y+8	; 0x08
    2d68:	89 85       	ldd	r24, Y+9	; 0x09
    2d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	3f ef       	ldi	r19, 0xFF	; 255
    2d70:	4f e7       	ldi	r20, 0x7F	; 127
    2d72:	57 e4       	ldi	r21, 0x47	; 71
    2d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d78:	18 16       	cp	r1, r24
    2d7a:	4c f5       	brge	.+82     	; 0x2dce <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	40 e2       	ldi	r20, 0x20	; 32
    2d8a:	51 e4       	ldi	r21, 0x41	; 65
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	0f c0       	rjmp	.+30     	; 0x2dc4 <LCD_displayCharacter+0x39a>
    2da6:	89 e1       	ldi	r24, 0x19	; 25
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	8b 83       	std	Y+3, r24	; 0x03
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <LCD_displayCharacter+0x388>
    2db6:	9c 83       	std	Y+4, r25	; 0x04
    2db8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	69 f7       	brne	.-38     	; 0x2da6 <LCD_displayCharacter+0x37c>
    2dcc:	14 c0       	rjmp	.+40     	; 0x2df6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dce:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd0:	78 85       	ldd	r23, Y+8	; 0x08
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <LCD_displayCharacter+0x3c4>
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2df6:	e9 96       	adiw	r28, 0x39	; 57
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <LCD_displayString+0x6>
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	9b 83       	std	Y+3, r25	; 0x03
    2e16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e18:	19 82       	std	Y+1, r1	; 0x01
    2e1a:	0e c0       	rjmp	.+28     	; 0x2e38 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	9b 81       	ldd	r25, Y+3	; 0x03
    2e26:	fc 01       	movw	r30, r24
    2e28:	e2 0f       	add	r30, r18
    2e2a:	f3 1f       	adc	r31, r19
    2e2c:	80 81       	ld	r24, Z
    2e2e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <LCD_displayCharacter>
		i++;
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	8f 5f       	subi	r24, 0xFF	; 255
    2e36:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	9b 81       	ldd	r25, Y+3	; 0x03
    2e42:	fc 01       	movw	r30, r24
    2e44:	e2 0f       	add	r30, r18
    2e46:	f3 1f       	adc	r31, r19
    2e48:	80 81       	ld	r24, Z
    2e4a:	88 23       	and	r24, r24
    2e4c:	39 f7       	brne	.-50     	; 0x2e1c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <LCD_moveCursor+0x6>
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <LCD_moveCursor+0x8>
    2e62:	0f 92       	push	r0
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	3d 83       	std	Y+5, r19	; 0x05
    2e74:	2c 83       	std	Y+4, r18	; 0x04
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	c1 f0       	breq	.+48     	; 0x2eb0 <LCD_moveCursor+0x56>
    2e80:	2c 81       	ldd	r18, Y+4	; 0x04
    2e82:	3d 81       	ldd	r19, Y+5	; 0x05
    2e84:	22 30       	cpi	r18, 0x02	; 2
    2e86:	31 05       	cpc	r19, r1
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <LCD_moveCursor+0x3a>
    2e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	61 f0       	breq	.+24     	; 0x2eaa <LCD_moveCursor+0x50>
    2e92:	19 c0       	rjmp	.+50     	; 0x2ec6 <LCD_moveCursor+0x6c>
    2e94:	2c 81       	ldd	r18, Y+4	; 0x04
    2e96:	3d 81       	ldd	r19, Y+5	; 0x05
    2e98:	22 30       	cpi	r18, 0x02	; 2
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	69 f0       	breq	.+26     	; 0x2eb8 <LCD_moveCursor+0x5e>
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea2:	83 30       	cpi	r24, 0x03	; 3
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	61 f0       	breq	.+24     	; 0x2ec0 <LCD_moveCursor+0x66>
    2ea8:	0e c0       	rjmp	.+28     	; 0x2ec6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	0b c0       	rjmp	.+22     	; 0x2ec6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	80 5c       	subi	r24, 0xC0	; 192
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	07 c0       	rjmp	.+14     	; 0x2ec6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	80 5f       	subi	r24, 0xF0	; 240
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	80 5b       	subi	r24, 0xB0	; 176
    2ec4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	80 68       	ori	r24, 0x80	; 128
    2eca:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_sendCommand>
}
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	00 d0       	rcall	.+0      	; 0x2ee4 <LCD_displayStringRowColumn+0x6>
    2ee4:	00 d0       	rcall	.+0      	; 0x2ee6 <LCD_displayStringRowColumn+0x8>
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	6a 83       	std	Y+2, r22	; 0x02
    2eee:	5c 83       	std	Y+4, r21	; 0x04
    2ef0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	6a 81       	ldd	r22, Y+2	; 0x02
    2ef6:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	62 97       	sbiw	r28, 0x12	; 18
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	cd bf       	out	0x3d, r28	; 61
    2f24:	9a 8b       	std	Y+18, r25	; 0x12
    2f26:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f28:	89 89       	ldd	r24, Y+17	; 0x11
    2f2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f2c:	9e 01       	movw	r18, r28
    2f2e:	2f 5f       	subi	r18, 0xFF	; 255
    2f30:	3f 4f       	sbci	r19, 0xFF	; 255
    2f32:	b9 01       	movw	r22, r18
    2f34:	4a e0       	ldi	r20, 0x0A	; 10
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	0e 94 27 19 	call	0x324e	; 0x324e <itoa>
   LCD_displayString(buff); /* Display the string */
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_displayString>
}
    2f44:	62 96       	adiw	r28, 0x12	; 18
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_sendCommand>
}
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_ptr)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <UART_init+0x6>
    2f70:	00 d0       	rcall	.+0      	; 0x2f72 <UART_init+0x8>
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	9c 83       	std	Y+4, r25	; 0x04
    2f78:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f7a:	1a 82       	std	Y+2, r1	; 0x02
    2f7c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f7e:	eb e2       	ldi	r30, 0x2B	; 43
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	82 e0       	ldi	r24, 0x02	; 2
    2f84:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f86:	ea e2       	ldi	r30, 0x2A	; 42
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	88 e1       	ldi	r24, 0x18	; 24
    2f8c:	80 83       	st	Z, r24
	 * insert the parity bit from the structure by using pointer to structure
	 * insert the number of stop bits from the structure by using pointer to structure
	 * insert the number of data bits from the structure by using pointer to structure
	 * insert the value of bit rate using the pointer to structure also
	 ***********************************************************************/
	UCSRC = 0 ;
    2f8e:	e0 e4       	ldi	r30, 0x40	; 64
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	10 82       	st	Z, r1
	UCSRC |= (1<<URSEL);
    2f94:	a0 e4       	ldi	r26, 0x40	; 64
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e0 e4       	ldi	r30, 0x40	; 64
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	80 68       	ori	r24, 0x80	; 128
    2fa0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_ptr->parity)<<4);
    2fa2:	a0 e4       	ldi	r26, 0x40	; 64
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e0 e4       	ldi	r30, 0x40	; 64
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	28 2f       	mov	r18, r24
    2fae:	2f 7c       	andi	r18, 0xCF	; 207
    2fb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	82 95       	swap	r24
    2fbc:	92 95       	swap	r25
    2fbe:	90 7f       	andi	r25, 0xF0	; 240
    2fc0:	98 27       	eor	r25, r24
    2fc2:	80 7f       	andi	r24, 0xF0	; 240
    2fc4:	98 27       	eor	r25, r24
    2fc6:	82 2b       	or	r24, r18
    2fc8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_ptr->stopBits)<<3);
    2fca:	a0 e4       	ldi	r26, 0x40	; 64
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e0 e4       	ldi	r30, 0x40	; 64
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	27 7f       	andi	r18, 0xF7	; 247
    2fd8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fda:	fc 81       	ldd	r31, Y+4	; 0x04
    2fdc:	81 81       	ldd	r24, Z+1	; 0x01
    2fde:	88 2f       	mov	r24, r24
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	82 2b       	or	r24, r18
    2ff0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_ptr->dataBits)<<1);
    2ff2:	a0 e4       	ldi	r26, 0x40	; 64
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e0 e4       	ldi	r30, 0x40	; 64
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	29 7f       	andi	r18, 0xF9	; 249
    3000:	eb 81       	ldd	r30, Y+3	; 0x03
    3002:	fc 81       	ldd	r31, Y+4	; 0x04
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	88 2f       	mov	r24, r24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	82 2b       	or	r24, r18
    3010:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_ptr->baudtRate) * 8UL))) - 1);
    3012:	eb 81       	ldd	r30, Y+3	; 0x03
    3014:	fc 81       	ldd	r31, Y+4	; 0x04
    3016:	83 81       	ldd	r24, Z+3	; 0x03
    3018:	94 81       	ldd	r25, Z+4	; 0x04
    301a:	a5 81       	ldd	r26, Z+5	; 0x05
    301c:	b6 81       	ldd	r27, Z+6	; 0x06
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	aa 1f       	adc	r26, r26
    3024:	bb 1f       	adc	r27, r27
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	aa 1f       	adc	r26, r26
    302c:	bb 1f       	adc	r27, r27
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	aa 1f       	adc	r26, r26
    3034:	bb 1f       	adc	r27, r27
    3036:	9c 01       	movw	r18, r24
    3038:	ad 01       	movw	r20, r26
    303a:	80 e4       	ldi	r24, 0x40	; 64
    303c:	92 e4       	ldi	r25, 0x42	; 66
    303e:	af e0       	ldi	r26, 0x0F	; 15
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodsi4>
    304a:	da 01       	movw	r26, r20
    304c:	c9 01       	movw	r24, r18
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9a 83       	std	Y+2, r25	; 0x02
    3052:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3054:	e0 e4       	ldi	r30, 0x40	; 64
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	9a 81       	ldd	r25, Y+2	; 0x02
    305c:	89 2f       	mov	r24, r25
    305e:	99 27       	eor	r25, r25
    3060:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3062:	e9 e2       	ldi	r30, 0x29	; 41
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	80 83       	st	Z, r24
}
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	0f 92       	push	r0
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3084:	eb e2       	ldi	r30, 0x2B	; 43
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	88 2f       	mov	r24, r24
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	80 72       	andi	r24, 0x20	; 32
    3090:	90 70       	andi	r25, 0x00	; 0
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	b9 f3       	breq	.-18     	; 0x3084 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3096:	ec e2       	ldi	r30, 0x2C	; 44
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    309e:	0f 90       	pop	r0
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    30ae:	eb e2       	ldi	r30, 0x2B	; 43
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	88 23       	and	r24, r24
    30b6:	dc f7       	brge	.-10     	; 0x30ae <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    30b8:	ec e2       	ldi	r30, 0x2C	; 44
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
}
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	08 95       	ret

000030c4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	00 d0       	rcall	.+0      	; 0x30ca <UART_sendString+0x6>
    30ca:	0f 92       	push	r0
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	9b 83       	std	Y+3, r25	; 0x03
    30d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30d4:	19 82       	std	Y+1, r1	; 0x01
    30d6:	0e c0       	rjmp	.+28     	; 0x30f4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	28 2f       	mov	r18, r24
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	fc 01       	movw	r30, r24
    30e4:	e2 0f       	add	r30, r18
    30e6:	f3 1f       	adc	r31, r19
    30e8:	80 81       	ld	r24, Z
    30ea:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_sendByte>
		i++;
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	8f 5f       	subi	r24, 0xFF	; 255
    30f2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	9b 81       	ldd	r25, Y+3	; 0x03
    30fe:	fc 01       	movw	r30, r24
    3100:	e2 0f       	add	r30, r18
    3102:	f3 1f       	adc	r31, r19
    3104:	80 81       	ld	r24, Z
    3106:	88 23       	and	r24, r24
    3108:	39 f7       	brne	.-50     	; 0x30d8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	df 93       	push	r29
    311c:	cf 93       	push	r28
    311e:	00 d0       	rcall	.+0      	; 0x3120 <UART_receiveString+0xa>
    3120:	0f 92       	push	r0
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	9b 83       	std	Y+3, r25	; 0x03
    3128:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    312a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	8c 01       	movw	r16, r24
    3138:	02 0f       	add	r16, r18
    313a:	13 1f       	adc	r17, r19
    313c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
    3140:	f8 01       	movw	r30, r16
    3142:	80 83       	st	Z, r24
    3144:	0f c0       	rjmp	.+30     	; 0x3164 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	8f 5f       	subi	r24, 0xFF	; 255
    314a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	8c 01       	movw	r16, r24
    3158:	02 0f       	add	r16, r18
    315a:	13 1f       	adc	r17, r19
    315c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <UART_recieveByte>
    3160:	f8 01       	movw	r30, r16
    3162:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	9b 81       	ldd	r25, Y+3	; 0x03
    316e:	fc 01       	movw	r30, r24
    3170:	e2 0f       	add	r30, r18
    3172:	f3 1f       	adc	r31, r19
    3174:	80 81       	ld	r24, Z
    3176:	83 32       	cpi	r24, 0x23	; 35
    3178:	31 f7       	brne	.-52     	; 0x3146 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	9b 81       	ldd	r25, Y+3	; 0x03
    3184:	fc 01       	movw	r30, r24
    3186:	e2 0f       	add	r30, r18
    3188:	f3 1f       	adc	r31, r19
    318a:	10 82       	st	Z, r1
}
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	08 95       	ret

0000319c <__udivmodsi4>:
    319c:	a1 e2       	ldi	r26, 0x21	; 33
    319e:	1a 2e       	mov	r1, r26
    31a0:	aa 1b       	sub	r26, r26
    31a2:	bb 1b       	sub	r27, r27
    31a4:	fd 01       	movw	r30, r26
    31a6:	0d c0       	rjmp	.+26     	; 0x31c2 <__udivmodsi4_ep>

000031a8 <__udivmodsi4_loop>:
    31a8:	aa 1f       	adc	r26, r26
    31aa:	bb 1f       	adc	r27, r27
    31ac:	ee 1f       	adc	r30, r30
    31ae:	ff 1f       	adc	r31, r31
    31b0:	a2 17       	cp	r26, r18
    31b2:	b3 07       	cpc	r27, r19
    31b4:	e4 07       	cpc	r30, r20
    31b6:	f5 07       	cpc	r31, r21
    31b8:	20 f0       	brcs	.+8      	; 0x31c2 <__udivmodsi4_ep>
    31ba:	a2 1b       	sub	r26, r18
    31bc:	b3 0b       	sbc	r27, r19
    31be:	e4 0b       	sbc	r30, r20
    31c0:	f5 0b       	sbc	r31, r21

000031c2 <__udivmodsi4_ep>:
    31c2:	66 1f       	adc	r22, r22
    31c4:	77 1f       	adc	r23, r23
    31c6:	88 1f       	adc	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	1a 94       	dec	r1
    31cc:	69 f7       	brne	.-38     	; 0x31a8 <__udivmodsi4_loop>
    31ce:	60 95       	com	r22
    31d0:	70 95       	com	r23
    31d2:	80 95       	com	r24
    31d4:	90 95       	com	r25
    31d6:	9b 01       	movw	r18, r22
    31d8:	ac 01       	movw	r20, r24
    31da:	bd 01       	movw	r22, r26
    31dc:	cf 01       	movw	r24, r30
    31de:	08 95       	ret

000031e0 <__prologue_saves__>:
    31e0:	2f 92       	push	r2
    31e2:	3f 92       	push	r3
    31e4:	4f 92       	push	r4
    31e6:	5f 92       	push	r5
    31e8:	6f 92       	push	r6
    31ea:	7f 92       	push	r7
    31ec:	8f 92       	push	r8
    31ee:	9f 92       	push	r9
    31f0:	af 92       	push	r10
    31f2:	bf 92       	push	r11
    31f4:	cf 92       	push	r12
    31f6:	df 92       	push	r13
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	ca 1b       	sub	r28, r26
    320a:	db 0b       	sbc	r29, r27
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	09 94       	ijmp

00003218 <__epilogue_restores__>:
    3218:	2a 88       	ldd	r2, Y+18	; 0x12
    321a:	39 88       	ldd	r3, Y+17	; 0x11
    321c:	48 88       	ldd	r4, Y+16	; 0x10
    321e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3220:	6e 84       	ldd	r6, Y+14	; 0x0e
    3222:	7d 84       	ldd	r7, Y+13	; 0x0d
    3224:	8c 84       	ldd	r8, Y+12	; 0x0c
    3226:	9b 84       	ldd	r9, Y+11	; 0x0b
    3228:	aa 84       	ldd	r10, Y+10	; 0x0a
    322a:	b9 84       	ldd	r11, Y+9	; 0x09
    322c:	c8 84       	ldd	r12, Y+8	; 0x08
    322e:	df 80       	ldd	r13, Y+7	; 0x07
    3230:	ee 80       	ldd	r14, Y+6	; 0x06
    3232:	fd 80       	ldd	r15, Y+5	; 0x05
    3234:	0c 81       	ldd	r16, Y+4	; 0x04
    3236:	1b 81       	ldd	r17, Y+3	; 0x03
    3238:	aa 81       	ldd	r26, Y+2	; 0x02
    323a:	b9 81       	ldd	r27, Y+1	; 0x01
    323c:	ce 0f       	add	r28, r30
    323e:	d1 1d       	adc	r29, r1
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	ed 01       	movw	r28, r26
    324c:	08 95       	ret

0000324e <itoa>:
    324e:	fb 01       	movw	r30, r22
    3250:	9f 01       	movw	r18, r30
    3252:	e8 94       	clt
    3254:	42 30       	cpi	r20, 0x02	; 2
    3256:	c4 f0       	brlt	.+48     	; 0x3288 <itoa+0x3a>
    3258:	45 32       	cpi	r20, 0x25	; 37
    325a:	b4 f4       	brge	.+44     	; 0x3288 <itoa+0x3a>
    325c:	4a 30       	cpi	r20, 0x0A	; 10
    325e:	29 f4       	brne	.+10     	; 0x326a <itoa+0x1c>
    3260:	97 fb       	bst	r25, 7
    3262:	1e f4       	brtc	.+6      	; 0x326a <itoa+0x1c>
    3264:	90 95       	com	r25
    3266:	81 95       	neg	r24
    3268:	9f 4f       	sbci	r25, 0xFF	; 255
    326a:	64 2f       	mov	r22, r20
    326c:	77 27       	eor	r23, r23
    326e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__udivmodhi4>
    3272:	80 5d       	subi	r24, 0xD0	; 208
    3274:	8a 33       	cpi	r24, 0x3A	; 58
    3276:	0c f0       	brlt	.+2      	; 0x327a <itoa+0x2c>
    3278:	89 5d       	subi	r24, 0xD9	; 217
    327a:	81 93       	st	Z+, r24
    327c:	cb 01       	movw	r24, r22
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	a1 f7       	brne	.-24     	; 0x326a <itoa+0x1c>
    3282:	16 f4       	brtc	.+4      	; 0x3288 <itoa+0x3a>
    3284:	5d e2       	ldi	r21, 0x2D	; 45
    3286:	51 93       	st	Z+, r21
    3288:	10 82       	st	Z, r1
    328a:	c9 01       	movw	r24, r18
    328c:	0c 94 48 19 	jmp	0x3290	; 0x3290 <strrev>

00003290 <strrev>:
    3290:	dc 01       	movw	r26, r24
    3292:	fc 01       	movw	r30, r24
    3294:	67 2f       	mov	r22, r23
    3296:	71 91       	ld	r23, Z+
    3298:	77 23       	and	r23, r23
    329a:	e1 f7       	brne	.-8      	; 0x3294 <strrev+0x4>
    329c:	32 97       	sbiw	r30, 0x02	; 2
    329e:	04 c0       	rjmp	.+8      	; 0x32a8 <strrev+0x18>
    32a0:	7c 91       	ld	r23, X
    32a2:	6d 93       	st	X+, r22
    32a4:	70 83       	st	Z, r23
    32a6:	62 91       	ld	r22, -Z
    32a8:	ae 17       	cp	r26, r30
    32aa:	bf 07       	cpc	r27, r31
    32ac:	c8 f3       	brcs	.-14     	; 0x32a0 <strrev+0x10>
    32ae:	08 95       	ret

000032b0 <__udivmodhi4>:
    32b0:	aa 1b       	sub	r26, r26
    32b2:	bb 1b       	sub	r27, r27
    32b4:	51 e1       	ldi	r21, 0x11	; 17
    32b6:	07 c0       	rjmp	.+14     	; 0x32c6 <__udivmodhi4_ep>

000032b8 <__udivmodhi4_loop>:
    32b8:	aa 1f       	adc	r26, r26
    32ba:	bb 1f       	adc	r27, r27
    32bc:	a6 17       	cp	r26, r22
    32be:	b7 07       	cpc	r27, r23
    32c0:	10 f0       	brcs	.+4      	; 0x32c6 <__udivmodhi4_ep>
    32c2:	a6 1b       	sub	r26, r22
    32c4:	b7 0b       	sbc	r27, r23

000032c6 <__udivmodhi4_ep>:
    32c6:	88 1f       	adc	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	5a 95       	dec	r21
    32cc:	a9 f7       	brne	.-22     	; 0x32b8 <__udivmodhi4_loop>
    32ce:	80 95       	com	r24
    32d0:	90 95       	com	r25
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	08 95       	ret

000032d8 <_exit>:
    32d8:	f8 94       	cli

000032da <__stop_program>:
    32da:	ff cf       	rjmp	.-2      	; 0x32da <__stop_program>

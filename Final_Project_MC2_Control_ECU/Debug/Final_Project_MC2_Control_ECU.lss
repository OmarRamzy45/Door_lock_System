
Final_Project_MC2_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000025a2  00002636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080007a  0080007a  00002650  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00002650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001496  00000000  00000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000062a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000063e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006556  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000819f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000908a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_4>
      14:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_9>
      28:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_10>
      2c:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 06 	call	0xc4e	; 0xc4e <main>
      8a:	0c 94 cf 12 	jmp	0x259e	; 0x259e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
#include "Buzzer.h"
#include "gpio.h"
#include "std_types.h"

/* Function to initialize the buzzer pins and make it's first state is off*/
void Buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER__PIN_ID,PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER__PIN_ID,LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

/* Function to set the buzzer on*/
void Buzzer_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID,BUZZER__PIN_ID,LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	63 e0       	ldi	r22, 0x03	; 3
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

/* Function to set the buzzer off*/
void Buzzer_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID,BUZZER__PIN_ID,LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_init>:
#include "std_types.h"

/*
 * Function to setup the direction of the two pins of the motor and to be initialized at stop mode
 */
void DcMotor_init(void){
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Initialize the motors pins as output pins
	 */
	GPIO_setupPinDirection(MOTOR_INPUT1_PORT_ID,MOTOR_INPUT1_PIN_ID,PIN_OUTPUT);
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	65 e0       	ldi	r22, 0x05	; 5
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_INPUT2_PORT_ID,MOTOR_INPUT2_PIN_ID,PIN_OUTPUT);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	66 e0       	ldi	r22, 0x06	; 6
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>

	/*
	* Initialize the motor state to be at stop mode at the beginning
	*/
	GPIO_writePin(MOTOR_INPUT1_PORT_ID,MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	65 e0       	ldi	r22, 0x05	; 5
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
	GPIO_writePin(MOTOR_INPUT2_PORT_ID,MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	66 e0       	ldi	r22, 0x06	; 6
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>

}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:
/*
 * Function is responsible for rotate the motor CW/ACW/STOP based on the state input
 * also send the required duty cycle for the PWM based on the required speed input
 * */

void DcMotor_Rotate(DcMotor_State state){
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01

	switch(state) {
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	3b 83       	std	Y+3, r19	; 0x03
     be4:	2a 83       	std	Y+2, r18	; 0x02
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	9b 81       	ldd	r25, Y+3	; 0x03
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	91 05       	cpc	r25, r1
     bee:	a1 f0       	breq	.+40     	; 0xc18 <DcMotor_Rotate+0x4a>
     bf0:	2a 81       	ldd	r18, Y+2	; 0x02
     bf2:	3b 81       	ldd	r19, Y+3	; 0x03
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	d1 f0       	breq	.+52     	; 0xc2e <DcMotor_Rotate+0x60>
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	01 f5       	brne	.+64     	; 0xc42 <DcMotor_Rotate+0x74>
	case STOP :
		GPIO_writePin(MOTOR_INPUT1_PORT_ID,MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	65 e0       	ldi	r22, 0x05	; 5
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
		GPIO_writePin(MOTOR_INPUT2_PORT_ID,MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	66 e0       	ldi	r22, 0x06	; 6
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
     c16:	15 c0       	rjmp	.+42     	; 0xc42 <DcMotor_Rotate+0x74>
		break;
	case CW :
		GPIO_writePin(MOTOR_INPUT1_PORT_ID,MOTOR_INPUT1_PIN_ID,LOGIC_HIGH);
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	65 e0       	ldi	r22, 0x05	; 5
     c1c:	41 e0       	ldi	r20, 0x01	; 1
     c1e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
		GPIO_writePin(MOTOR_INPUT2_PORT_ID,MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	66 e0       	ldi	r22, 0x06	; 6
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
     c2c:	0a c0       	rjmp	.+20     	; 0xc42 <DcMotor_Rotate+0x74>
		break;
	case ACW :
		GPIO_writePin(MOTOR_INPUT1_PORT_ID,MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	65 e0       	ldi	r22, 0x05	; 5
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
		GPIO_writePin(MOTOR_INPUT2_PORT_ID,MOTOR_INPUT2_PIN_ID,LOGIC_HIGH);
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	66 e0       	ldi	r22, 0x06	; 6
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
	}




}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <main>:
uint8 wrongPassTrials = 0;
uint8 g_seconds = 0;
uint8 recievedPass[PASS_SIZE];
uint8 storePass[PASS_SIZE];

int main(void) {
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	e3 97       	sbiw	r28, 0x33	; 51
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61

	uint8 i;

	SREG |= (1 << SREG_I); /*enable global interrupts */
     c66:	af e5       	ldi	r26, 0x5F	; 95
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ef e5       	ldi	r30, 0x5F	; 95
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	8c 93       	st	X, r24

	/*
	 * initialization of UART frame struct configuration to communicate with the other MC
	 * NO-Parity , one stop bit , 1-byte ( 8 bits ) word length and 9600 Baud rate
	 * */
	UART_ConfigType uart_config = { PARITY_DISABLED, OneStopBit, DataBits_8,9600 };
     c74:	9e 01       	movw	r18, r28
     c76:	2f 5e       	subi	r18, 0xEF	; 239
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	3e a3       	std	Y+38, r19	; 0x26
     c7c:	2d a3       	std	Y+37, r18	; 0x25
     c7e:	83 e7       	ldi	r24, 0x73	; 115
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	98 a7       	std	Y+40, r25	; 0x28
     c84:	8f a3       	std	Y+39, r24	; 0x27
     c86:	97 e0       	ldi	r25, 0x07	; 7
     c88:	99 a7       	std	Y+41, r25	; 0x29
     c8a:	ef a1       	ldd	r30, Y+39	; 0x27
     c8c:	f8 a5       	ldd	r31, Y+40	; 0x28
     c8e:	00 80       	ld	r0, Z
     c90:	2f a1       	ldd	r18, Y+39	; 0x27
     c92:	38 a5       	ldd	r19, Y+40	; 0x28
     c94:	2f 5f       	subi	r18, 0xFF	; 255
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	38 a7       	std	Y+40, r19	; 0x28
     c9a:	2f a3       	std	Y+39, r18	; 0x27
     c9c:	ed a1       	ldd	r30, Y+37	; 0x25
     c9e:	fe a1       	ldd	r31, Y+38	; 0x26
     ca0:	00 82       	st	Z, r0
     ca2:	2d a1       	ldd	r18, Y+37	; 0x25
     ca4:	3e a1       	ldd	r19, Y+38	; 0x26
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	3e a3       	std	Y+38, r19	; 0x26
     cac:	2d a3       	std	Y+37, r18	; 0x25
     cae:	39 a5       	ldd	r19, Y+41	; 0x29
     cb0:	31 50       	subi	r19, 0x01	; 1
     cb2:	39 a7       	std	Y+41, r19	; 0x29
     cb4:	89 a5       	ldd	r24, Y+41	; 0x29
     cb6:	88 23       	and	r24, r24
     cb8:	41 f7       	brne	.-48     	; 0xc8a <main+0x3c>
	UART_init(&uart_config);
     cba:	ce 01       	movw	r24, r28
     cbc:	41 96       	adiw	r24, 0x11	; 17
     cbe:	0e 94 5d 11 	call	0x22ba	; 0x22ba <UART_init>
	 * use the prescaler as 1024 , initialize the value of prescaler2 to DONT Care as we don't use it
	 * set the initial value of the timer to 0 and compare value to 977 as we need the timer to raise flag
	 * each 1 sec , Timer freq = 8MHz/1024, one clock-cycle time = 128 MSecond
	 * so to force the timer to produce an interrupt every 1 second
	 we set the compare value to be 1/(128M) = 7813 */
	Timer_ConfigType timer1_config = { Timer1, 0, 7813, COMPARE_MODE, DONT_CARE,PRESCALER_1024 };
     cc2:	fe 01       	movw	r30, r28
     cc4:	78 96       	adiw	r30, 0x18	; 24
     cc6:	fb a7       	std	Y+43, r31	; 0x2b
     cc8:	ea a7       	std	Y+42, r30	; 0x2a
     cca:	2b e6       	ldi	r18, 0x6B	; 107
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3d a7       	std	Y+45, r19	; 0x2d
     cd0:	2c a7       	std	Y+44, r18	; 0x2c
     cd2:	38 e0       	ldi	r19, 0x08	; 8
     cd4:	3e a7       	std	Y+46, r19	; 0x2e
     cd6:	ec a5       	ldd	r30, Y+44	; 0x2c
     cd8:	fd a5       	ldd	r31, Y+45	; 0x2d
     cda:	00 80       	ld	r0, Z
     cdc:	2c a5       	ldd	r18, Y+44	; 0x2c
     cde:	3d a5       	ldd	r19, Y+45	; 0x2d
     ce0:	2f 5f       	subi	r18, 0xFF	; 255
     ce2:	3f 4f       	sbci	r19, 0xFF	; 255
     ce4:	3d a7       	std	Y+45, r19	; 0x2d
     ce6:	2c a7       	std	Y+44, r18	; 0x2c
     ce8:	ea a5       	ldd	r30, Y+42	; 0x2a
     cea:	fb a5       	ldd	r31, Y+43	; 0x2b
     cec:	00 82       	st	Z, r0
     cee:	2a a5       	ldd	r18, Y+42	; 0x2a
     cf0:	3b a5       	ldd	r19, Y+43	; 0x2b
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	3b a7       	std	Y+43, r19	; 0x2b
     cf8:	2a a7       	std	Y+42, r18	; 0x2a
     cfa:	3e a5       	ldd	r19, Y+46	; 0x2e
     cfc:	31 50       	subi	r19, 0x01	; 1
     cfe:	3e a7       	std	Y+46, r19	; 0x2e
     d00:	8e a5       	ldd	r24, Y+46	; 0x2e
     d02:	88 23       	and	r24, r24
     d04:	41 f7       	brne	.-48     	; 0xcd6 <main+0x88>
	Timer_init(&timer1_config);
     d06:	ce 01       	movw	r24, r28
     d08:	48 96       	adiw	r24, 0x18	; 24
     d0a:	0e 94 45 0b 	call	0x168a	; 0x168a <Timer_init>
	Timer_setCallBack(timer1HandlerCallBack, Timer1);
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	9a e0       	ldi	r25, 0x0A	; 10
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 c2 0c 	call	0x1984	; 0x1984 <Timer_setCallBack>

	/*initialize I2C driver */
	TWI_ConfigType twi_config = { CONTROL_ECU_ADD, PRESCALER__1, 0x02 };
     d18:	fe 01       	movw	r30, r28
     d1a:	b0 96       	adiw	r30, 0x20	; 32
     d1c:	f8 ab       	std	Y+48, r31	; 0x30
     d1e:	ef a7       	std	Y+47, r30	; 0x2f
     d20:	28 e6       	ldi	r18, 0x68	; 104
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3a ab       	std	Y+50, r19	; 0x32
     d26:	29 ab       	std	Y+49, r18	; 0x31
     d28:	33 e0       	ldi	r19, 0x03	; 3
     d2a:	3b ab       	std	Y+51, r19	; 0x33
     d2c:	e9 a9       	ldd	r30, Y+49	; 0x31
     d2e:	fa a9       	ldd	r31, Y+50	; 0x32
     d30:	00 80       	ld	r0, Z
     d32:	29 a9       	ldd	r18, Y+49	; 0x31
     d34:	3a a9       	ldd	r19, Y+50	; 0x32
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	3a ab       	std	Y+50, r19	; 0x32
     d3c:	29 ab       	std	Y+49, r18	; 0x31
     d3e:	ef a5       	ldd	r30, Y+47	; 0x2f
     d40:	f8 a9       	ldd	r31, Y+48	; 0x30
     d42:	00 82       	st	Z, r0
     d44:	2f a5       	ldd	r18, Y+47	; 0x2f
     d46:	38 a9       	ldd	r19, Y+48	; 0x30
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	38 ab       	std	Y+48, r19	; 0x30
     d4e:	2f a7       	std	Y+47, r18	; 0x2f
     d50:	3b a9       	ldd	r19, Y+51	; 0x33
     d52:	31 50       	subi	r19, 0x01	; 1
     d54:	3b ab       	std	Y+51, r19	; 0x33
     d56:	8b a9       	ldd	r24, Y+51	; 0x33
     d58:	88 23       	and	r24, r24
     d5a:	41 f7       	brne	.-48     	; 0xd2c <main+0xde>
	TWI_init(&twi_config);
     d5c:	ce 01       	movw	r24, r28
     d5e:	80 96       	adiw	r24, 0x20	; 32
     d60:	0e 94 cd 10 	call	0x219a	; 0x219a <TWI_init>
	/* initialize motor and buzzer drivers */
	DcMotor_init();
     d64:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_init>
	Buzzer_init();
     d68:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	setPassFirstTime();
     d6c:	0e 94 96 07 	call	0xf2c	; 0xf2c <setPassFirstTime>

	uint8 recived_info = 0; /* variable to get the value from the other MC using UART */
     d70:	1f 86       	std	Y+15, r1	; 0x0f

	while (1) {
		if (UART_recieveByte() == READY_TO_SEND) {
     d72:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
     d76:	80 31       	cpi	r24, 0x10	; 16
     d78:	09 f0       	breq	.+2      	; 0xd7c <main+0x12e>
     d7a:	87 c0       	rjmp	.+270    	; 0xe8a <main+0x23c>
			for (i = 0; i < PASS_SIZE; i++) {
     d7c:	18 8a       	std	Y+16, r1	; 0x10
     d7e:	7e c0       	rjmp	.+252    	; 0xe7c <main+0x22e>
				recievedPass[i] = UART_recieveByte();
     d80:	88 89       	ldd	r24, Y+16	; 0x10
     d82:	08 2f       	mov	r16, r24
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
     d8a:	f8 01       	movw	r30, r16
     d8c:	ee 57       	subi	r30, 0x7E	; 126
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 83       	st	Z, r24
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a8 ec       	ldi	r26, 0xC8	; 200
     d98:	b2 e4       	ldi	r27, 0x42	; 66
     d9a:	8b 87       	std	Y+11, r24	; 0x0b
     d9c:	9c 87       	std	Y+12, r25	; 0x0c
     d9e:	ad 87       	std	Y+13, r26	; 0x0d
     da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da2:	6b 85       	ldd	r22, Y+11	; 0x0b
     da4:	7c 85       	ldd	r23, Y+12	; 0x0c
     da6:	8d 85       	ldd	r24, Y+13	; 0x0d
     da8:	9e 85       	ldd	r25, Y+14	; 0x0e
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4a ef       	ldi	r20, 0xFA	; 250
     db0:	54 e4       	ldi	r21, 0x44	; 68
     db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8f 83       	std	Y+7, r24	; 0x07
     dbc:	98 87       	std	Y+8, r25	; 0x08
     dbe:	a9 87       	std	Y+9, r26	; 0x09
     dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc2:	6f 81       	ldd	r22, Y+7	; 0x07
     dc4:	78 85       	ldd	r23, Y+8	; 0x08
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	2c f4       	brge	.+10     	; 0xde4 <main+0x196>
		__ticks = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	8d 83       	std	Y+5, r24	; 0x05
     de2:	3f c0       	rjmp	.+126    	; 0xe62 <main+0x214>
	else if (__tmp > 65535)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	57 e4       	ldi	r21, 0x47	; 71
     df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df8:	18 16       	cp	r1, r24
     dfa:	4c f5       	brge	.+82     	; 0xe4e <main+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <main+0x1f6>
     e26:	88 ec       	ldi	r24, 0xC8	; 200
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <main+0x1e4>
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	9e 81       	ldd	r25, Y+6	; 0x06
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f7       	brne	.-38     	; 0xe26 <main+0x1d8>
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <main+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4e:	6f 81       	ldd	r22, Y+7	; 0x07
     e50:	78 85       	ldd	r23, Y+8	; 0x08
     e52:	89 85       	ldd	r24, Y+9	; 0x09
     e54:	9a 85       	ldd	r25, Y+10	; 0x0a
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <main+0x220>
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01

	uint8 recived_info = 0; /* variable to get the value from the other MC using UART */

	while (1) {
		if (UART_recieveByte() == READY_TO_SEND) {
			for (i = 0; i < PASS_SIZE; i++) {
     e76:	88 89       	ldd	r24, Y+16	; 0x10
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	88 8b       	std	Y+16, r24	; 0x10
     e7c:	88 89       	ldd	r24, Y+16	; 0x10
     e7e:	85 30       	cpi	r24, 0x05	; 5
     e80:	08 f4       	brcc	.+2      	; 0xe84 <main+0x236>
     e82:	7e cf       	rjmp	.-260    	; 0xd80 <main+0x132>
				recievedPass[i] = UART_recieveByte();
				_delay_ms(100);
			}
			recived_info = UART_recieveByte();
     e84:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
     e88:	8f 87       	std	Y+15, r24	; 0x0f
		}
		/*
		 * switch case to check on the pressed key from the keypad if it is '+' which calls the open door mechanism
		 * or '-' which calls the change password mechanism
		 * */
		switch (recived_info) {
     e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8c:	e8 2f       	mov	r30, r24
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	fc a3       	std	Y+36, r31	; 0x24
     e92:	eb a3       	std	Y+35, r30	; 0x23
     e94:	2b a1       	ldd	r18, Y+35	; 0x23
     e96:	3c a1       	ldd	r19, Y+36	; 0x24
     e98:	2b 32       	cpi	r18, 0x2B	; 43
     e9a:	31 05       	cpc	r19, r1
     e9c:	31 f0       	breq	.+12     	; 0xeaa <main+0x25c>
     e9e:	8b a1       	ldd	r24, Y+35	; 0x23
     ea0:	9c a1       	ldd	r25, Y+36	; 0x24
     ea2:	8d 32       	cpi	r24, 0x2D	; 45
     ea4:	91 05       	cpc	r25, r1
     ea6:	79 f1       	breq	.+94     	; 0xf06 <main+0x2b8>
     ea8:	64 cf       	rjmp	.-312    	; 0xd72 <main+0x124>
		case '+':
			if (checkPasswordMatch(storePass,
     eaa:	87 e8       	ldi	r24, 0x87	; 135
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	22 e8       	ldi	r18, 0x82	; 130
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	b9 01       	movw	r22, r18
     eb4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <checkPasswordMatch>
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	41 f4       	brne	.+16     	; 0xecc <main+0x27e>
					recievedPass)== PASSWORDS_ARE_SAME) {
				UART_sendByte(DOOR_UNLOCK);
     ebc:	85 e2       	ldi	r24, 0x25	; 37
     ebe:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
				openDoorOperation();
     ec2:	0e 94 c4 09 	call	0x1388	; 0x1388 <openDoorOperation>
				/*
				 *  if the password is correct before
				 *  3 consecutive times you need to reset the value of wrong trials to 0
				 *  to start count again */
				wrongPassTrials = 0;
     ec6:	10 92 7a 00 	sts	0x007A, r1
     eca:	53 cf       	rjmp	.-346    	; 0xd72 <main+0x124>
			}
			else {
				wrongPassTrials++;
     ecc:	80 91 7a 00 	lds	r24, 0x007A
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 93 7a 00 	sts	0x007A, r24
				if (wrongPassTrials == MAX_WRONG_PASS_TRIALS) {
     ed6:	80 91 7a 00 	lds	r24, 0x007A
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	81 f4       	brne	.+32     	; 0xefe <main+0x2b0>
					UART_sendByte(ALERT);
     ede:	83 e1       	ldi	r24, 0x13	; 19
     ee0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
					Buzzer_on();
     ee4:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
					g_seconds = 0;
     ee8:	10 92 7b 00 	sts	0x007B, r1
					while (g_seconds < ALERT_TIME) {}
     eec:	80 91 7b 00 	lds	r24, 0x007B
     ef0:	8c 33       	cpi	r24, 0x3C	; 60
     ef2:	e0 f3       	brcs	.-8      	; 0xeec <main+0x29e>
					Buzzer_off();
     ef4:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
					wrongPassTrials = 0;
     ef8:	10 92 7a 00 	sts	0x007A, r1
     efc:	3a cf       	rjmp	.-396    	; 0xd72 <main+0x124>
				}
				else {
					UART_sendByte(WRONG_PASS);
     efe:	80 e3       	ldi	r24, 0x30	; 48
     f00:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
     f04:	36 cf       	rjmp	.-404    	; 0xd72 <main+0x124>
				}
			}
			break;
		case '-':
			if (checkPasswordMatch(storePass,
     f06:	87 e8       	ldi	r24, 0x87	; 135
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	22 e8       	ldi	r18, 0x82	; 130
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	b9 01       	movw	r22, r18
     f10:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <checkPasswordMatch>
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	31 f4       	brne	.+12     	; 0xf24 <main+0x2d6>
					recievedPass) == PASSWORDS_ARE_SAME) {
				UART_sendByte(CHANGE_PASS);
     f18:	81 e3       	ldi	r24, 0x31	; 49
     f1a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
				setPassFirstTime();
     f1e:	0e 94 96 07 	call	0xf2c	; 0xf2c <setPassFirstTime>
     f22:	27 cf       	rjmp	.-434    	; 0xd72 <main+0x124>
			}
			else {
				UART_sendByte(WRONG_PASS);
     f24:	80 e3       	ldi	r24, 0x30	; 48
     f26:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
     f2a:	23 cf       	rjmp	.-442    	; 0xd72 <main+0x124>

00000f2c <setPassFirstTime>:
}

/*
 * function to set the password for the first time
 * */
void setPassFirstTime(void) {
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	a3 97       	sbiw	r28, 0x23	; 35
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
	uint8 i;

	uint8 checkPass[PASS_SIZE];
	uint8 checkFlag = 0;
     f44:	1d 8e       	std	Y+29, r1	; 0x1d
     f46:	3e c1       	rjmp	.+636    	; 0x11c4 <setPassFirstTime+0x298>
	while (checkFlag == 0) {
		while (UART_recieveByte() != READY_TO_SEND) {
     f48:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
     f4c:	80 31       	cpi	r24, 0x10	; 16
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <setPassFirstTime+0x1c>
		}
		UART_sendByte(READY_TO_RECIEVE);
     f50:	81 e1       	ldi	r24, 0x11	; 17
     f52:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
		for (i = 0; i < PASS_SIZE; i++) {
     f56:	1e 8e       	std	Y+30, r1	; 0x1e
     f58:	7e c0       	rjmp	.+252    	; 0x1056 <setPassFirstTime+0x12a>
			recievedPass[i] = UART_recieveByte();
     f5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5c:	08 2f       	mov	r16, r24
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
     f64:	f8 01       	movw	r30, r16
     f66:	ee 57       	subi	r30, 0x7E	; 126
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 83       	st	Z, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a8 ec       	ldi	r26, 0xC8	; 200
     f72:	b2 e4       	ldi	r27, 0x42	; 66
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4a ef       	ldi	r20, 0xFA	; 250
     f8a:	54 e4       	ldi	r21, 0x44	; 68
     f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <setPassFirstTime+0x92>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <setPassFirstTime+0x110>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <setPassFirstTime+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <setPassFirstTime+0xf2>
    1000:	88 ec       	ldi	r24, 0xC8	; 200
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <setPassFirstTime+0xe0>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <setPassFirstTime+0xd4>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <setPassFirstTime+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <setPassFirstTime+0x11c>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 checkFlag = 0;
	while (checkFlag == 0) {
		while (UART_recieveByte() != READY_TO_SEND) {
		}
		UART_sendByte(READY_TO_RECIEVE);
		for (i = 0; i < PASS_SIZE; i++) {
    1050:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	8e 8f       	std	Y+30, r24	; 0x1e
    1056:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	08 f4       	brcc	.+2      	; 0x105e <setPassFirstTime+0x132>
    105c:	7e cf       	rjmp	.-260    	; 0xf5a <setPassFirstTime+0x2e>
			recievedPass[i] = UART_recieveByte();
			_delay_ms(100);
		}
		while (UART_recieveByte() != READY_TO_SEND) {
    105e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
    1062:	80 31       	cpi	r24, 0x10	; 16
    1064:	e1 f7       	brne	.-8      	; 0x105e <setPassFirstTime+0x132>
		}
		UART_sendByte(READY_TO_RECIEVE);
    1066:	81 e1       	ldi	r24, 0x11	; 17
    1068:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
		for (i = 0; i < PASS_SIZE; i++) {
    106c:	1e 8e       	std	Y+30, r1	; 0x1e
    106e:	81 c0       	rjmp	.+258    	; 0x1172 <setPassFirstTime+0x246>
			checkPass[i] = UART_recieveByte();
    1070:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1072:	08 2f       	mov	r16, r24
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
    107a:	28 2f       	mov	r18, r24
    107c:	ce 01       	movw	r24, r28
    107e:	4f 96       	adiw	r24, 0x1f	; 31
    1080:	fc 01       	movw	r30, r24
    1082:	e0 0f       	add	r30, r16
    1084:	f1 1f       	adc	r31, r17
    1086:	20 83       	st	Z, r18
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a8 ec       	ldi	r26, 0xC8	; 200
    108e:	b2 e4       	ldi	r27, 0x42	; 66
    1090:	8b 87       	std	Y+11, r24	; 0x0b
    1092:	9c 87       	std	Y+12, r25	; 0x0c
    1094:	ad 87       	std	Y+13, r26	; 0x0d
    1096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a ef       	ldi	r20, 0xFA	; 250
    10a6:	54 e4       	ldi	r21, 0x44	; 68
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8f 83       	std	Y+7, r24	; 0x07
    10b2:	98 87       	std	Y+8, r25	; 0x08
    10b4:	a9 87       	std	Y+9, r26	; 0x09
    10b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ba:	78 85       	ldd	r23, Y+8	; 0x08
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <setPassFirstTime+0x1ae>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	3f c0       	rjmp	.+126    	; 0x1158 <setPassFirstTime+0x22c>
	else if (__tmp > 65535)
    10da:	6f 81       	ldd	r22, Y+7	; 0x07
    10dc:	78 85       	ldd	r23, Y+8	; 0x08
    10de:	89 85       	ldd	r24, Y+9	; 0x09
    10e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	4c f5       	brge	.+82     	; 0x1144 <setPassFirstTime+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	0f c0       	rjmp	.+30     	; 0x113a <setPassFirstTime+0x20e>
    111c:	88 ec       	ldi	r24, 0xC8	; 200
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	8b 83       	std	Y+3, r24	; 0x03
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <setPassFirstTime+0x1fc>
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f7       	brne	.-38     	; 0x111c <setPassFirstTime+0x1f0>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <setPassFirstTime+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	6f 81       	ldd	r22, Y+7	; 0x07
    1146:	78 85       	ldd	r23, Y+8	; 0x08
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	9a 85       	ldd	r25, Y+10	; 0x0a
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <setPassFirstTime+0x238>
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
		}
		while (UART_recieveByte() != READY_TO_SEND) {
		}
		UART_sendByte(READY_TO_RECIEVE);
		for (i = 0; i < PASS_SIZE; i++) {
    116c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	8e 8f       	std	Y+30, r24	; 0x1e
    1172:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1174:	85 30       	cpi	r24, 0x05	; 5
    1176:	08 f4       	brcc	.+2      	; 0x117a <setPassFirstTime+0x24e>
    1178:	7b cf       	rjmp	.-266    	; 0x1070 <setPassFirstTime+0x144>
			checkPass[i] = UART_recieveByte();
			_delay_ms(100);
		}

		if (checkPasswordMatch(recievedPass, checkPass) == PASSWORDS_ARE_SAME) {
    117a:	82 e8       	ldi	r24, 0x82	; 130
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9e 01       	movw	r18, r28
    1180:	21 5e       	subi	r18, 0xE1	; 225
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	b9 01       	movw	r22, r18
    1186:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <checkPasswordMatch>
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	59 f4       	brne	.+22     	; 0x11a4 <setPassFirstTime+0x278>
			UART_sendByte(READY_TO_SEND);
    118e:	80 e1       	ldi	r24, 0x10	; 16
    1190:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
			UART_sendByte(PASSWORDS_ARE_SAME);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
			savePassInEEProm();
    119a:	0e 94 28 09 	call	0x1250	; 0x1250 <savePassInEEProm>
			checkFlag = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	8d 8f       	std	Y+29, r24	; 0x1d
    11a2:	10 c0       	rjmp	.+32     	; 0x11c4 <setPassFirstTime+0x298>
		}
		else if (checkPasswordMatch(recievedPass,checkPass) == PASSWORDS_ARE_DIFF) {
    11a4:	82 e8       	ldi	r24, 0x82	; 130
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9e 01       	movw	r18, r28
    11aa:	21 5e       	subi	r18, 0xE1	; 225
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	b9 01       	movw	r22, r18
    11b0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <checkPasswordMatch>
    11b4:	88 23       	and	r24, r24
    11b6:	31 f4       	brne	.+12     	; 0x11c4 <setPassFirstTime+0x298>
			UART_sendByte(READY_TO_SEND);
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
			UART_sendByte(PASSWORDS_ARE_DIFF);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
void setPassFirstTime(void) {
	uint8 i;

	uint8 checkPass[PASS_SIZE];
	uint8 checkFlag = 0;
	while (checkFlag == 0) {
    11c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c6:	88 23       	and	r24, r24
    11c8:	09 f4       	brne	.+2      	; 0x11cc <setPassFirstTime+0x2a0>
    11ca:	be ce       	rjmp	.-644    	; 0xf48 <setPassFirstTime+0x1c>
		else if (checkPasswordMatch(recievedPass,checkPass) == PASSWORDS_ARE_DIFF) {
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORDS_ARE_DIFF);
		}
	}
}
    11cc:	a3 96       	adiw	r28, 0x23	; 35
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <checkPasswordMatch>:

/*
 * function to compare between the two passwords and return true or false depending on
 * the reuslt of the compare
 * */
uint8 checkPasswordMatch(uint8 *pass1, uint8 *pass2) {
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <checkPasswordMatch+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <checkPasswordMatch+0x8>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <checkPasswordMatch+0xa>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	9b 83       	std	Y+3, r25	; 0x03
    11f2:	8a 83       	std	Y+2, r24	; 0x02
    11f4:	7d 83       	std	Y+5, r23	; 0x05
    11f6:	6c 83       	std	Y+4, r22	; 0x04
	updateStoredPassword();
    11f8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <updateStoredPassword>
	uint8 i;

	for (i = 0; i < PASS_SIZE; i++) {
    11fc:	19 82       	std	Y+1, r1	; 0x01
    11fe:	19 c0       	rjmp	.+50     	; 0x1232 <checkPasswordMatch+0x50>
		if (pass1[i] != pass2[i]) {
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	fc 01       	movw	r30, r24
    120c:	e2 0f       	add	r30, r18
    120e:	f3 1f       	adc	r31, r19
    1210:	40 81       	ld	r20, Z
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	fc 01       	movw	r30, r24
    121e:	e2 0f       	add	r30, r18
    1220:	f3 1f       	adc	r31, r19
    1222:	80 81       	ld	r24, Z
    1224:	48 17       	cp	r20, r24
    1226:	11 f0       	breq	.+4      	; 0x122c <checkPasswordMatch+0x4a>
			return PASSWORDS_ARE_DIFF;
    1228:	1e 82       	std	Y+6, r1	; 0x06
    122a:	08 c0       	rjmp	.+16     	; 0x123c <checkPasswordMatch+0x5a>
 * */
uint8 checkPasswordMatch(uint8 *pass1, uint8 *pass2) {
	updateStoredPassword();
	uint8 i;

	for (i = 0; i < PASS_SIZE; i++) {
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	85 30       	cpi	r24, 0x05	; 5
    1236:	20 f3       	brcs	.-56     	; 0x1200 <checkPasswordMatch+0x1e>
		if (pass1[i] != pass2[i]) {
			return PASSWORDS_ARE_DIFF;
		}
	}
	return PASSWORDS_ARE_SAME;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    123e:	26 96       	adiw	r28, 0x06	; 6
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <savePassInEEProm>:

/*
 * function to store the password inside the EEPROM
 * */
void savePassInEEProm(void) {
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	2f 97       	sbiw	r28, 0x0f	; 15
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for (i = 0; i < PASS_SIZE; i++) {
    1264:	1f 86       	std	Y+15, r1	; 0x0f
    1266:	83 c0       	rjmp	.+262    	; 0x136e <savePassInEEProm+0x11e>
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, recievedPass[i]);
    1268:	8f 85       	ldd	r24, Y+15	; 0x0f
    126a:	48 2f       	mov	r20, r24
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	fc 01       	movw	r30, r24
    1276:	ee 57       	subi	r30, 0x7E	; 126
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	20 81       	ld	r18, Z
    127c:	ca 01       	movw	r24, r20
    127e:	62 2f       	mov	r22, r18
    1280:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <EEPROM_writeByte>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a8 ec       	ldi	r26, 0xC8	; 200
    128a:	b2 e4       	ldi	r27, 0x42	; 66
    128c:	8b 87       	std	Y+11, r24	; 0x0b
    128e:	9c 87       	std	Y+12, r25	; 0x0c
    1290:	ad 87       	std	Y+13, r26	; 0x0d
    1292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	6b 85       	ldd	r22, Y+11	; 0x0b
    1296:	7c 85       	ldd	r23, Y+12	; 0x0c
    1298:	8d 85       	ldd	r24, Y+13	; 0x0d
    129a:	9e 85       	ldd	r25, Y+14	; 0x0e
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a ef       	ldi	r20, 0xFA	; 250
    12a2:	54 e4       	ldi	r21, 0x44	; 68
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8f 83       	std	Y+7, r24	; 0x07
    12ae:	98 87       	std	Y+8, r25	; 0x08
    12b0:	a9 87       	std	Y+9, r26	; 0x09
    12b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	78 85       	ldd	r23, Y+8	; 0x08
    12b8:	89 85       	ldd	r24, Y+9	; 0x09
    12ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <savePassInEEProm+0x86>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <savePassInEEProm+0x104>
	else if (__tmp > 65535)
    12d6:	6f 81       	ldd	r22, Y+7	; 0x07
    12d8:	78 85       	ldd	r23, Y+8	; 0x08
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <savePassInEEProm+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9e 83       	std	Y+6, r25	; 0x06
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <savePassInEEProm+0xe6>
    1318:	88 ec       	ldi	r24, 0xC8	; 200
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <savePassInEEProm+0xd4>
    1328:	9c 83       	std	Y+4, r25	; 0x04
    132a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <savePassInEEProm+0xc8>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <savePassInEEProm+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6f 81       	ldd	r22, Y+7	; 0x07
    1342:	78 85       	ldd	r23, Y+8	; 0x08
    1344:	89 85       	ldd	r24, Y+9	; 0x09
    1346:	9a 85       	ldd	r25, Y+10	; 0x0a
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <savePassInEEProm+0x110>
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
/*
 * function to store the password inside the EEPROM
 * */
void savePassInEEProm(void) {
	uint8 i;
	for (i = 0; i < PASS_SIZE; i++) {
    1368:	8f 85       	ldd	r24, Y+15	; 0x0f
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	8f 87       	std	Y+15, r24	; 0x0f
    136e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1370:	85 30       	cpi	r24, 0x05	; 5
    1372:	08 f4       	brcc	.+2      	; 0x1376 <savePassInEEProm+0x126>
    1374:	79 cf       	rjmp	.-270    	; 0x1268 <savePassInEEProm+0x18>
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, recievedPass[i]);
		_delay_ms(100);
	}
}
    1376:	2f 96       	adiw	r28, 0x0f	; 15
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <openDoorOperation>:

/*
 * function that handles the opening door operation
 * */
void openDoorOperation(void) {
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    1390:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(CW);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
	while (g_seconds < OPEN_TIME) {}
    139a:	80 91 7b 00 	lds	r24, 0x007B
    139e:	8f 30       	cpi	r24, 0x0F	; 15
    13a0:	e0 f3       	brcs	.-8      	; 0x139a <openDoorOperation+0x12>
	g_seconds = 0;
    13a2:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(STOP);
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
	while (g_seconds < HOLD_TIME) {}
    13ac:	80 91 7b 00 	lds	r24, 0x007B
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	e0 f3       	brcs	.-8      	; 0x13ac <openDoorOperation+0x24>
	g_seconds = 0;
    13b4:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(ACW);
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
	while (g_seconds < CLOSE_TIME) {}
    13be:	80 91 7b 00 	lds	r24, 0x007B
    13c2:	8f 30       	cpi	r24, 0x0F	; 15
    13c4:	e0 f3       	brcs	.-8      	; 0x13be <openDoorOperation+0x36>
	DcMotor_Rotate(STOP);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <updateStoredPassword>:

/*
 * function to update the password saved in EEPROM with the new given password
 * */
void updateStoredPassword(void) {
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < PASS_SIZE; i++) {
    13dc:	19 82       	std	Y+1, r1	; 0x01
    13de:	10 c0       	rjmp	.+32     	; 0x1400 <updateStoredPassword+0x2e>
		EEPROM_readByte(EEPROM_STORE_ADDREESS + i, storePass + i);
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	48 2f       	mov	r20, r24
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 01       	movw	r18, r24
    13ee:	29 57       	subi	r18, 0x79	; 121
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	ca 01       	movw	r24, r20
    13f4:	b9 01       	movw	r22, r18
    13f6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <EEPROM_readByte>
/*
 * function to update the password saved in EEPROM with the new given password
 * */
void updateStoredPassword(void) {
	uint8 i;
	for (i = 0; i < PASS_SIZE; i++) {
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	85 30       	cpi	r24, 0x05	; 5
    1404:	68 f3       	brcs	.-38     	; 0x13e0 <updateStoredPassword+0xe>
		EEPROM_readByte(EEPROM_STORE_ADDREESS + i, storePass + i);
	}
}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <timer1HandlerCallBack>:

/*
 * the call back function of timer1
 * */
void timer1HandlerCallBack(void) {
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    1416:	80 91 7b 00 	lds	r24, 0x007B
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	80 93 7b 00 	sts	0x007B, r24
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <__vector_11>:

/*******************************************************************************
 *                      Functions ISR                                           *
 *******************************************************************************/

ISR( TIMER0_OVF_vect) {
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR) {
    1450:	80 91 7c 00 	lds	r24, 0x007C
    1454:	90 91 7d 00 	lds	r25, 0x007D
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	29 f0       	breq	.+10     	; 0x1466 <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer0 overflow mode */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr0(); */
    145c:	e0 91 7c 00 	lds	r30, 0x007C
    1460:	f0 91 7d 00 	lds	r31, 0x007D
    1464:	09 95       	icall
	}
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <__vector_10>:

ISR( TIMER0_COMP_vect) {
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR) {
    14b6:	80 91 7c 00 	lds	r24, 0x007C
    14ba:	90 91 7d 00 	lds	r25, 0x007D
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	29 f0       	breq	.+10     	; 0x14cc <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer0 compare mode*/
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr0(); */
    14c2:	e0 91 7c 00 	lds	r30, 0x007C
    14c6:	f0 91 7d 00 	lds	r31, 0x007D
    14ca:	09 95       	icall
	}
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <__vector_9>:

ISR( TIMER1_OVF_vect) {
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR) {
    151c:	80 91 7e 00 	lds	r24, 0x007E
    1520:	90 91 7f 00 	lds	r25, 0x007F
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	29 f0       	breq	.+10     	; 0x1532 <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer1 overflow mode*/
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr1(); */
    1528:	e0 91 7e 00 	lds	r30, 0x007E
    152c:	f0 91 7f 00 	lds	r31, 0x007F
    1530:	09 95       	icall
	}
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_7>:

ISR( TIMER1_COMPA_vect) {
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR) {
    1582:	80 91 7e 00 	lds	r24, 0x007E
    1586:	90 91 7f 00 	lds	r25, 0x007F
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	29 f0       	breq	.+10     	; 0x1598 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer1 compare mode */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr1(); */
    158e:	e0 91 7e 00 	lds	r30, 0x007E
    1592:	f0 91 7f 00 	lds	r31, 0x007F
    1596:	09 95       	icall
	}
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_5>:

ISR( TIMER2_OVF_vect) {
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR) {
    15e8:	80 91 80 00 	lds	r24, 0x0080
    15ec:	90 91 81 00 	lds	r25, 0x0081
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	29 f0       	breq	.+10     	; 0x15fe <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer2 overflow mode*/
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr2(); */
    15f4:	e0 91 80 00 	lds	r30, 0x0080
    15f8:	f0 91 81 00 	lds	r31, 0x0081
    15fc:	09 95       	icall
	}
}
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	bf 91       	pop	r27
    1608:	af 91       	pop	r26
    160a:	9f 91       	pop	r25
    160c:	8f 91       	pop	r24
    160e:	7f 91       	pop	r23
    1610:	6f 91       	pop	r22
    1612:	5f 91       	pop	r21
    1614:	4f 91       	pop	r20
    1616:	3f 91       	pop	r19
    1618:	2f 91       	pop	r18
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti

00001624 <__vector_4>:

ISR( TIMER2_COMP_vect) {
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR) {
    164e:	80 91 80 00 	lds	r24, 0x0080
    1652:	90 91 81 00 	lds	r25, 0x0081
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	29 f0       	breq	.+10     	; 0x1664 <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected in Timer2 compare mode  */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr2(); */
    165a:	e0 91 80 00 	lds	r30, 0x0080
    165e:	f0 91 81 00 	lds	r31, 0x0081
    1662:	09 95       	icall
	}
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	7f 91       	pop	r23
    1676:	6f 91       	pop	r22
    1678:	5f 91       	pop	r21
    167a:	4f 91       	pop	r20
    167c:	3f 91       	pop	r19
    167e:	2f 91       	pop	r18
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	0f 90       	pop	r0
    1686:	1f 90       	pop	r1
    1688:	18 95       	reti

0000168a <Timer_init>:
 *******************************************************************************/

/*
 * Function to initialize the timer using dynamic configuration
 * */
void Timer_init(const Timer_ConfigType *Config_Ptr) {
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <Timer_init+0x6>
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01

	/* This function first checks the value of prescaler2 and if it is Dont care it means
	 * that timer2 is not used then checks the TimerID which could be timer0 or timer 1
	 * then initialize the corresponding registers with the values in that configuration
	 * */
	if ((Config_Ptr->prescaler2) == DONT_CARE) {
    1698:	e9 81       	ldd	r30, Y+1	; 0x01
    169a:	fa 81       	ldd	r31, Y+2	; 0x02
    169c:	86 81       	ldd	r24, Z+6	; 0x06
    169e:	8f 3f       	cpi	r24, 0xFF	; 255
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <Timer_init+0x1a>
    16a2:	b4 c0       	rjmp	.+360    	; 0x180c <Timer_init+0x182>

		if ((Config_Ptr->timer_id) == Timer0) {
    16a4:	e9 81       	ldd	r30, Y+1	; 0x01
    16a6:	fa 81       	ldd	r31, Y+2	; 0x02
    16a8:	80 81       	ld	r24, Z
    16aa:	88 23       	and	r24, r24
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <Timer_init+0x26>
    16ae:	50 c0       	rjmp	.+160    	; 0x1750 <Timer_init+0xc6>

			/* first choose the prescaler then choose the initial value to start count from
			 * which are same steps in any mode in the timer0
			 * */
			TCCR0 = (Config_Ptr->prescaler);
    16b0:	a3 e5       	ldi	r26, 0x53	; 83
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e9 81       	ldd	r30, Y+1	; 0x01
    16b6:	fa 81       	ldd	r31, Y+2	; 0x02
    16b8:	87 81       	ldd	r24, Z+7	; 0x07
    16ba:	8c 93       	st	X, r24
			TCNT0 = Config_Ptr->initial_value;
    16bc:	a2 e5       	ldi	r26, 0x52	; 82
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	92 81       	ldd	r25, Z+2	; 0x02
    16c8:	8c 93       	st	X, r24

			/* second checks the mode chosen between Normal / compare / fast PWM
			 * to initialize the other registers and the compare value in the timer0 and enable each mode
			 * */
			if (((Config_Ptr->mode) == NORMAL_MODE)) {
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	85 81       	ldd	r24, Z+5	; 0x05
    16d0:	88 23       	and	r24, r24
    16d2:	61 f4       	brne	.+24     	; 0x16ec <Timer_init+0x62>
				TCCR0 |= (1 << FOC0);
    16d4:	a3 e5       	ldi	r26, 0x53	; 83
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e3 e5       	ldi	r30, 0x53	; 83
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 68       	ori	r24, 0x80	; 128
    16e0:	8c 93       	st	X, r24
				TIMSK = (1 << TOIE0);
    16e2:	e9 e5       	ldi	r30, 0x59	; 89
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 83       	st	Z, r24
    16ea:	ea c0       	rjmp	.+468    	; 0x18c0 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == COMPARE_MODE) {
    16ec:	e9 81       	ldd	r30, Y+1	; 0x01
    16ee:	fa 81       	ldd	r31, Y+2	; 0x02
    16f0:	85 81       	ldd	r24, Z+5	; 0x05
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	99 f4       	brne	.+38     	; 0x171c <Timer_init+0x92>
				OCR0 = Config_Ptr->compare_value;
    16f6:	ac e5       	ldi	r26, 0x5C	; 92
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e9 81       	ldd	r30, Y+1	; 0x01
    16fc:	fa 81       	ldd	r31, Y+2	; 0x02
    16fe:	83 81       	ldd	r24, Z+3	; 0x03
    1700:	94 81       	ldd	r25, Z+4	; 0x04
    1702:	8c 93       	st	X, r24
				TCCR0 |= (1 << FOC0) | (1 << WGM01) | (1 << COM01);
    1704:	a3 e5       	ldi	r26, 0x53	; 83
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e3 e5       	ldi	r30, 0x53	; 83
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 6a       	ori	r24, 0xA8	; 168
    1710:	8c 93       	st	X, r24
				TIMSK = (1 << OCIE0);
    1712:	e9 e5       	ldi	r30, 0x59	; 89
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	80 83       	st	Z, r24
    171a:	d2 c0       	rjmp	.+420    	; 0x18c0 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
    171c:	e9 81       	ldd	r30, Y+1	; 0x01
    171e:	fa 81       	ldd	r31, Y+2	; 0x02
    1720:	85 81       	ldd	r24, Z+5	; 0x05
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	09 f0       	breq	.+2      	; 0x1728 <Timer_init+0x9e>
    1726:	cc c0       	rjmp	.+408    	; 0x18c0 <Timer_init+0x236>
				OCR0 = Config_Ptr->compare_value;
    1728:	ac e5       	ldi	r26, 0x5C	; 92
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e9 81       	ldd	r30, Y+1	; 0x01
    172e:	fa 81       	ldd	r31, Y+2	; 0x02
    1730:	83 81       	ldd	r24, Z+3	; 0x03
    1732:	94 81       	ldd	r25, Z+4	; 0x04
    1734:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);/* configure pwm pin as output pin*/
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	63 e0       	ldi	r22, 0x03	; 3
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
				TCCR0 |= (1 << WGM01) | (1 << WGM00) | (1 << COM01);
    1740:	a3 e5       	ldi	r26, 0x53	; 83
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e3 e5       	ldi	r30, 0x53	; 83
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	88 66       	ori	r24, 0x68	; 104
    174c:	8c 93       	st	X, r24
    174e:	b8 c0       	rjmp	.+368    	; 0x18c0 <Timer_init+0x236>
		}

		/* first choose the prescaler then choose the initial value to start count from
		 * which are same steps in any mode in the timer1
		 * */
		else if ((Config_Ptr->timer_id) == Timer1) {
    1750:	e9 81       	ldd	r30, Y+1	; 0x01
    1752:	fa 81       	ldd	r31, Y+2	; 0x02
    1754:	80 81       	ld	r24, Z
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	09 f0       	breq	.+2      	; 0x175c <Timer_init+0xd2>
    175a:	b2 c0       	rjmp	.+356    	; 0x18c0 <Timer_init+0x236>

			TCNT1 = Config_Ptr->initial_value;
    175c:	ac e4       	ldi	r26, 0x4C	; 76
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e9 81       	ldd	r30, Y+1	; 0x01
    1762:	fa 81       	ldd	r31, Y+2	; 0x02
    1764:	81 81       	ldd	r24, Z+1	; 0x01
    1766:	92 81       	ldd	r25, Z+2	; 0x02
    1768:	11 96       	adiw	r26, 0x01	; 1
    176a:	9c 93       	st	X, r25
    176c:	8e 93       	st	-X, r24
			/*depends on the mode chosen the register TCCR1B is initialized with the selected prescaler */
			TCCR1B = ((Config_Ptr->mode) << WGM12) | ((Config_Ptr->prescaler));
    176e:	ae e4       	ldi	r26, 0x4E	; 78
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	85 81       	ldd	r24, Z+5	; 0x05
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	98 2f       	mov	r25, r24
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	87 81       	ldd	r24, Z+7	; 0x07
    1790:	89 2b       	or	r24, r25
    1792:	8c 93       	st	X, r24

			/* second checks the mode chosen between Normal / compare / fast PWM
			 * to initialize the other registers and the compare value in the timer1 and enable each mode
			 * */
			if ((Config_Ptr->mode) == NORMAL_MODE) {
    1794:	e9 81       	ldd	r30, Y+1	; 0x01
    1796:	fa 81       	ldd	r31, Y+2	; 0x02
    1798:	85 81       	ldd	r24, Z+5	; 0x05
    179a:	88 23       	and	r24, r24
    179c:	49 f4       	brne	.+18     	; 0x17b0 <Timer_init+0x126>
				TCCR1A = (1 << FOC1A);
    179e:	ef e4       	ldi	r30, 0x4F	; 79
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	88 e0       	ldi	r24, 0x08	; 8
    17a4:	80 83       	st	Z, r24
				TIMSK = (1 << TOIE1);
    17a6:	e9 e5       	ldi	r30, 0x59	; 89
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	84 e0       	ldi	r24, 0x04	; 4
    17ac:	80 83       	st	Z, r24
    17ae:	88 c0       	rjmp	.+272    	; 0x18c0 <Timer_init+0x236>
			}
			else if ((Config_Ptr->mode) == COMPARE_MODE) {
    17b0:	e9 81       	ldd	r30, Y+1	; 0x01
    17b2:	fa 81       	ldd	r31, Y+2	; 0x02
    17b4:	85 81       	ldd	r24, Z+5	; 0x05
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	91 f4       	brne	.+36     	; 0x17de <Timer_init+0x154>
				OCR1A = Config_Ptr->compare_value;
    17ba:	aa e4       	ldi	r26, 0x4A	; 74
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e9 81       	ldd	r30, Y+1	; 0x01
    17c0:	fa 81       	ldd	r31, Y+2	; 0x02
    17c2:	83 81       	ldd	r24, Z+3	; 0x03
    17c4:	94 81       	ldd	r25, Z+4	; 0x04
    17c6:	11 96       	adiw	r26, 0x01	; 1
    17c8:	9c 93       	st	X, r25
    17ca:	8e 93       	st	-X, r24
				TCCR1A = (1 << FOC1A) | (1 << COM1A1);
    17cc:	ef e4       	ldi	r30, 0x4F	; 79
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	88 e8       	ldi	r24, 0x88	; 136
    17d2:	80 83       	st	Z, r24
				TIMSK = (1 << OCIE1A);
    17d4:	e9 e5       	ldi	r30, 0x59	; 89
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 e1       	ldi	r24, 0x10	; 16
    17da:	80 83       	st	Z, r24
    17dc:	71 c0       	rjmp	.+226    	; 0x18c0 <Timer_init+0x236>
			}
			else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
    17de:	e9 81       	ldd	r30, Y+1	; 0x01
    17e0:	fa 81       	ldd	r31, Y+2	; 0x02
    17e2:	85 81       	ldd	r24, Z+5	; 0x05
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	09 f0       	breq	.+2      	; 0x17ea <Timer_init+0x160>
    17e8:	6b c0       	rjmp	.+214    	; 0x18c0 <Timer_init+0x236>
				OCR0 = Config_Ptr->compare_value;
    17ea:	ac e5       	ldi	r26, 0x5C	; 92
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	83 81       	ldd	r24, Z+3	; 0x03
    17f4:	94 81       	ldd	r25, Z+4	; 0x04
    17f6:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT); /* configure pwm pin as output pin*/
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	65 e0       	ldi	r22, 0x05	; 5
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
				TCCR1A = (1 << WGM10) | (1 << WGM11) | (1 << COM1A1);
    1802:	ef e4       	ldi	r30, 0x4F	; 79
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	83 e8       	ldi	r24, 0x83	; 131
    1808:	80 83       	st	Z, r24
    180a:	5a c0       	rjmp	.+180    	; 0x18c0 <Timer_init+0x236>
	/* Then it checks the value of prescaler and if it is Dont care it means
	 * that timer2 is used in this case and not timer0 or timer1
	 * and also checks on the timerID to make sure it's timer2 chosen
	 * then initialize the corresponding registers with the values in that configuration
	 * */
	else if ((Config_Ptr->prescaler) == DONT_CARE) {
    180c:	e9 81       	ldd	r30, Y+1	; 0x01
    180e:	fa 81       	ldd	r31, Y+2	; 0x02
    1810:	87 81       	ldd	r24, Z+7	; 0x07
    1812:	8f 3f       	cpi	r24, 0xFF	; 255
    1814:	09 f0       	breq	.+2      	; 0x1818 <Timer_init+0x18e>
    1816:	54 c0       	rjmp	.+168    	; 0x18c0 <Timer_init+0x236>

		if ((Config_Ptr->timer_id) == Timer2) {
    1818:	e9 81       	ldd	r30, Y+1	; 0x01
    181a:	fa 81       	ldd	r31, Y+2	; 0x02
    181c:	80 81       	ld	r24, Z
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	09 f0       	breq	.+2      	; 0x1824 <Timer_init+0x19a>
    1822:	4e c0       	rjmp	.+156    	; 0x18c0 <Timer_init+0x236>

			/* first choose the prescaler2 then choose the initial value to start count from
			 * which are same steps in any mode in the timer2
			 * */
			TCCR2 = (Config_Ptr->prescaler2);
    1824:	a5 e4       	ldi	r26, 0x45	; 69
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	86 81       	ldd	r24, Z+6	; 0x06
    182e:	8c 93       	st	X, r24
			TCNT2 = Config_Ptr->initial_value;
    1830:	a4 e4       	ldi	r26, 0x44	; 68
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e9 81       	ldd	r30, Y+1	; 0x01
    1836:	fa 81       	ldd	r31, Y+2	; 0x02
    1838:	81 81       	ldd	r24, Z+1	; 0x01
    183a:	92 81       	ldd	r25, Z+2	; 0x02
    183c:	8c 93       	st	X, r24

			/* second checks the mode chosen between Normal / compare / fast PWM
			 * to initialize the other registers and the compare value in the timer2 and enable each mode
			 * */
			if (((Config_Ptr->mode) == NORMAL_MODE)) {
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	85 81       	ldd	r24, Z+5	; 0x05
    1844:	88 23       	and	r24, r24
    1846:	61 f4       	brne	.+24     	; 0x1860 <Timer_init+0x1d6>
				TCCR2 |= (1 << FOC2);
    1848:	a5 e4       	ldi	r26, 0x45	; 69
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e5 e4       	ldi	r30, 0x45	; 69
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 68       	ori	r24, 0x80	; 128
    1854:	8c 93       	st	X, r24
				TIMSK = (1 << TOIE2);
    1856:	e9 e5       	ldi	r30, 0x59	; 89
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 e4       	ldi	r24, 0x40	; 64
    185c:	80 83       	st	Z, r24
    185e:	30 c0       	rjmp	.+96     	; 0x18c0 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == COMPARE_MODE) {
    1860:	e9 81       	ldd	r30, Y+1	; 0x01
    1862:	fa 81       	ldd	r31, Y+2	; 0x02
    1864:	85 81       	ldd	r24, Z+5	; 0x05
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	99 f4       	brne	.+38     	; 0x1890 <Timer_init+0x206>
				OCR2 = Config_Ptr->compare_value;
    186a:	a3 e4       	ldi	r26, 0x43	; 67
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	83 81       	ldd	r24, Z+3	; 0x03
    1874:	94 81       	ldd	r25, Z+4	; 0x04
    1876:	8c 93       	st	X, r24
				TCCR2 |= (1 << FOC2) | (1 << WGM21) | (1 << COM21);
    1878:	a5 e4       	ldi	r26, 0x45	; 69
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e5 e4       	ldi	r30, 0x45	; 69
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 6a       	ori	r24, 0xA8	; 168
    1884:	8c 93       	st	X, r24
				TIMSK = (1 << OCIE2);
    1886:	e9 e5       	ldi	r30, 0x59	; 89
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 e8       	ldi	r24, 0x80	; 128
    188c:	80 83       	st	Z, r24
    188e:	18 c0       	rjmp	.+48     	; 0x18c0 <Timer_init+0x236>
			}

			else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
    1890:	e9 81       	ldd	r30, Y+1	; 0x01
    1892:	fa 81       	ldd	r31, Y+2	; 0x02
    1894:	85 81       	ldd	r24, Z+5	; 0x05
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	99 f4       	brne	.+38     	; 0x18c0 <Timer_init+0x236>
				OCR2 = Config_Ptr->compare_value;
    189a:	a3 e4       	ldi	r26, 0x43	; 67
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e9 81       	ldd	r30, Y+1	; 0x01
    18a0:	fa 81       	ldd	r31, Y+2	; 0x02
    18a2:	83 81       	ldd	r24, Z+3	; 0x03
    18a4:	94 81       	ldd	r25, Z+4	; 0x04
    18a6:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT); /* configure pwm pin as output pin*/
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	67 e0       	ldi	r22, 0x07	; 7
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
				TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21);
    18b2:	a5 e4       	ldi	r26, 0x45	; 69
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e4       	ldi	r30, 0x45	; 69
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	88 66       	ori	r24, 0x68	; 104
    18be:	8c 93       	st	X, r24
			}
		}

	}

}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <Timer_deInit>:

/*
 * Function to disable a chosen timer by checking the TimerID
 * */

void Timer_deInit(Timer_ID ID) {
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	0f 92       	push	r0
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	89 83       	std	Y+1, r24	; 0x01
	/*depends on each timer chosen, the corresponding registers are de initialized and disabled
	 *and also make the global pointer value as NULL again to not be used accidentally
	 * */
	if (ID == Timer0) {
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	88 23       	and	r24, r24
    18da:	e1 f4       	brne	.+56     	; 0x1914 <Timer_deInit+0x4a>
		TCCR0 = 0;
    18dc:	e3 e5       	ldi	r30, 0x53	; 83
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	10 82       	st	Z, r1
		TCNT0 = 0;
    18e2:	e2 e5       	ldi	r30, 0x52	; 82
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	10 82       	st	Z, r1
		OCR0 = 0;
    18e8:	ec e5       	ldi	r30, 0x5C	; 92
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE0);
    18ee:	a9 e5       	ldi	r26, 0x59	; 89
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e9 e5       	ldi	r30, 0x59	; 89
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8d 7f       	andi	r24, 0xFD	; 253
    18fa:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE0);
    18fc:	a9 e5       	ldi	r26, 0x59	; 89
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e9 e5       	ldi	r30, 0x59	; 89
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8e 7f       	andi	r24, 0xFE	; 254
    1908:	8c 93       	st	X, r24
		g_callBackPtr0 = NULL_PTR;
    190a:	10 92 7d 00 	sts	0x007D, r1
    190e:	10 92 7c 00 	sts	0x007C, r1
    1912:	34 c0       	rjmp	.+104    	; 0x197c <Timer_deInit+0xb2>
	} else if (ID == Timer1) {
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	99 f4       	brne	.+38     	; 0x1940 <Timer_deInit+0x76>
		TCNT1 = 0;
    191a:	ec e4       	ldi	r30, 0x4C	; 76
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	11 82       	std	Z+1, r1	; 0x01
    1920:	10 82       	st	Z, r1
		OCR1A = 0;
    1922:	ea e4       	ldi	r30, 0x4A	; 74
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	11 82       	std	Z+1, r1	; 0x01
    1928:	10 82       	st	Z, r1
		TCCR1A = 0;
    192a:	ef e4       	ldi	r30, 0x4F	; 79
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	10 82       	st	Z, r1
		TCCR1B = 0;
    1930:	ee e4       	ldi	r30, 0x4E	; 78
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	10 82       	st	Z, r1
		g_callBackPtr1 = NULL_PTR;
    1936:	10 92 7f 00 	sts	0x007F, r1
    193a:	10 92 7e 00 	sts	0x007E, r1
    193e:	1e c0       	rjmp	.+60     	; 0x197c <Timer_deInit+0xb2>
	} else if (ID == Timer2) {
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	82 30       	cpi	r24, 0x02	; 2
    1944:	d9 f4       	brne	.+54     	; 0x197c <Timer_deInit+0xb2>
		TCCR2 = 0;
    1946:	e5 e4       	ldi	r30, 0x45	; 69
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	10 82       	st	Z, r1
		TCNT2 = 0;
    194c:	e4 e4       	ldi	r30, 0x44	; 68
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	10 82       	st	Z, r1
		OCR2 = 0;
    1952:	e3 e4       	ldi	r30, 0x43	; 67
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2);
    1958:	a9 e5       	ldi	r26, 0x59	; 89
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e9 e5       	ldi	r30, 0x59	; 89
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8f 77       	andi	r24, 0x7F	; 127
    1964:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2);
    1966:	a9 e5       	ldi	r26, 0x59	; 89
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e9 e5       	ldi	r30, 0x59	; 89
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8f 7b       	andi	r24, 0xBF	; 191
    1972:	8c 93       	st	X, r24
		g_callBackPtr2 = NULL_PTR;
    1974:	10 92 81 00 	sts	0x0081, r1
    1978:	10 92 80 00 	sts	0x0080, r1
	} else {
		return;
	}

}
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <Timer_setCallBack>:

/*
 * Function to set the call back function of the chosen timerID
 * */
void Timer_setCallBack(void (*a_ptr)(void), Timer_ID ID) {
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <Timer_setCallBack+0x6>
    198a:	0f 92       	push	r0
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	6b 83       	std	Y+3, r22	; 0x03

	if (ID == Timer0) {
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	88 23       	and	r24, r24
    199a:	39 f4       	brne	.+14     	; 0x19aa <Timer_setCallBack+0x26>
		g_callBackPtr0 = a_ptr;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	90 93 7d 00 	sts	0x007D, r25
    19a4:	80 93 7c 00 	sts	0x007C, r24
    19a8:	13 c0       	rjmp	.+38     	; 0x19d0 <Timer_setCallBack+0x4c>
	} else if (ID == Timer1) {
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	39 f4       	brne	.+14     	; 0x19be <Timer_setCallBack+0x3a>
		g_callBackPtr1 = a_ptr;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	90 93 7f 00 	sts	0x007F, r25
    19b8:	80 93 7e 00 	sts	0x007E, r24
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <Timer_setCallBack+0x4c>
	} else if (ID == Timer2) {
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	31 f4       	brne	.+12     	; 0x19d0 <Timer_setCallBack+0x4c>
		g_callBackPtr2 = a_ptr;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	90 93 81 00 	sts	0x0081, r25
    19cc:	80 93 80 00 	sts	0x0080, r24
	} else {
		return;
	}

}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <EEPROM_writeByte+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <EEPROM_writeByte+0x8>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    19ee:	0e 94 f6 10 	call	0x21ec	; 0x21ec <TWI_start>
    if (TWI_getStatus() != TWI_START)
    19f2:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    19f6:	88 30       	cpi	r24, 0x08	; 8
    19f8:	11 f0       	breq	.+4      	; 0x19fe <EEPROM_writeByte+0x22>
        return ERROR;
    19fa:	1c 82       	std	Y+4, r1	; 0x04
    19fc:	28 c0       	rjmp	.+80     	; 0x1a4e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	80 70       	andi	r24, 0x00	; 0
    1a04:	97 70       	andi	r25, 0x07	; 7
    1a06:	88 0f       	add	r24, r24
    1a08:	89 2f       	mov	r24, r25
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	99 0b       	sbc	r25, r25
    1a0e:	91 95       	neg	r25
    1a10:	80 6a       	ori	r24, 0xA0	; 160
    1a12:	0e 94 11 11 	call	0x2222	; 0x2222 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a16:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1a1a:	88 31       	cpi	r24, 0x18	; 24
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <EEPROM_writeByte+0x46>
        return ERROR; 
    1a1e:	1c 82       	std	Y+4, r1	; 0x04
    1a20:	16 c0       	rjmp	.+44     	; 0x1a4e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	0e 94 11 11 	call	0x2222	; 0x2222 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a28:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1a2c:	88 32       	cpi	r24, 0x28	; 40
    1a2e:	11 f0       	breq	.+4      	; 0x1a34 <EEPROM_writeByte+0x58>
        return ERROR;
    1a30:	1c 82       	std	Y+4, r1	; 0x04
    1a32:	0d c0       	rjmp	.+26     	; 0x1a4e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	0e 94 11 11 	call	0x2222	; 0x2222 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a3a:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1a3e:	88 32       	cpi	r24, 0x28	; 40
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <EEPROM_writeByte+0x6a>
        return ERROR;
    1a42:	1c 82       	std	Y+4, r1	; 0x04
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1a46:	0e 94 06 11 	call	0x220c	; 0x220c <TWI_stop>
	
    return SUCCESS;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	8c 83       	std	Y+4, r24	; 0x04
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <EEPROM_readByte+0x6>
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <EEPROM_readByte+0x8>
    1a66:	0f 92       	push	r0
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	7c 83       	std	Y+4, r23	; 0x04
    1a72:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a74:	0e 94 f6 10 	call	0x21ec	; 0x21ec <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a78:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1a7c:	88 30       	cpi	r24, 0x08	; 8
    1a7e:	11 f0       	breq	.+4      	; 0x1a84 <EEPROM_readByte+0x26>
        return ERROR;
    1a80:	1d 82       	std	Y+5, r1	; 0x05
    1a82:	44 c0       	rjmp	.+136    	; 0x1b0c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	80 70       	andi	r24, 0x00	; 0
    1a8a:	97 70       	andi	r25, 0x07	; 7
    1a8c:	88 0f       	add	r24, r24
    1a8e:	89 2f       	mov	r24, r25
    1a90:	88 1f       	adc	r24, r24
    1a92:	99 0b       	sbc	r25, r25
    1a94:	91 95       	neg	r25
    1a96:	80 6a       	ori	r24, 0xA0	; 160
    1a98:	0e 94 11 11 	call	0x2222	; 0x2222 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a9c:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1aa0:	88 31       	cpi	r24, 0x18	; 24
    1aa2:	11 f0       	breq	.+4      	; 0x1aa8 <EEPROM_readByte+0x4a>
        return ERROR;
    1aa4:	1d 82       	std	Y+5, r1	; 0x05
    1aa6:	32 c0       	rjmp	.+100    	; 0x1b0c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	0e 94 11 11 	call	0x2222	; 0x2222 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1aae:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1ab2:	88 32       	cpi	r24, 0x28	; 40
    1ab4:	11 f0       	breq	.+4      	; 0x1aba <EEPROM_readByte+0x5c>
        return ERROR;
    1ab6:	1d 82       	std	Y+5, r1	; 0x05
    1ab8:	29 c0       	rjmp	.+82     	; 0x1b0c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1aba:	0e 94 f6 10 	call	0x21ec	; 0x21ec <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1abe:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1ac2:	80 31       	cpi	r24, 0x10	; 16
    1ac4:	11 f0       	breq	.+4      	; 0x1aca <EEPROM_readByte+0x6c>
        return ERROR;
    1ac6:	1d 82       	std	Y+5, r1	; 0x05
    1ac8:	21 c0       	rjmp	.+66     	; 0x1b0c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	80 70       	andi	r24, 0x00	; 0
    1ad0:	97 70       	andi	r25, 0x07	; 7
    1ad2:	88 0f       	add	r24, r24
    1ad4:	89 2f       	mov	r24, r25
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	99 0b       	sbc	r25, r25
    1ada:	91 95       	neg	r25
    1adc:	81 6a       	ori	r24, 0xA1	; 161
    1ade:	0e 94 11 11 	call	0x2222	; 0x2222 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1ae2:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1ae6:	80 34       	cpi	r24, 0x40	; 64
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <EEPROM_readByte+0x90>
        return ERROR;
    1aea:	1d 82       	std	Y+5, r1	; 0x05
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1aee:	0e 94 3b 11 	call	0x2276	; 0x2276 <TWI_readByteWithNACK>
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1af8:	0e 94 4e 11 	call	0x229c	; 0x229c <TWI_getStatus>
    1afc:	88 35       	cpi	r24, 0x58	; 88
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <EEPROM_readByte+0xa6>
        return ERROR;
    1b00:	1d 82       	std	Y+5, r1	; 0x05
    1b02:	04 c0       	rjmp	.+8      	; 0x1b0c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1b04:	0e 94 06 11 	call	0x220c	; 0x220c <TWI_stop>

    return SUCCESS;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <GPIO_setupPinDirection+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <GPIO_setupPinDirection+0x8>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	6a 83       	std	Y+2, r22	; 0x02
    1b30:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <GPIO_setupPinDirection+0x1c>
    1b38:	d5 c0       	rjmp	.+426    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	84 30       	cpi	r24, 0x04	; 4
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <GPIO_setupPinDirection+0x24>
    1b40:	d1 c0       	rjmp	.+418    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	3d 83       	std	Y+5, r19	; 0x05
    1b4a:	2c 83       	std	Y+4, r18	; 0x04
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <GPIO_setupPinDirection+0x3a>
    1b56:	43 c0       	rjmp	.+134    	; 0x1bde <GPIO_setupPinDirection+0xc0>
    1b58:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5c:	22 30       	cpi	r18, 0x02	; 2
    1b5e:	31 05       	cpc	r19, r1
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <GPIO_setupPinDirection+0x4e>
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <GPIO_setupPinDirection+0x68>
    1b6a:	bc c0       	rjmp	.+376    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
    1b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	31 05       	cpc	r19, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <GPIO_setupPinDirection+0x5a>
    1b76:	5f c0       	rjmp	.+190    	; 0x1c36 <GPIO_setupPinDirection+0x118>
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <GPIO_setupPinDirection+0x66>
    1b82:	85 c0       	rjmp	.+266    	; 0x1c8e <GPIO_setupPinDirection+0x170>
    1b84:	af c0       	rjmp	.+350    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	a1 f4       	brne	.+40     	; 0x1bb4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b8c:	aa e3       	ldi	r26, 0x3A	; 58
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ea e3       	ldi	r30, 0x3A	; 58
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <GPIO_setupPinDirection+0x8c>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <GPIO_setupPinDirection+0x88>
    1bae:	84 2b       	or	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	98 c0       	rjmp	.+304    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bb4:	aa e3       	ldi	r26, 0x3A	; 58
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ea e3       	ldi	r30, 0x3A	; 58
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_setupPinDirection+0xb4>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_setupPinDirection+0xb0>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	83 c0       	rjmp	.+262    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1be4:	a7 e3       	ldi	r26, 0x37	; 55
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e7 e3       	ldi	r30, 0x37	; 55
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <GPIO_setupPinDirection+0xe4>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <GPIO_setupPinDirection+0xe0>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	6c c0       	rjmp	.+216    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c0c:	a7 e3       	ldi	r26, 0x37	; 55
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e7 e3       	ldi	r30, 0x37	; 55
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_setupPinDirection+0x10c>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_setupPinDirection+0x108>
    1c2e:	80 95       	com	r24
    1c30:	84 23       	and	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	57 c0       	rjmp	.+174    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	a1 f4       	brne	.+40     	; 0x1c64 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c3c:	a4 e3       	ldi	r26, 0x34	; 52
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e4 e3       	ldi	r30, 0x34	; 52
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <GPIO_setupPinDirection+0x13c>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <GPIO_setupPinDirection+0x138>
    1c5e:	84 2b       	or	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	40 c0       	rjmp	.+128    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c64:	a4 e3       	ldi	r26, 0x34	; 52
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e4 e3       	ldi	r30, 0x34	; 52
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <GPIO_setupPinDirection+0x164>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <GPIO_setupPinDirection+0x160>
    1c86:	80 95       	com	r24
    1c88:	84 23       	and	r24, r20
    1c8a:	8c 93       	st	X, r24
    1c8c:	2b c0       	rjmp	.+86     	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	a1 f4       	brne	.+40     	; 0x1cbc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c94:	a1 e3       	ldi	r26, 0x31	; 49
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e1 e3       	ldi	r30, 0x31	; 49
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <GPIO_setupPinDirection+0x194>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <GPIO_setupPinDirection+0x190>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	14 c0       	rjmp	.+40     	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1cbc:	a1 e3       	ldi	r26, 0x31	; 49
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e1 e3       	ldi	r30, 0x31	; 49
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <GPIO_setupPinDirection+0x1bc>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <GPIO_setupPinDirection+0x1b8>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <GPIO_writePin+0x6>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <GPIO_writePin+0x8>
    1cfc:	0f 92       	push	r0
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	6a 83       	std	Y+2, r22	; 0x02
    1d06:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	88 30       	cpi	r24, 0x08	; 8
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <GPIO_writePin+0x1c>
    1d0e:	d5 c0       	rjmp	.+426    	; 0x1eba <GPIO_writePin+0x1c6>
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	84 30       	cpi	r24, 0x04	; 4
    1d14:	08 f0       	brcs	.+2      	; 0x1d18 <GPIO_writePin+0x24>
    1d16:	d1 c0       	rjmp	.+418    	; 0x1eba <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	3d 83       	std	Y+5, r19	; 0x05
    1d20:	2c 83       	std	Y+4, r18	; 0x04
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	9d 81       	ldd	r25, Y+5	; 0x05
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <GPIO_writePin+0x3a>
    1d2c:	43 c0       	rjmp	.+134    	; 0x1db4 <GPIO_writePin+0xc0>
    1d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d30:	3d 81       	ldd	r19, Y+5	; 0x05
    1d32:	22 30       	cpi	r18, 0x02	; 2
    1d34:	31 05       	cpc	r19, r1
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <GPIO_writePin+0x4e>
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	71 f0       	breq	.+28     	; 0x1d5c <GPIO_writePin+0x68>
    1d40:	bc c0       	rjmp	.+376    	; 0x1eba <GPIO_writePin+0x1c6>
    1d42:	2c 81       	ldd	r18, Y+4	; 0x04
    1d44:	3d 81       	ldd	r19, Y+5	; 0x05
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <GPIO_writePin+0x5a>
    1d4c:	5f c0       	rjmp	.+190    	; 0x1e0c <GPIO_writePin+0x118>
    1d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d50:	9d 81       	ldd	r25, Y+5	; 0x05
    1d52:	83 30       	cpi	r24, 0x03	; 3
    1d54:	91 05       	cpc	r25, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <GPIO_writePin+0x66>
    1d58:	85 c0       	rjmp	.+266    	; 0x1e64 <GPIO_writePin+0x170>
    1d5a:	af c0       	rjmp	.+350    	; 0x1eba <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	a1 f4       	brne	.+40     	; 0x1d8a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d62:	ab e3       	ldi	r26, 0x3B	; 59
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	eb e3       	ldi	r30, 0x3B	; 59
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 2e       	mov	r0, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <GPIO_writePin+0x8c>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	0a 94       	dec	r0
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <GPIO_writePin+0x88>
    1d84:	84 2b       	or	r24, r20
    1d86:	8c 93       	st	X, r24
    1d88:	98 c0       	rjmp	.+304    	; 0x1eba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d8a:	ab e3       	ldi	r26, 0x3B	; 59
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb e3       	ldi	r30, 0x3B	; 59
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <GPIO_writePin+0xb4>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <GPIO_writePin+0xb0>
    1dac:	80 95       	com	r24
    1dae:	84 23       	and	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	83 c0       	rjmp	.+262    	; 0x1eba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	a1 f4       	brne	.+40     	; 0x1de2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1dba:	a8 e3       	ldi	r26, 0x38	; 56
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e8 e3       	ldi	r30, 0x38	; 56
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <GPIO_writePin+0xe4>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <GPIO_writePin+0xe0>
    1ddc:	84 2b       	or	r24, r20
    1dde:	8c 93       	st	X, r24
    1de0:	6c c0       	rjmp	.+216    	; 0x1eba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1de2:	a8 e3       	ldi	r26, 0x38	; 56
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e8 e3       	ldi	r30, 0x38	; 56
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <GPIO_writePin+0x10c>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <GPIO_writePin+0x108>
    1e04:	80 95       	com	r24
    1e06:	84 23       	and	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	57 c0       	rjmp	.+174    	; 0x1eba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	a1 f4       	brne	.+40     	; 0x1e3a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e12:	a5 e3       	ldi	r26, 0x35	; 53
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e3       	ldi	r30, 0x35	; 53
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 2e       	mov	r0, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <GPIO_writePin+0x13c>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	0a 94       	dec	r0
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <GPIO_writePin+0x138>
    1e34:	84 2b       	or	r24, r20
    1e36:	8c 93       	st	X, r24
    1e38:	40 c0       	rjmp	.+128    	; 0x1eba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e3a:	a5 e3       	ldi	r26, 0x35	; 53
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e5 e3       	ldi	r30, 0x35	; 53
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	48 2f       	mov	r20, r24
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 2e       	mov	r0, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <GPIO_writePin+0x164>
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	0a 94       	dec	r0
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <GPIO_writePin+0x160>
    1e5c:	80 95       	com	r24
    1e5e:	84 23       	and	r24, r20
    1e60:	8c 93       	st	X, r24
    1e62:	2b c0       	rjmp	.+86     	; 0x1eba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	a1 f4       	brne	.+40     	; 0x1e92 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e6a:	a2 e3       	ldi	r26, 0x32	; 50
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e2 e3       	ldi	r30, 0x32	; 50
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <GPIO_writePin+0x194>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <GPIO_writePin+0x190>
    1e8c:	84 2b       	or	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e92:	a2 e3       	ldi	r26, 0x32	; 50
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e2 e3       	ldi	r30, 0x32	; 50
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <GPIO_writePin+0x1bc>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <GPIO_writePin+0x1b8>
    1eb4:	80 95       	com	r24
    1eb6:	84 23       	and	r24, r20
    1eb8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <GPIO_readPin+0x6>
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <GPIO_readPin+0x8>
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	8a 83       	std	Y+2, r24	; 0x02
    1eda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1edc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	88 30       	cpi	r24, 0x08	; 8
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <GPIO_readPin+0x1c>
    1ee4:	84 c0       	rjmp	.+264    	; 0x1fee <GPIO_readPin+0x124>
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <GPIO_readPin+0x24>
    1eec:	80 c0       	rjmp	.+256    	; 0x1fee <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	3d 83       	std	Y+5, r19	; 0x05
    1ef6:	2c 83       	std	Y+4, r18	; 0x04
    1ef8:	4c 81       	ldd	r20, Y+4	; 0x04
    1efa:	5d 81       	ldd	r21, Y+5	; 0x05
    1efc:	41 30       	cpi	r20, 0x01	; 1
    1efe:	51 05       	cpc	r21, r1
    1f00:	79 f1       	breq	.+94     	; 0x1f60 <GPIO_readPin+0x96>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	82 30       	cpi	r24, 0x02	; 2
    1f08:	91 05       	cpc	r25, r1
    1f0a:	34 f4       	brge	.+12     	; 0x1f18 <GPIO_readPin+0x4e>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	21 15       	cp	r18, r1
    1f12:	31 05       	cpc	r19, r1
    1f14:	69 f0       	breq	.+26     	; 0x1f30 <GPIO_readPin+0x66>
    1f16:	6b c0       	rjmp	.+214    	; 0x1fee <GPIO_readPin+0x124>
    1f18:	4c 81       	ldd	r20, Y+4	; 0x04
    1f1a:	5d 81       	ldd	r21, Y+5	; 0x05
    1f1c:	42 30       	cpi	r20, 0x02	; 2
    1f1e:	51 05       	cpc	r21, r1
    1f20:	b9 f1       	breq	.+110    	; 0x1f90 <GPIO_readPin+0xc6>
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	9d 81       	ldd	r25, Y+5	; 0x05
    1f26:	83 30       	cpi	r24, 0x03	; 3
    1f28:	91 05       	cpc	r25, r1
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <GPIO_readPin+0x64>
    1f2c:	49 c0       	rjmp	.+146    	; 0x1fc0 <GPIO_readPin+0xf6>
    1f2e:	5f c0       	rjmp	.+190    	; 0x1fee <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f30:	e9 e3       	ldi	r30, 0x39	; 57
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a9 01       	movw	r20, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <GPIO_readPin+0x7e>
    1f44:	55 95       	asr	r21
    1f46:	47 95       	ror	r20
    1f48:	8a 95       	dec	r24
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <GPIO_readPin+0x7a>
    1f4c:	ca 01       	movw	r24, r20
    1f4e:	81 70       	andi	r24, 0x01	; 1
    1f50:	90 70       	andi	r25, 0x00	; 0
    1f52:	88 23       	and	r24, r24
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	49 c0       	rjmp	.+146    	; 0x1fee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f5c:	19 82       	std	Y+1, r1	; 0x01
    1f5e:	47 c0       	rjmp	.+142    	; 0x1fee <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f60:	e6 e3       	ldi	r30, 0x36	; 54
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a9 01       	movw	r20, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <GPIO_readPin+0xae>
    1f74:	55 95       	asr	r21
    1f76:	47 95       	ror	r20
    1f78:	8a 95       	dec	r24
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <GPIO_readPin+0xaa>
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	81 70       	andi	r24, 0x01	; 1
    1f80:	90 70       	andi	r25, 0x00	; 0
    1f82:	88 23       	and	r24, r24
    1f84:	19 f0       	breq	.+6      	; 0x1f8c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	31 c0       	rjmp	.+98     	; 0x1fee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	2f c0       	rjmp	.+94     	; 0x1fee <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f90:	e3 e3       	ldi	r30, 0x33	; 51
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <GPIO_readPin+0xde>
    1fa4:	55 95       	asr	r21
    1fa6:	47 95       	ror	r20
    1fa8:	8a 95       	dec	r24
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <GPIO_readPin+0xda>
    1fac:	ca 01       	movw	r24, r20
    1fae:	81 70       	andi	r24, 0x01	; 1
    1fb0:	90 70       	andi	r25, 0x00	; 0
    1fb2:	88 23       	and	r24, r24
    1fb4:	19 f0       	breq	.+6      	; 0x1fbc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	19 c0       	rjmp	.+50     	; 0x1fee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	17 c0       	rjmp	.+46     	; 0x1fee <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1fc0:	e0 e3       	ldi	r30, 0x30	; 48
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a9 01       	movw	r20, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <GPIO_readPin+0x10e>
    1fd4:	55 95       	asr	r21
    1fd6:	47 95       	ror	r20
    1fd8:	8a 95       	dec	r24
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <GPIO_readPin+0x10a>
    1fdc:	ca 01       	movw	r24, r20
    1fde:	81 70       	andi	r24, 0x01	; 1
    1fe0:	90 70       	andi	r25, 0x00	; 0
    1fe2:	88 23       	and	r24, r24
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fec:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_setupPortDirection+0x6>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <GPIO_setupPortDirection+0x8>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	84 30       	cpi	r24, 0x04	; 4
    2014:	90 f5       	brcc	.+100    	; 0x207a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	3c 83       	std	Y+4, r19	; 0x04
    201e:	2b 83       	std	Y+3, r18	; 0x03
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	91 05       	cpc	r25, r1
    2028:	d1 f0       	breq	.+52     	; 0x205e <GPIO_setupPortDirection+0x5e>
    202a:	2b 81       	ldd	r18, Y+3	; 0x03
    202c:	3c 81       	ldd	r19, Y+4	; 0x04
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	2c f4       	brge	.+10     	; 0x203e <GPIO_setupPortDirection+0x3e>
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	61 f0       	breq	.+24     	; 0x2054 <GPIO_setupPortDirection+0x54>
    203c:	1e c0       	rjmp	.+60     	; 0x207a <GPIO_setupPortDirection+0x7a>
    203e:	2b 81       	ldd	r18, Y+3	; 0x03
    2040:	3c 81       	ldd	r19, Y+4	; 0x04
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	81 f0       	breq	.+32     	; 0x2068 <GPIO_setupPortDirection+0x68>
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	91 05       	cpc	r25, r1
    2050:	81 f0       	breq	.+32     	; 0x2072 <GPIO_setupPortDirection+0x72>
    2052:	13 c0       	rjmp	.+38     	; 0x207a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2054:	ea e3       	ldi	r30, 0x3A	; 58
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	80 83       	st	Z, r24
    205c:	0e c0       	rjmp	.+28     	; 0x207a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    205e:	e7 e3       	ldi	r30, 0x37	; 55
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	80 83       	st	Z, r24
    2066:	09 c0       	rjmp	.+18     	; 0x207a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2068:	e4 e3       	ldi	r30, 0x34	; 52
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	80 83       	st	Z, r24
    2070:	04 c0       	rjmp	.+8      	; 0x207a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2072:	e1 e3       	ldi	r30, 0x31	; 49
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	80 83       	st	Z, r24
			break;
		}
	}
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <GPIO_writePort+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <GPIO_writePort+0x8>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	90 f5       	brcc	.+100    	; 0x2102 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3c 83       	std	Y+4, r19	; 0x04
    20a6:	2b 83       	std	Y+3, r18	; 0x03
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	d1 f0       	breq	.+52     	; 0x20e6 <GPIO_writePort+0x5e>
    20b2:	2b 81       	ldd	r18, Y+3	; 0x03
    20b4:	3c 81       	ldd	r19, Y+4	; 0x04
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <GPIO_writePort+0x3e>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	61 f0       	breq	.+24     	; 0x20dc <GPIO_writePort+0x54>
    20c4:	1e c0       	rjmp	.+60     	; 0x2102 <GPIO_writePort+0x7a>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <GPIO_writePort+0x68>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	81 f0       	breq	.+32     	; 0x20fa <GPIO_writePort+0x72>
    20da:	13 c0       	rjmp	.+38     	; 0x2102 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    20dc:	eb e3       	ldi	r30, 0x3B	; 59
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	80 83       	st	Z, r24
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	80 83       	st	Z, r24
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20f0:	e5 e3       	ldi	r30, 0x35	; 53
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	80 83       	st	Z, r24
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20fa:	e2 e3       	ldi	r30, 0x32	; 50
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 83       	st	Z, r24
			break;
		}
	}
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <GPIO_readPort+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <GPIO_readPort+0x8>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    211e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	84 30       	cpi	r24, 0x04	; 4
    2124:	90 f5       	brcc	.+100    	; 0x218a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3c 83       	std	Y+4, r19	; 0x04
    212e:	2b 83       	std	Y+3, r18	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	91 05       	cpc	r25, r1
    2138:	d1 f0       	breq	.+52     	; 0x216e <GPIO_readPort+0x5e>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	2c f4       	brge	.+10     	; 0x214e <GPIO_readPort+0x3e>
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	61 f0       	breq	.+24     	; 0x2164 <GPIO_readPort+0x54>
    214c:	1e c0       	rjmp	.+60     	; 0x218a <GPIO_readPort+0x7a>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	81 f0       	breq	.+32     	; 0x2178 <GPIO_readPort+0x68>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	91 05       	cpc	r25, r1
    2160:	81 f0       	breq	.+32     	; 0x2182 <GPIO_readPort+0x72>
    2162:	13 c0       	rjmp	.+38     	; 0x218a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2164:	e9 e3       	ldi	r30, 0x39	; 57
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	0e c0       	rjmp	.+28     	; 0x218a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    216e:	e6 e3       	ldi	r30, 0x36	; 54
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	09 c0       	rjmp	.+18     	; 0x218a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2178:	e3 e3       	ldi	r30, 0x33	; 51
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	04 c0       	rjmp	.+8      	; 0x218a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2182:	e0 e3       	ldi	r30, 0x30	; 48
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <TWI_init+0x6>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWSR = (TWSR & 0xFC) | (Config_Ptr -> prescaler);
    21a8:	a1 e2       	ldi	r26, 0x21	; 33
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e1 e2       	ldi	r30, 0x21	; 33
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	98 2f       	mov	r25, r24
    21b4:	9c 7f       	andi	r25, 0xFC	; 252
    21b6:	e9 81       	ldd	r30, Y+1	; 0x01
    21b8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ba:	81 81       	ldd	r24, Z+1	; 0x01
    21bc:	89 2b       	or	r24, r25
    21be:	8c 93       	st	X, r24
    TWBR = (Config_Ptr -> bit_rate);
    21c0:	a0 e2       	ldi	r26, 0x20	; 32
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	8c 93       	st	X, r24
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr -> TWI_Address)<<1); // my address = 0x01 :)   // el address ely hdeholo fl main b2a
    21cc:	a2 e2       	ldi	r26, 0x22	; 34
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e9 81       	ldd	r30, Y+1	; 0x01
    21d2:	fa 81       	ldd	r31, Y+2	; 0x02
    21d4:	80 81       	ld	r24, Z
    21d6:	88 0f       	add	r24, r24
    21d8:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    21da:	e6 e5       	ldi	r30, 0x56	; 86
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	80 83       	st	Z, r24
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <TWI_start>:

void TWI_start(void)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    21f4:	e6 e5       	ldi	r30, 0x56	; 86
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	84 ea       	ldi	r24, 0xA4	; 164
    21fa:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21fc:	e6 e5       	ldi	r30, 0x56	; 86
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	88 23       	and	r24, r24
    2204:	dc f7       	brge	.-10     	; 0x21fc <TWI_start+0x10>
}
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <TWI_stop>:

void TWI_stop(void)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2214:	e6 e5       	ldi	r30, 0x56	; 86
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	84 e9       	ldi	r24, 0x94	; 148
    221a:	80 83       	st	Z, r24
}
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	0f 92       	push	r0
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    222e:	e3 e2       	ldi	r30, 0x23	; 35
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2236:	e6 e5       	ldi	r30, 0x56	; 86
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	84 e8       	ldi	r24, 0x84	; 132
    223c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    223e:	e6 e5       	ldi	r30, 0x56	; 86
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	88 23       	and	r24, r24
    2246:	dc f7       	brge	.-10     	; 0x223e <TWI_writeByte+0x1c>
}
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2258:	e6 e5       	ldi	r30, 0x56	; 86
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	84 ec       	ldi	r24, 0xC4	; 196
    225e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2260:	e6 e5       	ldi	r30, 0x56	; 86
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	88 23       	and	r24, r24
    2268:	dc f7       	brge	.-10     	; 0x2260 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    226a:	e3 e2       	ldi	r30, 0x23	; 35
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    227e:	e6 e5       	ldi	r30, 0x56	; 86
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	84 e8       	ldi	r24, 0x84	; 132
    2284:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2286:	e6 e5       	ldi	r30, 0x56	; 86
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	88 23       	and	r24, r24
    228e:	dc f7       	brge	.-10     	; 0x2286 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2290:	e3 e2       	ldi	r30, 0x23	; 35
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
}
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	0f 92       	push	r0
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    22a6:	e1 e2       	ldi	r30, 0x21	; 33
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	88 7f       	andi	r24, 0xF8	; 248
    22ae:	89 83       	std	Y+1, r24	; 0x01
    return status;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_ptr)
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <UART_init+0x6>
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <UART_init+0x8>
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    22ca:	1a 82       	std	Y+2, r1	; 0x02
    22cc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    22ce:	eb e2       	ldi	r30, 0x2B	; 43
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    22d6:	ea e2       	ldi	r30, 0x2A	; 42
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	88 e1       	ldi	r24, 0x18	; 24
    22dc:	80 83       	st	Z, r24
	 * insert the parity bit from the structure by using pointer to structure
	 * insert the number of stop bits from the structure by using pointer to structure
	 * insert the number of data bits from the structure by using pointer to structure
	 * insert the value of bit rate using the pointer to structure also
	 ***********************************************************************/
	UCSRC = 0 ;
    22de:	e0 e4       	ldi	r30, 0x40	; 64
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	10 82       	st	Z, r1
	UCSRC |= (1<<URSEL);
    22e4:	a0 e4       	ldi	r26, 0x40	; 64
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e0 e4       	ldi	r30, 0x40	; 64
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 68       	ori	r24, 0x80	; 128
    22f0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_ptr->parity)<<4);
    22f2:	a0 e4       	ldi	r26, 0x40	; 64
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e0 e4       	ldi	r30, 0x40	; 64
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	28 2f       	mov	r18, r24
    22fe:	2f 7c       	andi	r18, 0xCF	; 207
    2300:	eb 81       	ldd	r30, Y+3	; 0x03
    2302:	fc 81       	ldd	r31, Y+4	; 0x04
    2304:	80 81       	ld	r24, Z
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	82 95       	swap	r24
    230c:	92 95       	swap	r25
    230e:	90 7f       	andi	r25, 0xF0	; 240
    2310:	98 27       	eor	r25, r24
    2312:	80 7f       	andi	r24, 0xF0	; 240
    2314:	98 27       	eor	r25, r24
    2316:	82 2b       	or	r24, r18
    2318:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_ptr->stopBits)<<3);
    231a:	a0 e4       	ldi	r26, 0x40	; 64
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e0 e4       	ldi	r30, 0x40	; 64
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	28 2f       	mov	r18, r24
    2326:	27 7f       	andi	r18, 0xF7	; 247
    2328:	eb 81       	ldd	r30, Y+3	; 0x03
    232a:	fc 81       	ldd	r31, Y+4	; 0x04
    232c:	81 81       	ldd	r24, Z+1	; 0x01
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	82 2b       	or	r24, r18
    2340:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_ptr->dataBits)<<1);
    2342:	a0 e4       	ldi	r26, 0x40	; 64
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e0 e4       	ldi	r30, 0x40	; 64
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	28 2f       	mov	r18, r24
    234e:	29 7f       	andi	r18, 0xF9	; 249
    2350:	eb 81       	ldd	r30, Y+3	; 0x03
    2352:	fc 81       	ldd	r31, Y+4	; 0x04
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	82 2b       	or	r24, r18
    2360:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_ptr->baudtRate) * 8UL))) - 1);
    2362:	eb 81       	ldd	r30, Y+3	; 0x03
    2364:	fc 81       	ldd	r31, Y+4	; 0x04
    2366:	83 81       	ldd	r24, Z+3	; 0x03
    2368:	94 81       	ldd	r25, Z+4	; 0x04
    236a:	a5 81       	ldd	r26, Z+5	; 0x05
    236c:	b6 81       	ldd	r27, Z+6	; 0x06
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	aa 1f       	adc	r26, r26
    2374:	bb 1f       	adc	r27, r27
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	aa 1f       	adc	r26, r26
    237c:	bb 1f       	adc	r27, r27
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	aa 1f       	adc	r26, r26
    2384:	bb 1f       	adc	r27, r27
    2386:	9c 01       	movw	r18, r24
    2388:	ad 01       	movw	r20, r26
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	92 e1       	ldi	r25, 0x12	; 18
    238e:	aa e7       	ldi	r26, 0x7A	; 122
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 76 12 	call	0x24ec	; 0x24ec <__udivmodsi4>
    239a:	da 01       	movw	r26, r20
    239c:	c9 01       	movw	r24, r18
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    23a4:	e0 e4       	ldi	r30, 0x40	; 64
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	89 2f       	mov	r24, r25
    23ae:	99 27       	eor	r25, r25
    23b0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    23b2:	e9 e2       	ldi	r30, 0x29	; 41
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	80 83       	st	Z, r24
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	0f 92       	push	r0
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    23d4:	eb e2       	ldi	r30, 0x2B	; 43
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	80 72       	andi	r24, 0x20	; 32
    23e0:	90 70       	andi	r25, 0x00	; 0
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	b9 f3       	breq	.-18     	; 0x23d4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23e6:	ec e2       	ldi	r30, 0x2C	; 44
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    23fe:	eb e2       	ldi	r30, 0x2B	; 43
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	88 23       	and	r24, r24
    2406:	dc f7       	brge	.-10     	; 0x23fe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2408:	ec e2       	ldi	r30, 0x2C	; 44
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
}
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	00 d0       	rcall	.+0      	; 0x241a <UART_sendString+0x6>
    241a:	0f 92       	push	r0
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	9b 83       	std	Y+3, r25	; 0x03
    2422:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2424:	19 82       	std	Y+1, r1	; 0x01
    2426:	0e c0       	rjmp	.+28     	; 0x2444 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	9b 81       	ldd	r25, Y+3	; 0x03
    2432:	fc 01       	movw	r30, r24
    2434:	e2 0f       	add	r30, r18
    2436:	f3 1f       	adc	r31, r19
    2438:	80 81       	ld	r24, Z
    243a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <UART_sendByte>
		i++;
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	8f 5f       	subi	r24, 0xFF	; 255
    2442:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	fc 01       	movw	r30, r24
    2450:	e2 0f       	add	r30, r18
    2452:	f3 1f       	adc	r31, r19
    2454:	80 81       	ld	r24, Z
    2456:	88 23       	and	r24, r24
    2458:	39 f7       	brne	.-50     	; 0x2428 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <UART_receiveString+0xa>
    2470:	0f 92       	push	r0
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9b 83       	std	Y+3, r25	; 0x03
    2478:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    247a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	9b 81       	ldd	r25, Y+3	; 0x03
    2486:	8c 01       	movw	r16, r24
    2488:	02 0f       	add	r16, r18
    248a:	13 1f       	adc	r17, r19
    248c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
    2490:	f8 01       	movw	r30, r16
    2492:	80 83       	st	Z, r24
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	8f 5f       	subi	r24, 0xFF	; 255
    249a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	8c 01       	movw	r16, r24
    24a8:	02 0f       	add	r16, r18
    24aa:	13 1f       	adc	r17, r19
    24ac:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <UART_recieveByte>
    24b0:	f8 01       	movw	r30, r16
    24b2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	80 81       	ld	r24, Z
    24c6:	83 32       	cpi	r24, 0x23	; 35
    24c8:	31 f7       	brne	.-52     	; 0x2496 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	9b 81       	ldd	r25, Y+3	; 0x03
    24d4:	fc 01       	movw	r30, r24
    24d6:	e2 0f       	add	r30, r18
    24d8:	f3 1f       	adc	r31, r19
    24da:	10 82       	st	Z, r1
}
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret

000024ec <__udivmodsi4>:
    24ec:	a1 e2       	ldi	r26, 0x21	; 33
    24ee:	1a 2e       	mov	r1, r26
    24f0:	aa 1b       	sub	r26, r26
    24f2:	bb 1b       	sub	r27, r27
    24f4:	fd 01       	movw	r30, r26
    24f6:	0d c0       	rjmp	.+26     	; 0x2512 <__udivmodsi4_ep>

000024f8 <__udivmodsi4_loop>:
    24f8:	aa 1f       	adc	r26, r26
    24fa:	bb 1f       	adc	r27, r27
    24fc:	ee 1f       	adc	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	a2 17       	cp	r26, r18
    2502:	b3 07       	cpc	r27, r19
    2504:	e4 07       	cpc	r30, r20
    2506:	f5 07       	cpc	r31, r21
    2508:	20 f0       	brcs	.+8      	; 0x2512 <__udivmodsi4_ep>
    250a:	a2 1b       	sub	r26, r18
    250c:	b3 0b       	sbc	r27, r19
    250e:	e4 0b       	sbc	r30, r20
    2510:	f5 0b       	sbc	r31, r21

00002512 <__udivmodsi4_ep>:
    2512:	66 1f       	adc	r22, r22
    2514:	77 1f       	adc	r23, r23
    2516:	88 1f       	adc	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	1a 94       	dec	r1
    251c:	69 f7       	brne	.-38     	; 0x24f8 <__udivmodsi4_loop>
    251e:	60 95       	com	r22
    2520:	70 95       	com	r23
    2522:	80 95       	com	r24
    2524:	90 95       	com	r25
    2526:	9b 01       	movw	r18, r22
    2528:	ac 01       	movw	r20, r24
    252a:	bd 01       	movw	r22, r26
    252c:	cf 01       	movw	r24, r30
    252e:	08 95       	ret

00002530 <__prologue_saves__>:
    2530:	2f 92       	push	r2
    2532:	3f 92       	push	r3
    2534:	4f 92       	push	r4
    2536:	5f 92       	push	r5
    2538:	6f 92       	push	r6
    253a:	7f 92       	push	r7
    253c:	8f 92       	push	r8
    253e:	9f 92       	push	r9
    2540:	af 92       	push	r10
    2542:	bf 92       	push	r11
    2544:	cf 92       	push	r12
    2546:	df 92       	push	r13
    2548:	ef 92       	push	r14
    254a:	ff 92       	push	r15
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	ca 1b       	sub	r28, r26
    255a:	db 0b       	sbc	r29, r27
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	09 94       	ijmp

00002568 <__epilogue_restores__>:
    2568:	2a 88       	ldd	r2, Y+18	; 0x12
    256a:	39 88       	ldd	r3, Y+17	; 0x11
    256c:	48 88       	ldd	r4, Y+16	; 0x10
    256e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2570:	6e 84       	ldd	r6, Y+14	; 0x0e
    2572:	7d 84       	ldd	r7, Y+13	; 0x0d
    2574:	8c 84       	ldd	r8, Y+12	; 0x0c
    2576:	9b 84       	ldd	r9, Y+11	; 0x0b
    2578:	aa 84       	ldd	r10, Y+10	; 0x0a
    257a:	b9 84       	ldd	r11, Y+9	; 0x09
    257c:	c8 84       	ldd	r12, Y+8	; 0x08
    257e:	df 80       	ldd	r13, Y+7	; 0x07
    2580:	ee 80       	ldd	r14, Y+6	; 0x06
    2582:	fd 80       	ldd	r15, Y+5	; 0x05
    2584:	0c 81       	ldd	r16, Y+4	; 0x04
    2586:	1b 81       	ldd	r17, Y+3	; 0x03
    2588:	aa 81       	ldd	r26, Y+2	; 0x02
    258a:	b9 81       	ldd	r27, Y+1	; 0x01
    258c:	ce 0f       	add	r28, r30
    258e:	d1 1d       	adc	r29, r1
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	ed 01       	movw	r28, r26
    259c:	08 95       	ret

0000259e <_exit>:
    259e:	f8 94       	cli

000025a0 <__stop_program>:
    25a0:	ff cf       	rjmp	.-2      	; 0x25a0 <__stop_program>
